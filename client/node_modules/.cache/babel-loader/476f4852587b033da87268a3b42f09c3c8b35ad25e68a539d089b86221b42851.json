{"ast":null,"code":"var _jsxFileName = \"/Users/vineetkhodre/react-workspace/thoughtctlchatapp/client/src/components/Chatroom.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport Card from \"./Card.tsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n/**\n * Chatroom Component\n * @param {Object} userLoginInfo - User login information\n */\nfunction Chatroom({\n  userLoginInfo\n}) {\n  _s();\n  // State to manage users, selected member, conversation data, messages, and input\n  const [users, setUsers] = useState([]);\n  const [member, setMember] = useState();\n  const [conversationData, setConversationData] = useState({});\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(null);\n\n  /**\n   * Function to create a new conversation\n   * @param {Object} val - Selected user data\n   * @param {Object} userLoginInfo - User login information\n   */\n  const createConversation = async (val, userLoginInfo) => {\n    setMessages([]);\n    try {\n      const conv = await userLoginInfo.sessionData.newConversation();\n      conv.on(\"text\", onMessage);\n      await conv.join();\n      setConversationData({\n        conversation: conv\n      });\n      createMember(val.id, conv.id, userLoginInfo.token);\n    } catch (err) {\n      console.error(\"Error in create Conversation:\", err);\n    }\n  };\n\n  /**\n   * Function to create a new member in the conversation\n   * @param {string} USER_ID - User ID\n   * @param {string} conversationId - Conversation ID\n   * @param {string} JWT - JSON Web Token\n   */\n  const createMember = async (userId, conversationId, JWT) => {\n    try {\n      const response = await fetch(`https://api.nexmo.com/v0.3/conversations/${conversationId}/members`, {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer ${JWT}`,\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          user_id: userId,\n          action: \"invite\",\n          channel: {\n            type: \"app\"\n          }\n        })\n      });\n    } catch (error) {\n      console.error(\"Error creating member:\", error);\n    }\n  };\n\n  /**\n   * Event handler for incoming messages\n   * @param {Object} sender - Sender information\n   * @param {Object} message - Incoming message\n   */\n  const onMessage = (sender, message) => {\n    let newMessage = {\n      key: message.id,\n      sender: message._embedded.from_user.display_name,\n      text: message.body.text\n    };\n    setMessages(prevMessages => [...prevMessages, newMessage]);\n  };\n\n  /**\n  * Event handler for sending input\n  * @param {Object} evt - Event object\n  */\n  const sendInput = evt => {\n    conversationData.conversation.sendText(input).then(() => {\n      setInput(null);\n    });\n    const inputElement = evt.currentTarget.previousSibling;\n    if (inputElement) {\n      inputElement.value = \"\";\n    }\n  };\n\n  /**\n   * Creates a Card component for each user\n   * @param {Object} val - User data\n   * @returns {JSX.Element} - Card component\n   */\n  const ncard = val => {\n    return /*#__PURE__*/_jsxDEV(Card, {\n      username: val.name,\n      onClick: () => {\n        setMember(val);\n      }\n    }, val.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Effect to create a conversation when a member is selected\n  useEffect(() => {\n    if (member) createConversation(member, userLoginInfo);\n  }, [member]);\n\n  // Effect to get the list of all users when the component mounts\n  useEffect(() => {\n    getUsers();\n  }, []);\n\n  /**\n   * Function to get a list of all users from the Nexmo application\n   */\n  const getUsers = async () => {\n    try {\n      const response = await fetch(\"/getUsers\", {\n        method: \"GET\"\n      }).then(results => results.json()).then(data => {\n        setUsers(data.users._embedded.data.users);\n      });\n    } catch (error) {\n      console.error(\"Error in getUsers:\", error);\n    }\n  };\n\n  // JSX structure for the Chatroom component\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatroom flexrow\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"leftroom flexcol\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header flexcolcenteralign\",\n        children: userLoginInfo.user.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"leftcontainer flexcol\",\n        children: users.map(ncard)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"rightcontainer flexcol\",\n      children: member ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"header flexcolcenteralign\",\n          children: member === null || member === void 0 ? void 0 : member.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chatcontainer flexcol\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"messagecontainer flexcol\",\n            children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"messagebox flexcol\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"sender\",\n                children: msg.sender\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 185,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"message flexrowcenteralign\",\n                children: msg.text\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 186,\n                columnNumber: 21\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"inputcontainer flexrowcenteralign\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"messageinput\",\n              onBlur: evt => setInput(evt.currentTarget.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"messagesendbutton flexrowcenteralign\",\n              onClick: evt => sendInput(evt),\n              children: \"Send\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"conmessage flexrowcenteralign\",\n        children: \"Please select a user to start a conversation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 5\n  }, this);\n}\n_s(Chatroom, \"5JnCS4r8H+JHqAPL3m+3KQG+PrE=\");\n_c = Chatroom;\nexport default Chatroom;\nvar _c;\n$RefreshReg$(_c, \"Chatroom\");","map":{"version":3,"names":["React","useEffect","useState","Card","jsxDEV","_jsxDEV","Fragment","_Fragment","Chatroom","userLoginInfo","_s","users","setUsers","member","setMember","conversationData","setConversationData","messages","setMessages","input","setInput","createConversation","val","conv","sessionData","newConversation","on","onMessage","join","conversation","createMember","id","token","err","console","error","userId","conversationId","JWT","response","fetch","method","headers","Authorization","body","JSON","stringify","user_id","action","channel","type","sender","message","newMessage","key","_embedded","from_user","display_name","text","prevMessages","sendInput","evt","sendText","then","inputElement","currentTarget","previousSibling","value","ncard","username","name","onClick","fileName","_jsxFileName","lineNumber","columnNumber","getUsers","results","json","data","className","children","user","map","msg","index","onBlur","_c","$RefreshReg$"],"sources":["/Users/vineetkhodre/react-workspace/thoughtctlchatapp/client/src/components/Chatroom.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Card from \"./Card.tsx\";\n\ninterface UserData {\n  id: string;\n  name: string;\n  // Add other properties based on your actual data structure\n}\n\ninterface Message {\n  key: string;\n  sender: string;\n  text: string;\n}\n\ninterface UserLoginInfo {\n  sessionData: {\n    newConversation: () => Promise<any>;\n  };\n  token: string;\n  user: {\n    username: string;\n  };\n}\n\ninterface ChatroomProps {\n  userLoginInfo: UserLoginInfo;\n}\n\n/**\n * Chatroom Component\n * @param {Object} userLoginInfo - User login information\n */\nfunction Chatroom({ userLoginInfo }: ChatroomProps) {\n  // State to manage users, selected member, conversation data, messages, and input\n  const [users, setUsers] = useState<UserData[]>([]);\n  const [member, setMember] = useState<UserData | undefined>();\n  const [conversationData, setConversationData] = useState<any>({});\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [input, setInput] = useState<string | null>(null);\n\n  /**\n   * Function to create a new conversation\n   * @param {Object} val - Selected user data\n   * @param {Object} userLoginInfo - User login information\n   */\n  const createConversation = async (val: UserData, userLoginInfo: UserLoginInfo) => {\n    setMessages([]);\n    try {\n      const conv = await userLoginInfo.sessionData.newConversation();\n      conv.on(\"text\", onMessage);\n      await conv.join();\n\n      setConversationData({\n        conversation: conv,\n      });\n\n      createMember(val.id, conv.id, userLoginInfo.token);\n    } catch (err) {\n      console.error(\"Error in create Conversation:\", err);\n    }\n  };\n\n  /**\n   * Function to create a new member in the conversation\n   * @param {string} USER_ID - User ID\n   * @param {string} conversationId - Conversation ID\n   * @param {string} JWT - JSON Web Token\n   */\n  const createMember = async (userId: string, conversationId: string, JWT: string) => {\n    try {\n      const response = await fetch(\n        `https://api.nexmo.com/v0.3/conversations/${conversationId}/members`,\n        {\n          method: \"POST\",\n          headers: {\n            Authorization: `Bearer ${JWT}`,\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            user_id: userId,\n            action: \"invite\",\n            channel: {\n              type: \"app\",\n            },\n          }),\n        }\n      );\n    } catch (error) {\n      console.error(\"Error creating member:\", error);\n    }\n  };\n\n  /**\n   * Event handler for incoming messages\n   * @param {Object} sender - Sender information\n   * @param {Object} message - Incoming message\n   */\n  const onMessage = (sender: any, message: any) => {\n    let newMessage: Message = {\n      key: message.id,\n      sender: message._embedded.from_user.display_name,\n      text: message.body.text,\n    };\n    setMessages((prevMessages) => [...prevMessages, newMessage]);\n  };\n\n /**\n * Event handler for sending input\n * @param {Object} evt - Event object\n */\nconst sendInput = (evt: React.MouseEvent<HTMLButtonElement>) => {\n  conversationData.conversation.sendText(input!).then(() => {\n    setInput(null);\n  });\n\n  const inputElement = evt.currentTarget.previousSibling as HTMLInputElement;\n  if (inputElement) {\n    inputElement.value = \"\";\n  }\n};\n\n\n  /**\n   * Creates a Card component for each user\n   * @param {Object} val - User data\n   * @returns {JSX.Element} - Card component\n   */\n  const ncard = (val: UserData) => {\n    return (\n      <Card\n        username={val.name}\n        onClick={() => {\n          setMember(val);\n        }}\n        key={val.id}\n      />\n    );\n  };\n\n  // Effect to create a conversation when a member is selected\n  useEffect(() => {\n    if (member) createConversation(member, userLoginInfo);\n  }, [member]);\n\n  // Effect to get the list of all users when the component mounts\n  useEffect(() => {\n  getUsers();\n  }, []);\n\n  /**\n   * Function to get a list of all users from the Nexmo application\n   */\n  const getUsers = async () => {\n    try {\n      const response = await fetch(\"/getUsers\", {\n        method: \"GET\",\n      })\n        .then((results) => results.json())\n        .then((data) => {\n          setUsers(data.users._embedded.data.users);\n        });\n    } catch (error) {\n      console.error(\"Error in getUsers:\", error);\n    }\n  };\n\n  // JSX structure for the Chatroom component\n  return (\n    <div className=\"chatroom flexrow\">\n      <div className=\"leftroom flexcol\">\n        <div className=\"header flexcolcenteralign\">\n          {userLoginInfo.user.username}\n        </div>\n        <div className=\"leftcontainer flexcol\">{users.map(ncard)}</div>\n      </div>\n      <div className=\"rightcontainer flexcol\">\n        {member ? (\n          <>\n            <div className=\"header flexcolcenteralign\">{member?.name}</div>\n            <div className=\"chatcontainer flexcol\">\n              <div className=\"messagecontainer flexcol\">\n                {messages.map((msg, index) => (\n                  <div className=\"messagebox flexcol\" key={index}>\n                    <div className=\"sender\">{msg.sender}</div>\n                    <div className=\"message flexrowcenteralign\">{msg.text}</div>\n                  </div>\n                ))}\n              </div>\n              <div className=\"inputcontainer flexrowcenteralign\">\n                <input\n                  className=\"messageinput\"\n                  onBlur={(evt) => setInput(evt.currentTarget.value)}\n                />\n                <button\n                  className=\"messagesendbutton flexrowcenteralign\"\n                  onClick={(evt) => sendInput(evt)}\n                >\n                  Send\n                </button>\n              </div>\n            </div>\n          </>\n        ) : (\n          <div className=\"conmessage flexrowcenteralign\">\n            Please select a user to start a conversation\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default Chatroom;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}