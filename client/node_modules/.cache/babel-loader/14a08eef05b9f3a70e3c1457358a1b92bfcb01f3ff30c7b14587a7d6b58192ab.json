{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _Utils = _interopRequireDefault(require(\"./Utils\"));\nvar _ShortCode = _interopRequireDefault(require(\"./ShortCode\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar querystring = require(\"querystring\");\nclass Message {\n  static get ERROR_MESSAGES() {\n    return {\n      sender: \"Invalid from address\",\n      to: \"Invalid to address\",\n      msg: \"Invalid Text Message\",\n      body: \"Invalid Body value in Binary Message\",\n      udh: \"Invalid udh value in Binary Message\",\n      title: \"Invalid title in WAP Push message\",\n      url: \"Invalid url in WAP Push message\"\n    };\n  }\n  static get PATH() {\n    return \"/sms/json\";\n  }\n  /**\n   * @param {Credentials} credentials\n   *    credentials to be used when interacting with the API.\n   * @param {Object} options\n   *    Addition SMS options.\n   */\n\n  constructor(credentials) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.creds = credentials;\n    this.options = options;\n    var _shortcode = new _ShortCode.default(this.creds, this.options);\n    this.shortcodeAlert = _shortcode.shortcodeAlert.bind(_shortcode);\n    this.shortcode2FA = _shortcode.shortcode2FA.bind(_shortcode);\n    this.shortcodeMarketing = _shortcode.shortcodeMarketing.bind(_shortcode);\n  }\n  _checkToAndFrom(data, callback) {\n    if (!data.from) {\n      _Utils.default.sendError(callback, new Error(Message.ERROR_MESSAGES.sender));\n    } else if (!data.to) {\n      _Utils.default.sendError(callback, new Error(Message.ERROR_MESSAGES.to));\n    } else {\n      return;\n    }\n  } // _sendMessageCallback\n\n  _sendMessage(data, callback) {\n    this._checkToAndFrom(data, callback);\n    this.options.logger.info(\"sending message from \" + data.from + \" to \" + data.to + \" with message \" + data.text);\n    var creds = {\n      api_key: this.creds.apiKey,\n      api_secret: this.creds.apiSecret\n    };\n    var body = Object.assign({}, creds, data);\n    this.options.httpClient.request({\n      host: this.options.restHost || \"rest.nexmo.com\",\n      path: Message.PATH,\n      body: JSON.stringify(body),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }, \"POST\", (err, apiResponse) => {\n      if (!err && apiResponse.status && apiResponse.messages[0].status > 0) {\n        _Utils.default.sendError(callback, new Error(apiResponse.messages[0][\"error-text\"]), apiResponse);\n      } else {\n        if (callback) callback(err, apiResponse);\n      }\n    });\n  }\n  /**\n   * TODO: document\n   */\n\n  sendSms(sender, recipient, message, opts, callback) {\n    if (!message) {\n      _Utils.default.sendError(callback, new Error(Message.ERROR_MESSAGES.msg));\n    } else {\n      if (!callback) {\n        callback = opts;\n        opts = {};\n      }\n      opts[\"from\"] = sender;\n      opts[\"to\"] = recipient;\n      opts[\"text\"] = message;\n      this._sendMessage(opts, callback);\n    }\n  }\n  /**\n   * TODO: document\n   */\n\n  sendBinaryMessage(sender, recipient, body, udh, opts, callback) {\n    if (!body) {\n      _Utils.default.sendError(callback, new Error(Message.ERROR_MESSAGES.body));\n    } else if (!udh) {\n      _Utils.default.sendError(callback, new Error(Message.ERROR_MESSAGES.udh));\n    } else {\n      if (!callback) {\n        callback = opts;\n        opts = {};\n      }\n      opts[\"from\"] = sender;\n      opts[\"to\"] = recipient;\n      opts[\"type\"] = \"binary\";\n      opts[\"body\"] = body;\n      opts[\"udh\"] = udh;\n      this._sendMessage(opts, callback);\n    }\n  }\n  /**\n   * TODO: document\n   */\n\n  sendWapPushMessage(sender, recipient, title, url, validity, opts, callback) {\n    if (!title) {\n      _Utils.default.sendError(callback, new Error(Message.ERROR_MESSAGES.title));\n    } else if (!url) {\n      _Utils.default.sendError(callback, new Error(Message.ERROR_MESSAGES.url));\n    } else {\n      if (typeof validity === \"function\") {\n        callback = validity;\n        opts = {};\n        validity = 86400000;\n      }\n      if (typeof opts === \"function\") {\n        callback = opts;\n        opts = {};\n      }\n      opts[\"from\"] = sender;\n      opts[\"to\"] = recipient;\n      opts[\"type\"] = \"wappush\";\n      opts[\"title\"] = title;\n      opts[\"validity\"] = validity;\n      opts[\"url\"] = url;\n      this._sendMessage(opts, callback);\n    }\n  }\n  search(id, callback) {\n    if (typeof id == \"string\") {\n      return this.options.rest.get(\"/search/message\", {\n        id: id\n      }, callback);\n    } // Otherwise we expect an array\n\n    return this.options.rest.get(\"/search/messages\", {\n      ids: id\n    }, callback);\n  }\n  searchRejections(to, date, callback) {\n    return this.options.rest.get(\"/search/rejections\", {\n      to,\n      date\n    }, callback);\n  }\n}\nvar _default = Message;\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"names":["_Utils","_interopRequireDefault","require","_ShortCode","querystring","Message","ERROR_MESSAGES","sender","to","msg","body","udh","title","url","PATH","constructor","credentials","options","arguments","length","undefined","creds","_shortcode","default","shortcodeAlert","bind","shortcode2FA","shortcodeMarketing","_checkToAndFrom","data","callback","from","sendError","Error","_sendMessage","logger","info","text","api_key","apiKey","api_secret","apiSecret","Object","assign","httpClient","request","host","restHost","path","JSON","stringify","headers","err","apiResponse","status","messages","sendSms","recipient","message","opts","sendBinaryMessage","sendWapPushMessage","validity","search","id","rest","get","ids","searchRejections","date"],"sources":["/Users/vineetkhodre/react-workspace/thoughtctlchatapp/node_modules/@vonage/server-sdk/src/Message.js"],"sourcesContent":["\"use strict\";\n\nimport Utils from \"./Utils\";\n\nimport ShortCode from \"./ShortCode\";\n\nvar querystring = require(\"querystring\");\n\nclass Message {\n  static get ERROR_MESSAGES() {\n    return {\n      sender: \"Invalid from address\",\n      to: \"Invalid to address\",\n      msg: \"Invalid Text Message\",\n      body: \"Invalid Body value in Binary Message\",\n      udh: \"Invalid udh value in Binary Message\",\n      title: \"Invalid title in WAP Push message\",\n      url: \"Invalid url in WAP Push message\",\n    };\n  }\n\n  static get PATH() {\n    return \"/sms/json\";\n  }\n\n  /**\n   * @param {Credentials} credentials\n   *    credentials to be used when interacting with the API.\n   * @param {Object} options\n   *    Addition SMS options.\n   */\n  constructor(credentials, options = {}) {\n    this.creds = credentials;\n    this.options = options;\n\n    var _shortcode = new ShortCode(this.creds, this.options);\n\n    this.shortcodeAlert = _shortcode.shortcodeAlert.bind(_shortcode);\n    this.shortcode2FA = _shortcode.shortcode2FA.bind(_shortcode);\n    this.shortcodeMarketing = _shortcode.shortcodeMarketing.bind(_shortcode);\n  }\n\n  _checkToAndFrom(data, callback) {\n    if (!data.from) {\n      Utils.sendError(callback, new Error(Message.ERROR_MESSAGES.sender));\n    } else if (!data.to) {\n      Utils.sendError(callback, new Error(Message.ERROR_MESSAGES.to));\n    } else {\n      return;\n    }\n  }\n\n  // _sendMessageCallback\n\n  _sendMessage(data, callback) {\n    this._checkToAndFrom(data, callback);\n\n    this.options.logger.info(\n      \"sending message from \" +\n        data.from +\n        \" to \" +\n        data.to +\n        \" with message \" +\n        data.text\n    );\n\n    let creds = {\n      api_key: this.creds.apiKey,\n      api_secret: this.creds.apiSecret,\n    };\n\n    let body = Object.assign({}, creds, data);\n    this.options.httpClient.request(\n      {\n        host: this.options.restHost || \"rest.nexmo.com\",\n        path: Message.PATH,\n        body: JSON.stringify(body),\n        headers: { \"Content-Type\": \"application/json\" },\n      },\n      \"POST\",\n      (err, apiResponse) => {\n        if (!err && apiResponse.status && apiResponse.messages[0].status > 0) {\n          Utils.sendError(\n            callback,\n            new Error(apiResponse.messages[0][\"error-text\"]),\n            apiResponse\n          );\n        } else {\n          if (callback) callback(err, apiResponse);\n        }\n      }\n    );\n  }\n\n  /**\n   * TODO: document\n   */\n  sendSms(sender, recipient, message, opts, callback) {\n    if (!message) {\n      Utils.sendError(callback, new Error(Message.ERROR_MESSAGES.msg));\n    } else {\n      if (!callback) {\n        callback = opts;\n        opts = {};\n      }\n      opts[\"from\"] = sender;\n      opts[\"to\"] = recipient;\n      opts[\"text\"] = message;\n      this._sendMessage(opts, callback);\n    }\n  }\n\n  /**\n   * TODO: document\n   */\n  sendBinaryMessage(sender, recipient, body, udh, opts, callback) {\n    if (!body) {\n      Utils.sendError(callback, new Error(Message.ERROR_MESSAGES.body));\n    } else if (!udh) {\n      Utils.sendError(callback, new Error(Message.ERROR_MESSAGES.udh));\n    } else {\n      if (!callback) {\n        callback = opts;\n        opts = {};\n      }\n      opts[\"from\"] = sender;\n      opts[\"to\"] = recipient;\n      opts[\"type\"] = \"binary\";\n      opts[\"body\"] = body;\n      opts[\"udh\"] = udh;\n      this._sendMessage(opts, callback);\n    }\n  }\n\n  /**\n   * TODO: document\n   */\n  sendWapPushMessage(sender, recipient, title, url, validity, opts, callback) {\n    if (!title) {\n      Utils.sendError(callback, new Error(Message.ERROR_MESSAGES.title));\n    } else if (!url) {\n      Utils.sendError(callback, new Error(Message.ERROR_MESSAGES.url));\n    } else {\n      if (typeof validity === \"function\") {\n        callback = validity;\n        opts = {};\n        validity = 86400000;\n      }\n      if (typeof opts === \"function\") {\n        callback = opts;\n        opts = {};\n      }\n      opts[\"from\"] = sender;\n      opts[\"to\"] = recipient;\n      opts[\"type\"] = \"wappush\";\n      opts[\"title\"] = title;\n      opts[\"validity\"] = validity;\n      opts[\"url\"] = url;\n      this._sendMessage(opts, callback);\n    }\n  }\n\n  search(id, callback) {\n    if (typeof id == \"string\") {\n      return this.options.rest.get(\n        \"/search/message\",\n        {\n          id: id,\n        },\n        callback\n      );\n    }\n\n    // Otherwise we expect an array\n    return this.options.rest.get(\n      \"/search/messages\",\n      {\n        ids: id,\n      },\n      callback\n    );\n  }\n\n  searchRejections(to, date, callback) {\n    return this.options.rest.get(\n      \"/search/rejections\",\n      {\n        to,\n        date,\n      },\n      callback\n    );\n  }\n}\n\nexport default Message;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}