{"ast":null,"code":"const {\n  iterateReports\n} = require(\"./utils\");\nfunction calculateMos(reports) {\n  let jitter_time = 0;\n  let recv_pkts = 0;\n  let lost_pkts = 0;\n  let average = 100.0;\n  let packet_loss = 0.0;\n  let effective_latency;\n  let r_value;\n  let mos;\n  iterateReports(reports, report => {\n    if (report.type === \"inbound-rtp\") {\n      jitter_time = report.jitter;\n      lost_pkts = report.packetsLost;\n      recv_pkts = report.packetsReceived;\n    }\n  });\n  if (recv_pkts + lost_pkts > 0) {\n    packet_loss = 100.0 * (lost_pkts / (recv_pkts + lost_pkts));\n  }\n  effective_latency = average + jitter_time * 2 + 10;\n  if (effective_latency < 160) {\n    r_value = 93.2 - effective_latency / 40;\n  } else {\n    r_value = 93.2 - (effective_latency - 120) / 10;\n  }\n  r_value = r_value - packet_loss * 2.5;\n  if (r_value < 1) {\n    r_value = 1;\n  }\n  mos = 1 + 0.035 * r_value + 0.000007 * r_value * (r_value - 60) * (100 - r_value);\n  return parseFloat(mos).toFixed(6);\n}\nmodule.exports = calculateMos;","map":{"version":3,"names":["iterateReports","require","calculateMos","reports","jitter_time","recv_pkts","lost_pkts","average","packet_loss","effective_latency","r_value","mos","report","type","jitter","packetsLost","packetsReceived","parseFloat","toFixed","module","exports"],"sources":["/Users/vineetkhodre/react-workspace/thoughtctlchatapp/client/node_modules/rtc-stats-adapter/calculate-mos.js"],"sourcesContent":["const { iterateReports } = require(\"./utils\");\n\nfunction calculateMos(reports) {\n  let jitter_time = 0;\n  let recv_pkts = 0;\n  let lost_pkts = 0;\n  let average = 100.0;\n  let packet_loss = 0.0;\n  let effective_latency;\n  let r_value;\n  let mos;\n\n  iterateReports(reports, (report) => {\n    if (report.type === \"inbound-rtp\") {\n      jitter_time = report.jitter;\n      lost_pkts = report.packetsLost;\n      recv_pkts = report.packetsReceived;\n    }\n  })\n\n  if (recv_pkts + lost_pkts > 0) {\n    packet_loss = 100.0 * (lost_pkts / (recv_pkts + lost_pkts));\n  }\n  effective_latency = average + jitter_time * 2 + 10;\n  if (effective_latency < 160) {\n    r_value = 93.2 - effective_latency / 40;\n  } else {\n    r_value = 93.2 - (effective_latency - 120) / 10;\n  }\n  r_value = r_value - packet_loss * 2.5;\n\n  if (r_value < 1) {\n    r_value = 1;\n  }\n  mos =\n    1 + 0.035 * r_value + 0.000007 * r_value * (r_value - 60) * (100 - r_value);\n\n  return parseFloat(mos).toFixed(6);\n}\n\nmodule.exports = calculateMos;\n"],"mappings":"AAAA,MAAM;EAAEA;AAAe,CAAC,GAAGC,OAAO,CAAC,SAAS,CAAC;AAE7C,SAASC,YAAYA,CAACC,OAAO,EAAE;EAC7B,IAAIC,WAAW,GAAG,CAAC;EACnB,IAAIC,SAAS,GAAG,CAAC;EACjB,IAAIC,SAAS,GAAG,CAAC;EACjB,IAAIC,OAAO,GAAG,KAAK;EACnB,IAAIC,WAAW,GAAG,GAAG;EACrB,IAAIC,iBAAiB;EACrB,IAAIC,OAAO;EACX,IAAIC,GAAG;EAEPX,cAAc,CAACG,OAAO,EAAGS,MAAM,IAAK;IAClC,IAAIA,MAAM,CAACC,IAAI,KAAK,aAAa,EAAE;MACjCT,WAAW,GAAGQ,MAAM,CAACE,MAAM;MAC3BR,SAAS,GAAGM,MAAM,CAACG,WAAW;MAC9BV,SAAS,GAAGO,MAAM,CAACI,eAAe;IACpC;EACF,CAAC,CAAC;EAEF,IAAIX,SAAS,GAAGC,SAAS,GAAG,CAAC,EAAE;IAC7BE,WAAW,GAAG,KAAK,IAAIF,SAAS,IAAID,SAAS,GAAGC,SAAS,CAAC,CAAC;EAC7D;EACAG,iBAAiB,GAAGF,OAAO,GAAGH,WAAW,GAAG,CAAC,GAAG,EAAE;EAClD,IAAIK,iBAAiB,GAAG,GAAG,EAAE;IAC3BC,OAAO,GAAG,IAAI,GAAGD,iBAAiB,GAAG,EAAE;EACzC,CAAC,MAAM;IACLC,OAAO,GAAG,IAAI,GAAG,CAACD,iBAAiB,GAAG,GAAG,IAAI,EAAE;EACjD;EACAC,OAAO,GAAGA,OAAO,GAAGF,WAAW,GAAG,GAAG;EAErC,IAAIE,OAAO,GAAG,CAAC,EAAE;IACfA,OAAO,GAAG,CAAC;EACb;EACAC,GAAG,GACD,CAAC,GAAG,KAAK,GAAGD,OAAO,GAAG,QAAQ,GAAGA,OAAO,IAAIA,OAAO,GAAG,EAAE,CAAC,IAAI,GAAG,GAAGA,OAAO,CAAC;EAE7E,OAAOO,UAAU,CAACN,GAAG,CAAC,CAACO,OAAO,CAAC,CAAC,CAAC;AACnC;AAEAC,MAAM,CAACC,OAAO,GAAGlB,YAAY"},"metadata":{},"sourceType":"script","externalDependencies":[]}