{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _Utils = _interopRequireDefault(require(\"./Utils\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nclass NumberInsight {\n  static get PATH() {\n    return \"/ni/{type}/json\";\n  }\n  static get ERROR_MESSAGES() {\n    return {\n      numberInsightAdvancedValidation: \"Missing Mandatory fields (number and/or callback url)\",\n      numberInsightValidation: \"Missing Mandatory field - number\",\n      numberInsightPatternFailure: \"Number can contain digits and may include any or all of the following: white space, -,+, (, ).\"\n    };\n  }\n  /**\n   * @param {Credentials} credentials\n   *    credentials to be used when interacting with the API.\n   * @param {Object} options\n   *    Addition NumberInsight options.\n   */\n\n  constructor(credentials) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.creds = credentials;\n    this.options = options;\n  }\n  /**\n   * Get insight on the provided number.\n   *\n   * @param {Object} options - The options for Number Insight\n   * @param {string} options.level - the level of insight: 'basic', 'standard'\n   *                 or 'advanced'.\n   *                 If no `level` value is provided, or an unrecognised value\n   *                 is used, 'basic' level insight will be used.\n   * @param {string} options.number - the phone number to retrieve insight on\n   * @param {string} options.country - 'basic' and 'standard' only.\n   *                 An ISO 3166 Alpha 2 country code\n   *                 https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\n   * @param {string} options. ip - 'advanced' only.\n   *                 The IP address in IPv4 notation of the endpoint the\n   *                 user connected from.\n   * @param {Array}  options.features - 'advanced' only.\n   *                 An Array detailing the information you want for this phone\n   *                 number. Possible Array elements are:\n   *                 - type: number is one of the following: mobile, landline,\n   *                          landline_premium or unknown phone number.\n   *                 - valid: number exists.\n   *                 - reachable: is number available now.\n   *                 - carrier: the MCCMNC for the carrier number is registered\n   *                             with. This is either: <ISO country code>-FIXED\n   *                             or <ISO country code>-PREMIUM.\n   *                 - ported: if the user has changed carrier for number.\n   *                 - roaming: the subscriber is outside their home network\n   *\n   * @param {string} options.callback - 'advanced' only.\n   *                 The callback to be called when the API call completes.\n   * @param {Number} options.callback_timeout - 'advanced' only.\n   *                 The maximum wait until the Number Insight Return Parameters\n   *                 are sent to callback. This is a value between 1000 - 30000ms\n   *                 inclusive. The default is 30000 ms.\n   * @param {string} options.callback_method - 'advanced' only.\n   *                 The HTTP method used to send the Number Insight Return\n   *                 Parameters to callback. Must be GET or POST. The default\n   *                 value is GET.\n   * @param {string} options.client_ref - 'advanced' only.\n   *                 A 40 character reference string returned in the Number\n   *                 Insight Return Parameters. This may be useful for your\n   *                 internal reports.\n   * @param {string} options['include-intermediate-callbacks'] - 'advanced' only.\n   *                 Tells the Vonage platform to make callbacks as soon as an\n   *                 individual piece of information is retrieved.\n   */\n\n  get(options, callback) {\n    var level = options.level; // remove 'level' as it's a library-only parameter\n\n    delete options.level;\n    if (level === \"advanced\" || level === \"advancedAsync\") {\n      if (level === \"advanced\") {\n        console.warn('DEPRECATION WARNING: Number Insight Advanced with a level of \"advanced\" will be synchronous in v2.0+. Consider using the level \"advancedAsync\" to keep using the async option.');\n      }\n      this._numberInsightAsync(options, callback);\n    } else if (level === \"advancedSync\") {\n      this._numberInsightCommon(\"advanced\", options, callback);\n    } else if (level === \"standard\") {\n      this._numberInsightCommon(\"standard\", options, callback);\n    } else {\n      this._numberInsightCommon(\"basic\", options, callback);\n    }\n  }\n  _numberInsightAsync(inputParams, callback) {\n    if (!inputParams.number || !inputParams.callback) {\n      _Utils.default.sendError(callback, new Error(NumberInsight.ERROR_MESSAGES.numberInsightAdvancedValidation));\n    } else {\n      inputParams[\"api_key\"] = this.creds.apiKey;\n      inputParams[\"api_secret\"] = this.creds.apiSecret;\n      this.options.httpClient.request({\n        host: this.options.apiHost || \"api.nexmo.com\",\n        path: _Utils.default.createPathWithQuery(\"\".concat(NumberInsight.PATH.replace(\"{type}\", \"advanced/async\")), inputParams)\n      }, callback);\n    }\n  }\n  _numberInsightCommon(type, inputParams, callback) {\n    if (this._validateNumber(inputParams, callback)) {\n      var inputObj;\n      if (typeof inputParams !== \"object\") {\n        inputObj = {\n          number: inputParams\n        };\n      } else {\n        inputObj = inputParams;\n      }\n      inputObj[\"api_key\"] = this.creds.apiKey;\n      inputObj[\"api_secret\"] = this.creds.apiSecret;\n      this.options.httpClient.request({\n        host: this.options.apiHost || \"api.nexmo.com\",\n        path: _Utils.default.createPathWithQuery(\"\".concat(NumberInsight.PATH.replace(\"{type}\", type)), inputObj)\n      }, callback);\n    }\n  }\n  _validateNumber(inputParams, callback) {\n    var numberPattern = new RegExp(\"^[0-9 +()-]*$\");\n    if (typeof inputParams === \"object\" && !inputParams.number) {\n      _Utils.default.sendError(callback, new Error(NumberInsight.ERROR_MESSAGES.numberInsightValidation));\n    } else if (typeof inputParams === \"object\" && !numberPattern.test(inputParams.number)) {\n      _Utils.default.sendError(callback, new Error(NumberInsight.ERROR_MESSAGES.numberInsightPatternFailure));\n    } else if (typeof inputParams !== \"object\" && (!inputParams || !numberPattern.test(inputParams))) {\n      _Utils.default.sendError(callback, new Error(NumberInsight.ERROR_MESSAGES.numberInsightPatternFailure));\n    }\n    return true;\n  }\n}\nvar _default = NumberInsight;\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"names":["_Utils","_interopRequireDefault","require","NumberInsight","PATH","ERROR_MESSAGES","numberInsightAdvancedValidation","numberInsightValidation","numberInsightPatternFailure","constructor","credentials","options","arguments","length","undefined","creds","get","callback","level","console","warn","_numberInsightAsync","_numberInsightCommon","inputParams","number","default","sendError","Error","apiKey","apiSecret","httpClient","request","host","apiHost","path","createPathWithQuery","concat","replace","type","_validateNumber","inputObj","numberPattern","RegExp","test"],"sources":["/Users/vineetkhodre/react-workspace/thoughtctlchatapp/node_modules/@vonage/server-sdk/src/NumberInsight.js"],"sourcesContent":["\"use strict\";\n\nimport Utils from \"./Utils\";\n\nclass NumberInsight {\n  static get PATH() {\n    return \"/ni/{type}/json\";\n  }\n\n  static get ERROR_MESSAGES() {\n    return {\n      numberInsightAdvancedValidation:\n        \"Missing Mandatory fields (number and/or callback url)\",\n      numberInsightValidation: \"Missing Mandatory field - number\",\n      numberInsightPatternFailure:\n        \"Number can contain digits and may include any or all of the following: white space, -,+, (, ).\",\n    };\n  }\n  /**\n   * @param {Credentials} credentials\n   *    credentials to be used when interacting with the API.\n   * @param {Object} options\n   *    Addition NumberInsight options.\n   */\n  constructor(credentials, options = {}) {\n    this.creds = credentials;\n    this.options = options;\n  }\n\n  /**\n   * Get insight on the provided number.\n   *\n   * @param {Object} options - The options for Number Insight\n   * @param {string} options.level - the level of insight: 'basic', 'standard'\n   *                 or 'advanced'.\n   *                 If no `level` value is provided, or an unrecognised value\n   *                 is used, 'basic' level insight will be used.\n   * @param {string} options.number - the phone number to retrieve insight on\n   * @param {string} options.country - 'basic' and 'standard' only.\n   *                 An ISO 3166 Alpha 2 country code\n   *                 https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\n   * @param {string} options. ip - 'advanced' only.\n   *                 The IP address in IPv4 notation of the endpoint the\n   *                 user connected from.\n   * @param {Array}  options.features - 'advanced' only.\n   *                 An Array detailing the information you want for this phone\n   *                 number. Possible Array elements are:\n   *                 - type: number is one of the following: mobile, landline,\n   *                          landline_premium or unknown phone number.\n   *                 - valid: number exists.\n   *                 - reachable: is number available now.\n   *                 - carrier: the MCCMNC for the carrier number is registered\n   *                             with. This is either: <ISO country code>-FIXED\n   *                             or <ISO country code>-PREMIUM.\n   *                 - ported: if the user has changed carrier for number.\n   *                 - roaming: the subscriber is outside their home network\n   *\n   * @param {string} options.callback - 'advanced' only.\n   *                 The callback to be called when the API call completes.\n   * @param {Number} options.callback_timeout - 'advanced' only.\n   *                 The maximum wait until the Number Insight Return Parameters\n   *                 are sent to callback. This is a value between 1000 - 30000ms\n   *                 inclusive. The default is 30000 ms.\n   * @param {string} options.callback_method - 'advanced' only.\n   *                 The HTTP method used to send the Number Insight Return\n   *                 Parameters to callback. Must be GET or POST. The default\n   *                 value is GET.\n   * @param {string} options.client_ref - 'advanced' only.\n   *                 A 40 character reference string returned in the Number\n   *                 Insight Return Parameters. This may be useful for your\n   *                 internal reports.\n   * @param {string} options['include-intermediate-callbacks'] - 'advanced' only.\n   *                 Tells the Vonage platform to make callbacks as soon as an\n   *                 individual piece of information is retrieved.\n   */\n  get(options, callback) {\n    var level = options.level;\n    // remove 'level' as it's a library-only parameter\n    delete options.level;\n\n    if (level === \"advanced\" || level === \"advancedAsync\") {\n      if (level === \"advanced\") {\n        console.warn(\n          'DEPRECATION WARNING: Number Insight Advanced with a level of \"advanced\" will be synchronous in v2.0+. Consider using the level \"advancedAsync\" to keep using the async option.'\n        );\n      }\n      this._numberInsightAsync(options, callback);\n    } else if (level === \"advancedSync\") {\n      this._numberInsightCommon(\"advanced\", options, callback);\n    } else if (level === \"standard\") {\n      this._numberInsightCommon(\"standard\", options, callback);\n    } else {\n      this._numberInsightCommon(\"basic\", options, callback);\n    }\n  }\n\n  _numberInsightAsync(inputParams, callback) {\n    if (!inputParams.number || !inputParams.callback) {\n      Utils.sendError(\n        callback,\n        new Error(NumberInsight.ERROR_MESSAGES.numberInsightAdvancedValidation)\n      );\n    } else {\n      inputParams[\"api_key\"] = this.creds.apiKey;\n      inputParams[\"api_secret\"] = this.creds.apiSecret;\n      this.options.httpClient.request(\n        {\n          host: this.options.apiHost || \"api.nexmo.com\",\n          path: Utils.createPathWithQuery(\n            `${NumberInsight.PATH.replace(\"{type}\", \"advanced/async\")}`,\n            inputParams\n          ),\n        },\n        callback\n      );\n    }\n  }\n\n  _numberInsightCommon(type, inputParams, callback) {\n    if (this._validateNumber(inputParams, callback)) {\n      var inputObj;\n      if (typeof inputParams !== \"object\") {\n        inputObj = {\n          number: inputParams,\n        };\n      } else {\n        inputObj = inputParams;\n      }\n      inputObj[\"api_key\"] = this.creds.apiKey;\n      inputObj[\"api_secret\"] = this.creds.apiSecret;\n      this.options.httpClient.request(\n        {\n          host: this.options.apiHost || \"api.nexmo.com\",\n          path: Utils.createPathWithQuery(\n            `${NumberInsight.PATH.replace(\"{type}\", type)}`,\n            inputObj\n          ),\n        },\n        callback\n      );\n    }\n  }\n\n  _validateNumber(inputParams, callback) {\n    var numberPattern = new RegExp(\"^[0-9 +()-]*$\");\n\n    if (typeof inputParams === \"object\" && !inputParams.number) {\n      Utils.sendError(\n        callback,\n        new Error(NumberInsight.ERROR_MESSAGES.numberInsightValidation)\n      );\n    } else if (\n      typeof inputParams === \"object\" &&\n      !numberPattern.test(inputParams.number)\n    ) {\n      Utils.sendError(\n        callback,\n        new Error(NumberInsight.ERROR_MESSAGES.numberInsightPatternFailure)\n      );\n    } else if (\n      typeof inputParams !== \"object\" &&\n      (!inputParams || !numberPattern.test(inputParams))\n    ) {\n      Utils.sendError(\n        callback,\n        new Error(NumberInsight.ERROR_MESSAGES.numberInsightPatternFailure)\n      );\n    }\n    return true;\n  }\n}\n\nexport default NumberInsight;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}