{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _fs = require(\"fs\");\nvar _fs2 = _interopRequireDefault(_fs);\nvar _path = require(\"path\");\nvar _path2 = _interopRequireDefault(_path);\nvar _Credentials = require(\"./Credentials\");\nvar _Credentials2 = _interopRequireDefault(_Credentials);\nvar _JwtGenerator = require(\"./JwtGenerator\");\nvar _JwtGenerator2 = _interopRequireDefault(_JwtGenerator);\nvar _HashGenerator = require(\"./HashGenerator\");\nvar _HashGenerator2 = _interopRequireDefault(_HashGenerator);\nvar _Message = require(\"./Message\");\nvar _Message2 = _interopRequireDefault(_Message);\nvar _Voice = require(\"./Voice\");\nvar _Voice2 = _interopRequireDefault(_Voice);\nvar _Number = require(\"./Number\");\nvar _Number2 = _interopRequireDefault(_Number);\nvar _Verify = require(\"./Verify\");\nvar _Verify2 = _interopRequireDefault(_Verify);\nvar _NumberInsight = require(\"./NumberInsight\");\nvar _NumberInsight2 = _interopRequireDefault(_NumberInsight);\nvar _App = require(\"./App\");\nvar _App2 = _interopRequireDefault(_App);\nvar _Account = require(\"./Account\");\nvar _Account2 = _interopRequireDefault(_Account);\nvar _CallsResource = require(\"./CallsResource\");\nvar _CallsResource2 = _interopRequireDefault(_CallsResource);\nvar _Conversations = require(\"./Conversations\");\nvar _Conversations2 = _interopRequireDefault(_Conversations);\nvar _Users = require(\"./Users\");\nvar _Users2 = _interopRequireDefault(_Users);\nvar _FilesResource = require(\"./FilesResource\");\nvar _FilesResource2 = _interopRequireDefault(_FilesResource);\nvar _Conversion = require(\"./Conversion\");\nvar _Conversion2 = _interopRequireDefault(_Conversion);\nvar _Media = require(\"./Media\");\nvar _Media2 = _interopRequireDefault(_Media);\nvar _Redact = require(\"./Redact\");\nvar _Redact2 = _interopRequireDefault(_Redact);\nvar _Channel = require(\"./Channel\");\nvar _Channel2 = _interopRequireDefault(_Channel);\nvar _Dispatch = require(\"./Dispatch\");\nvar _Dispatch2 = _interopRequireDefault(_Dispatch);\nvar _Pricing = require(\"./Pricing\");\nvar _Pricing2 = _interopRequireDefault(_Pricing);\nvar _HttpClient = require(\"./HttpClient\");\nvar _HttpClient2 = _interopRequireDefault(_HttpClient);\nvar _NullLogger = require(\"./NullLogger\");\nvar _NullLogger2 = _interopRequireDefault(_NullLogger);\nvar _ConsoleLogger = require(\"./ConsoleLogger\");\nvar _ConsoleLogger2 = _interopRequireDefault(_ConsoleLogger);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nvar jwtGeneratorInstance = new _JwtGenerator2.default();\nvar hashGeneratorInstance = new _HashGenerator2.default();\nvar Nexmo = function () {\n  /**\n   * @param {Credentials} credentials - Nexmo API credentials\n   * @param {string} credentials.apiKey - the Nexmo API key\n   * @param {string} credentials.apiSecret - the Nexmo API secret\n   * @param {Object} options - Additional options\n   * @param {boolean} options.debug - `true` to turn on debug logging\n   * @param {Object} options.logger - Set a custom logger.\n   * @param {string} options.appendToUserAgent - A value to append to the user agent.\n   *                    The value will be prefixed with a `/`\n   */\n  function Nexmo(credentials) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      debug: false\n    };\n    _classCallCheck(this, Nexmo);\n    this.credentials = _Credentials2.default.parse(credentials);\n    this.options = options;\n\n    // If no logger has been supplied but debug has been set\n    // default to using the ConsoleLogger\n    if (!this.options.logger && this.options.debug) {\n      this.options.logger = new _ConsoleLogger2.default();\n    } else if (!this.options.logger) {\n      // Swallow the logging\n      this.options.logger = new _NullLogger2.default();\n    }\n    var userAgent = \"nexmo-node/UNKNOWN node/UNKNOWN\";\n    try {\n      var packageDetails = require(_path2.default.join(__dirname, \"..\", \"package.json\"));\n      userAgent = \"nexmo-node/\" + packageDetails.version + \" node/\" + process.version.replace(\"v\", \"\");\n    } catch (e) {\n      console.warn(\"Could not load package details\");\n    }\n    this.options.userAgent = userAgent;\n    if (this.options.appendToUserAgent) {\n      this.options.userAgent += \" \" + this.options.appendToUserAgent;\n    }\n\n    // This is legacy, everything should use rest or api going forward\n    this.options.httpClient = new _HttpClient2.default(Object.assign({\n      host: this.options.restHost || \"rest.nexmo.com\"\n    }, this.options), this.credentials);\n\n    // We have two different hosts, so we use two different HttpClients\n    this.options.api = new _HttpClient2.default(Object.assign({\n      host: this.options.apiHost || \"api.nexmo.com\"\n    }, this.options), this.credentials);\n    this.options.rest = new _HttpClient2.default(Object.assign({\n      host: this.options.restHost || \"rest.nexmo.com\"\n    }, this.options), this.credentials);\n    this.message = new _Message2.default(this.credentials, this.options);\n    this.voice = new _Voice2.default(this.credentials, this.options);\n    this.number = new _Number2.default(this.credentials, this.options);\n    this.verify = new _Verify2.default(this.credentials, this.options);\n    this.numberInsight = new _NumberInsight2.default(this.credentials, this.options);\n    this.applications = new _App2.default(this.credentials, this.options);\n    this.account = new _Account2.default(this.credentials, this.options);\n    this.calls = new _CallsResource2.default(this.credentials, this.options);\n    this.conversations = new _Conversations2.default(this.credentials, this.options);\n    this.users = new _Users2.default(this.credentials, this.options);\n    this.files = new _FilesResource2.default(this.credentials, this.options);\n    this.conversion = new _Conversion2.default(this.credentials, this.options);\n    this.media = new _Media2.default(this.credentials, this.options);\n    this.redact = new _Redact2.default(this.credentials, this.options);\n    this.channel = new _Channel2.default(this.credentials, this.options);\n    this.dispatch = new _Dispatch2.default(this.credentials, this.options);\n    this.pricing = new _Pricing2.default(this.credentials, this.options);\n\n    /**\n     * @deprecated Please use nexmo.applications\n     */\n    this.app = this.applications;\n  }\n\n  /**\n   * Generate a JSON Web Token (JWT).\n   *\n   * The private key used upon Nexmo instance construction will be used to sign\n   * the JWT. The application_id you used upon Nexmo instance creation will be\n   * included in the claims for the JWT, however this can be overridden by passing\n   * an application_id as part of the claims.\n   *\n   * @param {Object} claims - name/value pair claims to sign within the JWT\n   *\n   * @returns {String} the generated token\n   */\n\n  _createClass(Nexmo, [{\n    key: \"generateJwt\",\n    value: function generateJwt() {\n      var claims = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      if (claims.application_id === undefined) {\n        claims.application_id = this.credentials.applicationId;\n      }\n      return Nexmo.generateJwt(this.credentials.privateKey, claims);\n    }\n\n    /**\n     * Generate a Signature Hash.\n     *\n     * @param {Object} params - params to generate hash from\n     *\n     * @returns {String} the generated token\n     */\n  }, {\n    key: \"generateSignature\",\n    value: function generateSignature(params) {\n      return this.credentials.generateSignature(params);\n    }\n  }]);\n  return Nexmo;\n}();\n\n/**\n * Generate a JSON Web Token (JWT).\n *\n * @param {String|Buffer} privateKey - the path to the private key certificate\n *          to be used when signing the claims.\n * @param {Object} claims - name/value pair claims to sign within the JWT\n *\n * @returns {String} the generated token\n */\n\nNexmo.generateJwt = function (privateKey, claims) {\n  if (!(privateKey instanceof Buffer)) {\n    if (!_fs2.default.existsSync(privateKey)) {\n      throw new Error(\"File \\\"\" + privateKey + \"\\\" not found.\");\n    } else {\n      privateKey = _fs2.default.readFileSync(privateKey);\n    }\n  }\n  return jwtGeneratorInstance.generate(privateKey, claims);\n};\n\n/**\n * Generate a Signature Hash.\n *\n * @param {String} method - the method to be used when creating the hash\n * @param {String} secret - the secret to be used when creating the hash\n * @param {Object} params - params to generate hash from\n *\n * @returns {String} the generated token\n */\nNexmo.generateSignature = function (method, secret, params) {\n  return hashGeneratorInstance.generate(method, secret, params);\n};\nexports.default = Nexmo;\nmodule.exports = exports[\"default\"];","map":{"version":3,"names":["_fs","require","_path","_Credentials","_JwtGenerator","_HashGenerator","_Message","_Voice","_Number","_Verify","_NumberInsight","_App","_Account","_CallsResource","_Conversations","_Users","_FilesResource","_Conversion","_Media","_Redact","_Channel","_Dispatch","_Pricing","_HttpClient","_NullLogger","_ConsoleLogger","jwtGeneratorInstance","_JwtGenerator2","default","hashGeneratorInstance","_HashGenerator2","Nexmo","credentials","options","arguments","length","undefined","debug","_classCallCheck","_Credentials2","parse","logger","_ConsoleLogger2","_NullLogger2","userAgent","packageDetails","_path2","join","__dirname","version","process","replace","e","console","warn","appendToUserAgent","httpClient","_HttpClient2","Object","assign","host","restHost","api","apiHost","rest","message","_Message2","voice","_Voice2","number","_Number2","verify","_Verify2","numberInsight","_NumberInsight2","applications","_App2","account","_Account2","calls","_CallsResource2","conversations","_Conversations2","users","_Users2","files","_FilesResource2","conversion","_Conversion2","media","_Media2","redact","_Redact2","channel","_Channel2","dispatch","_Dispatch2","pricing","_Pricing2","app","claims","application_id","applicationId","generateJwt","privateKey","params","generateSignature","Buffer","_fs2","existsSync","Error","readFileSync","generate","method","secret"],"sources":["/Users/vineetkhodre/react-workspace/thoughtctlchatapp/node_modules/nexmo/src/Nexmo.js"],"sourcesContent":["import fs from \"fs\";\nimport path from \"path\";\n\nimport Credentials from \"./Credentials\";\nimport JwtGenerator from \"./JwtGenerator\";\nimport HashGenerator from \"./HashGenerator\";\nimport Message from \"./Message\";\nimport Voice from \"./Voice\";\nimport Number from \"./Number\";\nimport Verify from \"./Verify\";\nimport NumberInsight from \"./NumberInsight\";\nimport App from \"./App\";\nimport Account from \"./Account\";\nimport CallsResource from \"./CallsResource\";\nimport Conversations from \"./Conversations\";\nimport Users from \"./Users\";\nimport FilesResource from \"./FilesResource\";\nimport Conversion from \"./Conversion\";\nimport Media from \"./Media\";\nimport Redact from \"./Redact\";\nimport Channel from \"./Channel\";\nimport Dispatch from \"./Dispatch\";\nimport Pricing from \"./Pricing\";\nimport HttpClient from \"./HttpClient\";\nimport NullLogger from \"./NullLogger\";\nimport ConsoleLogger from \"./ConsoleLogger\";\n\nconst jwtGeneratorInstance = new JwtGenerator();\nconst hashGeneratorInstance = new HashGenerator();\n\nclass Nexmo {\n  /**\n   * @param {Credentials} credentials - Nexmo API credentials\n   * @param {string} credentials.apiKey - the Nexmo API key\n   * @param {string} credentials.apiSecret - the Nexmo API secret\n   * @param {Object} options - Additional options\n   * @param {boolean} options.debug - `true` to turn on debug logging\n   * @param {Object} options.logger - Set a custom logger.\n   * @param {string} options.appendToUserAgent - A value to append to the user agent.\n   *                    The value will be prefixed with a `/`\n   */\n  constructor(credentials, options = { debug: false }) {\n    this.credentials = Credentials.parse(credentials);\n    this.options = options;\n\n    // If no logger has been supplied but debug has been set\n    // default to using the ConsoleLogger\n    if (!this.options.logger && this.options.debug) {\n      this.options.logger = new ConsoleLogger();\n    } else if (!this.options.logger) {\n      // Swallow the logging\n      this.options.logger = new NullLogger();\n    }\n\n    let userAgent = \"nexmo-node/UNKNOWN node/UNKNOWN\";\n    try {\n      var packageDetails = require(path.join(__dirname, \"..\", \"package.json\"));\n      userAgent = `nexmo-node/${\n        packageDetails.version\n      } node/${process.version.replace(\"v\", \"\")}`;\n    } catch (e) {\n      console.warn(\"Could not load package details\");\n    }\n    this.options.userAgent = userAgent;\n    if (this.options.appendToUserAgent) {\n      this.options.userAgent += ` ${this.options.appendToUserAgent}`;\n    }\n\n    // This is legacy, everything should use rest or api going forward\n    this.options.httpClient = new HttpClient(\n      Object.assign(\n        { host: this.options.restHost || \"rest.nexmo.com\" },\n        this.options\n      ),\n      this.credentials\n    );\n\n    // We have two different hosts, so we use two different HttpClients\n    this.options.api = new HttpClient(\n      Object.assign(\n        { host: this.options.apiHost || \"api.nexmo.com\" },\n        this.options\n      ),\n      this.credentials\n    );\n    this.options.rest = new HttpClient(\n      Object.assign(\n        { host: this.options.restHost || \"rest.nexmo.com\" },\n        this.options\n      ),\n      this.credentials\n    );\n\n    this.message = new Message(this.credentials, this.options);\n    this.voice = new Voice(this.credentials, this.options);\n    this.number = new Number(this.credentials, this.options);\n    this.verify = new Verify(this.credentials, this.options);\n    this.numberInsight = new NumberInsight(this.credentials, this.options);\n    this.applications = new App(this.credentials, this.options);\n    this.account = new Account(this.credentials, this.options);\n    this.calls = new CallsResource(this.credentials, this.options);\n    this.conversations = new Conversations(this.credentials, this.options);\n    this.users = new Users(this.credentials, this.options);\n    this.files = new FilesResource(this.credentials, this.options);\n    this.conversion = new Conversion(this.credentials, this.options);\n    this.media = new Media(this.credentials, this.options);\n    this.redact = new Redact(this.credentials, this.options);\n    this.channel = new Channel(this.credentials, this.options);\n    this.dispatch = new Dispatch(this.credentials, this.options);\n    this.pricing = new Pricing(this.credentials, this.options);\n\n    /**\n     * @deprecated Please use nexmo.applications\n     */\n    this.app = this.applications;\n  }\n\n  /**\n   * Generate a JSON Web Token (JWT).\n   *\n   * The private key used upon Nexmo instance construction will be used to sign\n   * the JWT. The application_id you used upon Nexmo instance creation will be\n   * included in the claims for the JWT, however this can be overridden by passing\n   * an application_id as part of the claims.\n   *\n   * @param {Object} claims - name/value pair claims to sign within the JWT\n   *\n   * @returns {String} the generated token\n   */\n\n  generateJwt(claims = {}) {\n    if (claims.application_id === undefined) {\n      claims.application_id = this.credentials.applicationId;\n    }\n    return Nexmo.generateJwt(this.credentials.privateKey, claims);\n  }\n\n  /**\n   * Generate a Signature Hash.\n   *\n   * @param {Object} params - params to generate hash from\n   *\n   * @returns {String} the generated token\n   */\n  generateSignature(params) {\n    return this.credentials.generateSignature(params);\n  }\n}\n\n/**\n * Generate a JSON Web Token (JWT).\n *\n * @param {String|Buffer} privateKey - the path to the private key certificate\n *          to be used when signing the claims.\n * @param {Object} claims - name/value pair claims to sign within the JWT\n *\n * @returns {String} the generated token\n */\nNexmo.generateJwt = (privateKey, claims) => {\n  if (!(privateKey instanceof Buffer)) {\n    if (!fs.existsSync(privateKey)) {\n      throw new Error(`File \"${privateKey}\" not found.`);\n    } else {\n      privateKey = fs.readFileSync(privateKey);\n    }\n  }\n  return jwtGeneratorInstance.generate(privateKey, claims);\n};\n\n/**\n * Generate a Signature Hash.\n *\n * @param {String} method - the method to be used when creating the hash\n * @param {String} secret - the secret to be used when creating the hash\n * @param {Object} params - params to generate hash from\n *\n * @returns {String} the generated token\n */\nNexmo.generateSignature = (method, secret, params) => {\n  return hashGeneratorInstance.generate(method, secret, params);\n};\n\nexport default Nexmo;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}