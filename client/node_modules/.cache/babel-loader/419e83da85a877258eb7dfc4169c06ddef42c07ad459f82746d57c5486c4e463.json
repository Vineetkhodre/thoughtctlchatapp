{"ast":null,"code":"var _jsxFileName = \"/Users/vineetkhodre/react-workspace/thoughtctlchatapp/client/src/components/Chatroom.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport Card from \"./Card\";\n\n/**\n * Chatroom Component\n * @param {Object} userLoginInfo - User login information\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Chatroom({\n  userLoginInfo\n}) {\n  _s();\n  // State to manage users, selected member, conversation data, messages, and input\n  const [users, setUsers] = useState([]);\n  const [member, setMember] = useState();\n  const [conversationData, setConversationData] = useState({});\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(null);\n\n  /**\n   * Function to create a new conversation\n   * @param {Object} val - Selected user data\n   * @param {Object} userLoginInfo - User login information\n   */\n  const createConversation = async (val, userLoginInfo) => {\n    try {\n      const conv = await userLoginInfo.sessionData.newConversation();\n      conv.on(\"text\", onMessage);\n      await conv.join();\n      setConversationData({\n        conversation: conv\n      });\n      createMember(val.id, conv.id, userLoginInfo.token);\n    } catch (err) {\n      console.error(\"Error in create Conversation:\", err);\n    }\n  };\n\n  /**\n   * Function to create a new member in the conversation\n   * @param {string} USER_ID - User ID\n   * @param {string} conversationId - Conversation ID\n   * @param {string} JWT - JSON Web Token\n   */\n  const createMember = async (userId, conversationId, JWT) => {\n    try {\n      const response = await fetch(`https://api.nexmo.com/v0.3/conversations/${conversationId}/members`, {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer ${JWT}`,\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          user_id: userId,\n          action: \"invite\",\n          channel: {\n            type: \"app\"\n          }\n        })\n      });\n      const data = await response.json();\n    } catch (error) {\n      console.error(\"Error creating member:\", error);\n    }\n  };\n\n  /**\n   * Event handler for incoming messages\n   * @param {Object} sender - Sender information\n   * @param {Object} message - Incoming message\n   */\n  const onMessage = (sender, message) => {\n    let newMessage = {\n      key: message.id,\n      sender: message._embedded.from_user.display_name,\n      text: message.body.text\n    };\n    setMessages(prevMessages => [...prevMessages, newMessage]);\n  };\n\n  /**\n   * Event handler for sending input\n   * @param {Object} evt - Event object\n   */\n  const sendInput = evt => {\n    conversationData.conversation.sendText(input).then(() => {\n      setInput(null);\n    });\n    evt.target.previousSibling.value = \"\";\n  };\n\n  /**\n   * Creates a Card component for each user\n   * @param {Object} val - User data\n   * @returns {JSX.Element} - Card component\n   */\n  const ncard = val => {\n    return /*#__PURE__*/_jsxDEV(Card, {\n      username: val.name,\n      onClick: () => {\n        setMember(val);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Effect to create a conversation when a member is selected\n  useEffect(() => {\n    if (member) createConversation(member, userLoginInfo);\n  }, [member]);\n\n  // Effect to get the list of all users when the component mounts\n  useEffect(() => {\n    getUsers();\n  }, []);\n\n  /**\n   * Function to get a list of all users from the Nexmo application\n   */\n  const getUsers = async () => {\n    try {\n      const response = await fetch(\"/getUsers\", {\n        method: \"GET\"\n      }).then(results => results.json()).then(data => {\n        setUsers(data.users._embedded.data.users);\n      });\n    } catch (error) {\n      console.error(\"Error in getUsers:\", error);\n    }\n  };\n\n  // JSX structure for the Chatroom component\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatroom\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"leftroom flexcol\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: userLoginInfo.user.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"leftcontainer flexcol\",\n        children: users.map(ncard)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"rightcontainer flexcol\",\n      children: member ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"header\",\n          children: member === null || member === void 0 ? void 0 : member.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chatcontainer flexcol\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"messagecontainer\",\n            children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"messagebox\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"sender\",\n                children: msg.sender\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 151,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"message\",\n                children: msg.text\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 152,\n                columnNumber: 21\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"inputcontainer\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"messageinput\",\n              onBlur: evt => setInput(evt.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"messagesendbutton\",\n              onClick: evt => sendInput(evt),\n              children: \"Send\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"conmessage\",\n        children: \"Please select a user to start a conversation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 5\n  }, this);\n}\n_s(Chatroom, \"5JnCS4r8H+JHqAPL3m+3KQG+PrE=\");\n_c = Chatroom;\nexport default Chatroom;\nvar _c;\n$RefreshReg$(_c, \"Chatroom\");","map":{"version":3,"names":["React","useEffect","useState","Card","jsxDEV","_jsxDEV","Fragment","_Fragment","Chatroom","userLoginInfo","_s","users","setUsers","member","setMember","conversationData","setConversationData","messages","setMessages","input","setInput","createConversation","val","conv","sessionData","newConversation","on","onMessage","join","conversation","createMember","id","token","err","console","error","userId","conversationId","JWT","response","fetch","method","headers","Authorization","body","JSON","stringify","user_id","action","channel","type","data","json","sender","message","newMessage","key","_embedded","from_user","display_name","text","prevMessages","sendInput","evt","sendText","then","target","previousSibling","value","ncard","username","name","onClick","fileName","_jsxFileName","lineNumber","columnNumber","getUsers","results","className","children","user","map","msg","index","onBlur","_c","$RefreshReg$"],"sources":["/Users/vineetkhodre/react-workspace/thoughtctlchatapp/client/src/components/Chatroom.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Card from \"./Card\";\n\n/**\n * Chatroom Component\n * @param {Object} userLoginInfo - User login information\n */\nfunction Chatroom({ userLoginInfo }) {\n  // State to manage users, selected member, conversation data, messages, and input\n  const [users, setUsers] = useState([]);\n  const [member, setMember] = useState();\n  const [conversationData, setConversationData] = useState({});\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(null);\n\n  /**\n   * Function to create a new conversation\n   * @param {Object} val - Selected user data\n   * @param {Object} userLoginInfo - User login information\n   */\n  const createConversation = async (val, userLoginInfo) => {\n    try {\n      const conv = await userLoginInfo.sessionData.newConversation();\n      conv.on(\"text\", onMessage);\n      await conv.join();\n\n      setConversationData({\n        conversation: conv,\n      });\n\n      createMember(val.id, conv.id, userLoginInfo.token);\n    } catch (err) {\n      console.error(\"Error in create Conversation:\", err);\n    }\n  };\n\n  /**\n   * Function to create a new member in the conversation\n   * @param {string} USER_ID - User ID\n   * @param {string} conversationId - Conversation ID\n   * @param {string} JWT - JSON Web Token\n   */\n  const createMember = async (userId, conversationId, JWT) => {\n    try {\n      const response = await fetch(\n        `https://api.nexmo.com/v0.3/conversations/${conversationId}/members`,\n        {\n          method: \"POST\",\n          headers: {\n            Authorization: `Bearer ${JWT}`,\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            user_id: userId,\n            action: \"invite\",\n            channel: {\n              type: \"app\",\n            },\n          }),\n        }\n      );\n      const data = await response.json();\n    } catch (error) {\n      console.error(\"Error creating member:\", error);\n    }\n  };\n\n  /**\n   * Event handler for incoming messages\n   * @param {Object} sender - Sender information\n   * @param {Object} message - Incoming message\n   */\n  const onMessage = (sender, message) => {\n    let newMessage = {\n      key: message.id,\n      sender: message._embedded.from_user.display_name,\n      text: message.body.text,\n    };\n    setMessages((prevMessages) => [...prevMessages, newMessage]);\n  };\n\n  /**\n   * Event handler for sending input\n   * @param {Object} evt - Event object\n   */\n  const sendInput = (evt) => {\n    conversationData.conversation.sendText(input).then(() => {\n      setInput(null);\n    });\n    evt.target.previousSibling.value = \"\";\n  };\n\n  /**\n   * Creates a Card component for each user\n   * @param {Object} val - User data\n   * @returns {JSX.Element} - Card component\n   */\n  const ncard = (val) => {\n    return (\n      <Card\n        username={val.name}\n        onClick={() => {\n          setMember(val);\n        }}\n      />\n    );\n  };\n\n  // Effect to create a conversation when a member is selected\n  useEffect(() => {\n    if (member) createConversation(member, userLoginInfo);\n  }, [member]);\n\n  // Effect to get the list of all users when the component mounts\n  useEffect(() => {\n    getUsers();\n  }, []);\n\n  /**\n   * Function to get a list of all users from the Nexmo application\n   */\n  const getUsers = async () => {\n    try {\n      const response = await fetch(\"/getUsers\", {\n        method: \"GET\",\n      })\n        .then((results) => results.json())\n        .then((data) => {\n          setUsers(data.users._embedded.data.users);\n        });\n    } catch (error) {\n      console.error(\"Error in getUsers:\", error);\n    }\n  };\n\n  // JSX structure for the Chatroom component\n  return (\n    <div className=\"chatroom\">\n      <div className=\"leftroom flexcol\">\n        <div className=\"header\">{userLoginInfo.user.username}</div>\n        <div className=\"leftcontainer flexcol\">{users.map(ncard)}</div>\n      </div>\n      <div className=\"rightcontainer flexcol\">\n        {member ? (\n          <>\n            <div className=\"header\">{member?.name}</div>\n            <div className=\"chatcontainer flexcol\">\n              <div className=\"messagecontainer\">\n                {messages.map((msg, index) => (\n                  <div className=\"messagebox\" key={index}>\n                    <div className=\"sender\">{msg.sender}</div>\n                    <div className=\"message\">{msg.text}</div>\n                  </div>\n                ))}\n              </div>\n              <div className=\"inputcontainer\">\n                <input\n                  className=\"messageinput\"\n                  onBlur={(evt) => setInput(evt.target.value)}\n                />\n                <button\n                  className=\"messagesendbutton\"\n                  onClick={(evt) => sendInput(evt)}\n                >\n                  Send\n                </button>\n              </div>\n            </div>\n          </>\n        ) : (\n          <div className=\"conmessage\">\n            Please select a user to start a conversation\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default Chatroom;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}