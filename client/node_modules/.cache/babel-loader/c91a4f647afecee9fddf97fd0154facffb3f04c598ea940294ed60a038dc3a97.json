{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _index = require(\"./index\");\nvar _index2 = _interopRequireDefault(_index);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nvar NumberInsight = function () {\n  /**\n   * @param {Credentials} credentials\n   *    credentials to be used when interacting with the API.\n   * @param {Object} options\n   *    Addition NumberInsight options.\n   */\n  function NumberInsight(credentials) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, NumberInsight);\n    this.creds = credentials;\n    this.options = options;\n\n    // Used to facilitate testing of the call to the underlying object\n    this._nexmo = this.options.nexmoOverride || _index2.default;\n    this._nexmo.initialize(this.creds.apiKey, this.creds.apiSecret, this.options);\n  }\n\n  /**\n   * Get insight on the provided number.\n   *\n   * @param {Object} options - The options for Number Insight\n   * @param {string} options.level - the level of insight: 'basic', 'standard'\n   *                 or 'advanced'.\n   *                 If no `level` value is provided, or an unrecognised value\n   *                 is used, 'basic' level insight will be used.\n   * @param {string} options.number - the phone number to retrieve insight on\n   * @param {string} options.country - 'basic' and 'standard' only.\n   *                 An ISO 3166 Alpha 2 country code\n   *                 https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\n   * @param {string} options. ip - 'advanced' only.\n   *                 The IP address in IPv4 notation of the endpoint the\n   *                 user connected from.\n   * @param {Array}  options.features - 'advanced' only.\n   *                 An Array detailing the information you want for this phone\n   *                 number. Possible Array elements are:\n   *                 - type: number is one of the following: mobile, landline,\n   *                          landline_premium or unknown phone number.\n   *                 - valid: number exists.\n   *                 - reachable: is number available now.\n   *                 - carrier: the MCCMNC for the carrier number is registered\n   *                             with. This is either: <ISO country code>-FIXED\n   *                             or <ISO country code>-PREMIUM.\n   *                 - ported: if the user has changed carrier for number.\n   *                 - roaming: the subscriber is outside their home network\n   *\n   * @param {string} options.callback - 'advanced' only.\n   *                 The callback to be called when the API call completes.\n   * @param {Number} options.callback_timeout - 'advanced' only.\n   *                 The maximum wait until the Number Insight Return Parameters\n   *                 are sent to callback. This is a value between 1000 - 30000ms\n   *                 inclusive. The default is 30000 ms.\n   * @param {string} options.callback_method - 'advanced' only.\n   *                 The HTTP method used to send the Number Insight Return\n   *                 Parameters to callback. Must be GET or POST. The default\n   *                 value is GET.\n   * @param {string} options.client_ref - 'advanced' only.\n   *                 A 40 character reference string returned in the Number\n   *                 Insight Return Parameters. This may be useful for your\n   *                 internal reports.\n   * @param {string} options['include-intermediate-callbacks'] - 'advanced' only.\n   *                 Tells the Nexmo platform to make callbacks as soon as an\n   *                 individual piece of information is retrieved.\n   */\n\n  _createClass(NumberInsight, [{\n    key: \"get\",\n    value: function get(options, callback) {\n      var level = options.level;\n      // remove 'level' as it's a library-only parameter\n      delete options.level;\n      if (level === \"advanced\" || level === \"advancedAsync\") {\n        if (level === \"advanced\") {\n          console.warn('DEPRECATION WARNING: Number Insight Advanced with a level of \"advanced\" will be synchronous in v2.0+. Consider using the level \"advancedAsync\" to keep using the async option.');\n        }\n        this._nexmo.numberInsightAdvancedAsync.apply(this._nexmo, arguments);\n      } else if (level === \"advancedSync\") {\n        this._nexmo.numberInsightAdvanced.apply(this._nexmo, arguments);\n      } else if (level === \"standard\") {\n        this._nexmo.numberInsightStandard.apply(this._nexmo, arguments);\n      } else {\n        this._nexmo.numberInsightBasic.apply(this._nexmo, arguments);\n      }\n    }\n  }]);\n  return NumberInsight;\n}();\nexports.default = NumberInsight;\nmodule.exports = exports[\"default\"];","map":{"version":3,"names":["_index","require","NumberInsight","credentials","options","arguments","length","undefined","_classCallCheck","creds","_nexmo","nexmoOverride","_index2","default","initialize","apiKey","apiSecret","callback","level","console","warn","numberInsightAdvancedAsync","apply","numberInsightAdvanced","numberInsightStandard","numberInsightBasic"],"sources":["/Users/vineetkhodre/react-workspace/thoughtctlchatapp/node_modules/nexmo/src/NumberInsight.js"],"sourcesContent":["\"use strict\";\n\nimport nexmo from \"./index\";\n\nclass NumberInsight {\n  /**\n   * @param {Credentials} credentials\n   *    credentials to be used when interacting with the API.\n   * @param {Object} options\n   *    Addition NumberInsight options.\n   */\n  constructor(credentials, options = {}) {\n    this.creds = credentials;\n    this.options = options;\n\n    // Used to facilitate testing of the call to the underlying object\n    this._nexmo = this.options.nexmoOverride || nexmo;\n\n    this._nexmo.initialize(\n      this.creds.apiKey,\n      this.creds.apiSecret,\n      this.options\n    );\n  }\n\n  /**\n   * Get insight on the provided number.\n   *\n   * @param {Object} options - The options for Number Insight\n   * @param {string} options.level - the level of insight: 'basic', 'standard'\n   *                 or 'advanced'.\n   *                 If no `level` value is provided, or an unrecognised value\n   *                 is used, 'basic' level insight will be used.\n   * @param {string} options.number - the phone number to retrieve insight on\n   * @param {string} options.country - 'basic' and 'standard' only.\n   *                 An ISO 3166 Alpha 2 country code\n   *                 https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\n   * @param {string} options. ip - 'advanced' only.\n   *                 The IP address in IPv4 notation of the endpoint the\n   *                 user connected from.\n   * @param {Array}  options.features - 'advanced' only.\n   *                 An Array detailing the information you want for this phone\n   *                 number. Possible Array elements are:\n   *                 - type: number is one of the following: mobile, landline,\n   *                          landline_premium or unknown phone number.\n   *                 - valid: number exists.\n   *                 - reachable: is number available now.\n   *                 - carrier: the MCCMNC for the carrier number is registered\n   *                             with. This is either: <ISO country code>-FIXED\n   *                             or <ISO country code>-PREMIUM.\n   *                 - ported: if the user has changed carrier for number.\n   *                 - roaming: the subscriber is outside their home network\n   *\n   * @param {string} options.callback - 'advanced' only.\n   *                 The callback to be called when the API call completes.\n   * @param {Number} options.callback_timeout - 'advanced' only.\n   *                 The maximum wait until the Number Insight Return Parameters\n   *                 are sent to callback. This is a value between 1000 - 30000ms\n   *                 inclusive. The default is 30000 ms.\n   * @param {string} options.callback_method - 'advanced' only.\n   *                 The HTTP method used to send the Number Insight Return\n   *                 Parameters to callback. Must be GET or POST. The default\n   *                 value is GET.\n   * @param {string} options.client_ref - 'advanced' only.\n   *                 A 40 character reference string returned in the Number\n   *                 Insight Return Parameters. This may be useful for your\n   *                 internal reports.\n   * @param {string} options['include-intermediate-callbacks'] - 'advanced' only.\n   *                 Tells the Nexmo platform to make callbacks as soon as an\n   *                 individual piece of information is retrieved.\n   */\n  get(options, callback) {\n    var level = options.level;\n    // remove 'level' as it's a library-only parameter\n    delete options.level;\n\n    if (level === \"advanced\" || level === \"advancedAsync\") {\n      if (level === \"advanced\") {\n        console.warn(\n          'DEPRECATION WARNING: Number Insight Advanced with a level of \"advanced\" will be synchronous in v2.0+. Consider using the level \"advancedAsync\" to keep using the async option.'\n        );\n      }\n      this._nexmo.numberInsightAdvancedAsync.apply(this._nexmo, arguments);\n    } else if (level === \"advancedSync\") {\n      this._nexmo.numberInsightAdvanced.apply(this._nexmo, arguments);\n    } else if (level === \"standard\") {\n      this._nexmo.numberInsightStandard.apply(this._nexmo, arguments);\n    } else {\n      this._nexmo.numberInsightBasic.apply(this._nexmo, arguments);\n    }\n  }\n}\n\nexport default NumberInsight;\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;AAEA,IAAAA,MAAA,GAAAC,OAAA;;;;;;;;;;;;IAEMC,a;EACJ;;;;;;EAMA,SAAAA,cAAYC,WAAZ,EAAuC;IAAA,IAAdC,OAAc,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAJ,EAAI;IAAAG,eAAA,OAAAN,aAAA;IACrC,KAAKO,KAAL,GAAaN,WAAb;IACA,KAAKC,OAAL,GAAeA,OAAf;;IAEA;IACA,KAAKM,MAAL,GAAc,KAAKN,OAAL,CAAaO,aAAb,IAAAC,OAAA,CAAAC,OAAd;IAEA,KAAKH,MAAL,CAAYI,UAAZ,CACE,KAAKL,KAAL,CAAWM,MADb,EAEE,KAAKN,KAAL,CAAWO,SAFb,EAGE,KAAKZ,OAHP;EAKD;;EAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wBA8CIA,O,EAASa,Q,EAAU;MACrB,IAAIC,KAAA,GAAQd,OAAA,CAAQc,KAApB;MACA;MACA,OAAOd,OAAA,CAAQc,KAAf;MAEA,IAAIA,KAAA,KAAU,UAAV,IAAwBA,KAAA,KAAU,eAAtC,EAAuD;QACrD,IAAIA,KAAA,KAAU,UAAd,EAA0B;UACxBC,OAAA,CAAQC,IAAR,CACE,gLADF;QAGD;QACD,KAAKV,MAAL,CAAYW,0BAAZ,CAAuCC,KAAvC,CAA6C,KAAKZ,MAAlD,EAA0DL,SAA1D;MACD,CAPD,MAOO,IAAIa,KAAA,KAAU,cAAd,EAA8B;QACnC,KAAKR,MAAL,CAAYa,qBAAZ,CAAkCD,KAAlC,CAAwC,KAAKZ,MAA7C,EAAqDL,SAArD;MACD,CAFM,MAEA,IAAIa,KAAA,KAAU,UAAd,EAA0B;QAC/B,KAAKR,MAAL,CAAYc,qBAAZ,CAAkCF,KAAlC,CAAwC,KAAKZ,MAA7C,EAAqDL,SAArD;MACD,CAFM,MAEA;QACL,KAAKK,MAAL,CAAYe,kBAAZ,CAA+BH,KAA/B,CAAqC,KAAKZ,MAA1C,EAAkDL,SAAlD;MACD;IACF;;;;kBAGYH,a"},"metadata":{},"sourceType":"script","externalDependencies":[]}