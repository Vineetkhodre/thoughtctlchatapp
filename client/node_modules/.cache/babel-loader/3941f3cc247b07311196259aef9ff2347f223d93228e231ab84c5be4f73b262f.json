{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\n * Nexmo Client SDK\n *  Nexmo Client - API Error wrapper\n *\n * Copyright (c) Nexmo Inc.\n*/\nconst NexmoClientErrorTypes = require('./nexmoClientErrorTypes');\nconst loglevel_1 = require(\"loglevel\");\nfunction decorateError(instance, error) {\n  if (error && error.code) {\n    error.type = error.code;\n    delete error['code'];\n  }\n  Object.assign(instance, error);\n  instance.message = 'type: ' + instance.type + ', description: ' + (instance.description ? instance.description : '');\n}\n/**\n * Error constructor of an NexmoClient-error\n * @param {string} errorInput String client error\n*/\nclass NexmoClientError {\n  constructor(errorInput) {\n    const error = NexmoClientErrorTypes[errorInput];\n    // for other errors (libs/browser APIs) re-use the Client error\n    // to forward it but don't throw it away\n    if (error) {\n      // if error type exists in our list keep consistency\n      decorateError(this, error);\n    } else {\n      // if the structure is not as expected, f/w as much as we can get\n      this.message = errorInput && errorInput.message ? errorInput.message : errorInput;\n      this.stack = errorInput.stack;\n    }\n    // log error\n    this.log = loglevel_1.getLogger(this.constructor.name);\n    this.log.error(this);\n    // make sure the error.name matches the class name\n    this.name = 'NexmoClientError';\n    if (typeof global.NXMbugsnagClient !== 'undefined') {\n      global.NXMbugsnagClient.notify(this, {\n        severity: 'info'\n      });\n    }\n  }\n}\nexports.NexmoClientError = NexmoClientError;\n/**\n * Error constructor of an API-error\n * @param {object} error API error, always containing {type: <string>}\n*/\nclass NexmoApiError {\n  constructor(errorInput) {\n    this.log = loglevel_1.getLogger(this.constructor.name);\n    if (errorInput) {\n      decorateError(this, errorInput);\n    } else {\n      // if the structure is not as expected, f/w as much as we can get\n      this.message = errorInput && errorInput.message ? errorInput.message : errorInput;\n      this.stack = errorInput && errorInput.stack ? errorInput.stack : new Error().stack;\n    }\n    this.name = 'NexmoApiError';\n    // log error\n    this.log = loglevel_1.getLogger(this.constructor.name);\n    this.log.error(this);\n    if (typeof global.NXMbugsnagClient !== 'undefined') {\n      global.NXMbugsnagClient.notify(this, {\n        severity: 'info'\n      });\n    }\n  }\n}\nexports.NexmoApiError = NexmoApiError;\nmodule.exports = {\n  NexmoClientError: NexmoClientError,\n  NexmoApiError: NexmoApiError\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","NexmoClientErrorTypes","require","loglevel_1","decorateError","instance","error","code","type","assign","message","description","NexmoClientError","constructor","errorInput","stack","log","getLogger","name","global","NXMbugsnagClient","notify","severity","NexmoApiError","Error","module"],"sources":["/Users/vineetkhodre/react-workspace/thoughtctlchatapp/client/node_modules/nexmo-client/dist/nexmoClientError.js"],"sourcesContent":["'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*\n * Nexmo Client SDK\n *  Nexmo Client - API Error wrapper\n *\n * Copyright (c) Nexmo Inc.\n*/\nconst NexmoClientErrorTypes = require('./nexmoClientErrorTypes');\nconst loglevel_1 = require(\"loglevel\");\nfunction decorateError(instance, error) {\n    if (error && error.code) {\n        error.type = error.code;\n        delete error['code'];\n    }\n    Object.assign(instance, error);\n    instance.message = 'type: ' + instance.type + ', description: ' + (instance.description ? instance.description : '');\n}\n/**\n * Error constructor of an NexmoClient-error\n * @param {string} errorInput String client error\n*/\nclass NexmoClientError {\n    constructor(errorInput) {\n        const error = NexmoClientErrorTypes[errorInput];\n        // for other errors (libs/browser APIs) re-use the Client error\n        // to forward it but don't throw it away\n        if (error) {\n            // if error type exists in our list keep consistency\n            decorateError(this, error);\n        }\n        else {\n            // if the structure is not as expected, f/w as much as we can get\n            this.message = errorInput && errorInput.message ? errorInput.message : errorInput;\n            this.stack = errorInput.stack;\n        }\n        // log error\n        this.log = loglevel_1.getLogger(this.constructor.name);\n        this.log.error(this);\n        // make sure the error.name matches the class name\n        this.name = 'NexmoClientError';\n        if (typeof global.NXMbugsnagClient !== 'undefined') {\n            global.NXMbugsnagClient.notify(this, {\n                severity: 'info'\n            });\n        }\n    }\n}\nexports.NexmoClientError = NexmoClientError;\n/**\n * Error constructor of an API-error\n * @param {object} error API error, always containing {type: <string>}\n*/\nclass NexmoApiError {\n    constructor(errorInput) {\n        this.log = loglevel_1.getLogger(this.constructor.name);\n        if (errorInput) {\n            decorateError(this, errorInput);\n        }\n        else {\n            // if the structure is not as expected, f/w as much as we can get\n            this.message = errorInput && errorInput.message ? errorInput.message : errorInput;\n            this.stack = errorInput && errorInput.stack ? errorInput.stack : new Error().stack;\n        }\n        this.name = 'NexmoApiError';\n        // log error\n        this.log = loglevel_1.getLogger(this.constructor.name);\n        this.log.error(this);\n        if (typeof global.NXMbugsnagClient !== 'undefined') {\n            global.NXMbugsnagClient.notify(this, {\n                severity: 'info'\n            });\n        }\n    }\n}\nexports.NexmoApiError = NexmoApiError;\nmodule.exports = {\n    NexmoClientError: NexmoClientError,\n    NexmoApiError: NexmoApiError\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}