{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst rtcStatsAdapterParser = require(\"rtc-stats-adapter\");\nconst calculateMos = require('rtc-stats-adapter/calculate-mos');\nconst utils_1 = __importDefault(require(\"../utils\"));\n/**\n * Collect WebRTC Report data\n * Removes credential information from the STUN.TURN server configuration.\n * performs Delta compression\n *\n * if isCallback is true the report includes a MOS score : trace('mos', mos, report);\n *\n * @param {object} context\n * @param {Application} context.application\n * @param {Conversation} context.conversation\n * @param {RTCPeerConnection} context.pc peer connection object\n * @param {string} context.rtc_id id of a leg\n * @param {RTCStatsConfig} context.config config settings for ananlytics\n * @property {MosReport} mos_report the final mos report to be sent when the stream is closed\n * @property {number} _reportsCount the number of reports taken for mos average\n * @property {number} _mosSum the summary of mos scores\n * @private\n */\nclass RTCStatsAnalytics {\n  constructor(context) {\n    this.mos_report = {\n      min: 5,\n      max: 0\n    };\n    this._reportsCount = 0;\n    this._mosSum = 0;\n    this.intervals = [];\n    this._deprecationWarningSent = false;\n    if (!context || !context.application || !context.rtc_id || !context.pc) {\n      return;\n    }\n    this.conversation = null;\n    this.application_id = null;\n    this.attachHandlers(context);\n    this.startSendingStats(context);\n    this.startEmittingStats(context);\n  }\n  attachHandlers(context) {\n    const {\n      pc\n    } = context;\n    const onConnectionStateChange = pc.onconnectionstatechange ? pc.onconnectionstatechange : () => {};\n    pc.onconnectionstatechange = event => {\n      onConnectionStateChange.call(pc, event);\n      switch (pc.connectionState) {\n        case \"disconnected\":\n        case \"failed\":\n        case \"closed\":\n          this.removeIntervals();\n          this.emitLastReport(context);\n      }\n    };\n    if (!context.conversation) {\n      const application = context.application;\n      application.on(\"member:joined\", (member, event) => {\n        var _a;\n        if ((!this.conversation || !this.application_id) && ((_a = context) === null || _a === void 0 ? void 0 : _a.rtc_id) === event.body.channel.id) {\n          this.conversation = member.conversation;\n          this.application_id = event.application_id;\n        }\n      });\n    } else {\n      const conversation = context.conversation;\n      conversation.on(\"member:media\", (member, event) => {\n        var _a;\n        if (!this.application_id && ((_a = context) === null || _a === void 0 ? void 0 : _a.rtc_id) === event.body.channel.id) {\n          this.application_id = event.application_id;\n        }\n      });\n    }\n  }\n  emitLastReport(context) {\n    const {\n      application,\n      conversation = null,\n      rtc_id,\n      config: {\n        emit_events,\n        emit_rtc_analytics\n      }\n    } = context;\n    const mos_report = this.getMOSReport();\n    const mos = mos_report.last;\n    if (mos) {\n      if (emit_rtc_analytics) {\n        application.emit(\"rtcstats:analytics\", {\n          type: \"mos_report\",\n          mos,\n          rtc_id,\n          mos_report,\n          api_key: application.session.apiKey,\n          ...(this.application_id && {\n            application_id: this.application_id\n          }),\n          ...(conversation && {\n            conversation_id: conversation.id,\n            conversation_name: conversation.name\n          })\n        });\n      }\n      if (emit_events) {\n        if (!this._deprecationWarningSent) {\n          this._deprecationWarningSent = true;\n          console.warn('\"rtcstats:report\" event is deprecated. Use \"rtcstats:analytics\" instead');\n        }\n        /**\n         * @deprecated Use \"rtcstats:analytics instead\"\n         */\n        application.emit(\"rtcstats:report\", mos, null, conversation, mos_report);\n      }\n    }\n  }\n  startSendingStats(context) {\n    const {\n      application,\n      conversation = null,\n      pc,\n      rtc_id,\n      config: {\n        remote_collection,\n        remote_collection_url,\n        remote_collection_interval\n      }\n    } = context;\n    if (!remote_collection) return;\n    const remote_collection_interval_id = setInterval(() => {\n      pc.getStats(null).then(report => {\n        var _a;\n        const conv = (_a = conversation !== null && conversation !== void 0 ? conversation : this.conversation, _a !== null && _a !== void 0 ? _a : null);\n        utils_1.default.networkRequest({\n          url: remote_collection_url,\n          type: \"POST\",\n          data: {\n            ...rtcStatsAdapterParser(report),\n            legId: rtc_id,\n            apiKey: application.session.apiKey,\n            ...(this.application_id && {\n              applicationId: this.application_id\n            }),\n            ...(conv && {\n              conversationId: conv.id,\n              conversationName: conv.name\n            })\n          }\n        }).catch(() => {});\n      }).catch(() => {});\n      if (pc.connectionState === \"closed\" || pc.signalingState === 'closed') {\n        this.removeIntervals();\n      }\n    }, remote_collection_interval);\n    this.intervals.push(remote_collection_interval_id);\n  }\n  startEmittingStats(context) {\n    const {\n      application,\n      conversation = null,\n      pc,\n      rtc_id,\n      config: {\n        emit_events,\n        emit_rtc_analytics,\n        emit_interval\n      }\n    } = context;\n    if (!emit_events && !emit_rtc_analytics) return;\n    const emit_stats_interval_id = setInterval(() => {\n      var _a;\n      pc.getStats(null).then(stats => {\n        var _a;\n        const mos = this.getMos(stats);\n        if (!mos) return;\n        const conv = (_a = conversation !== null && conversation !== void 0 ? conversation : this.conversation, _a !== null && _a !== void 0 ? _a : null);\n        if (emit_rtc_analytics) {\n          application.emit(\"rtcstats:analytics\", {\n            type: \"mos\",\n            mos,\n            report: stats,\n            rtc_id,\n            api_key: application.session.apiKey,\n            ...(this.application_id && {\n              application_id: this.application_id\n            }),\n            ...(conv && {\n              conversation_id: conv.id,\n              conversation_name: conv.name\n            })\n          });\n        }\n        if (emit_events) {\n          if (!this._deprecationWarningSent) {\n            this._deprecationWarningSent = true;\n            console.warn('\"rtcstats:report\" event is deprecated. Use \"rtcstats:analytics\" instead');\n          }\n          /**\n           * @deprecated Use \"rtcstats:analytics instead\"\n           */\n          application.emit(\"rtcstats:report\", mos, stats, conversation);\n        }\n      }).catch(() => {});\n      if (pc.connectionState === \"closed\" || pc.signalingState === 'closed') {\n        this.removeIntervals();\n        this.emitLastReport({\n          ...context,\n          conversation: (_a = conversation !== null && conversation !== void 0 ? conversation : this.conversation, _a !== null && _a !== void 0 ? _a : null)\n        });\n      }\n    }, emit_interval);\n    this.intervals.push(emit_stats_interval_id);\n  }\n  removeIntervals() {\n    this.intervals.forEach(interval => clearInterval(interval));\n    this.intervals = [];\n  }\n  getMos(stats) {\n    const mos = calculateMos(stats);\n    this.updateMOSReport(parseInt(mos));\n    return mos;\n  }\n  /**\n   * Update the mos_report object\n   * @param {number} mos the MOS score\n   * @returns {object} the report object\n   */\n  updateMOSReport(mos) {\n    this._reportsCount++;\n    this._mosSum += mos;\n    this.mos_report.last = mos;\n    this.mos_report.min = mos < this.mos_report.min ? mos : this.mos_report.min;\n    this.mos_report.max = mos > this.mos_report.max ? mos : this.mos_report.max;\n    this.mos_report.average = this._mosSum / this._reportsCount;\n  }\n  /**\n   * Update the MOS report object\n   * mos_report.min - the minimum MOS value during the stream\n   * mos_report.max - the maximum MOS value during the stream\n   * mos_report.last - the last MOS value during the stream\n   * mos_report.average - the average MOS value during the stream\n   * @returns {MosReport} mos_report - a report for the MOS values\n   *\n   */\n  getMOSReport() {\n    this.mos_report.min = RTCStatsAnalytics.normaliseFloat(this.mos_report.min);\n    this.mos_report.max = RTCStatsAnalytics.normaliseFloat(this.mos_report.max);\n    this.mos_report.last = RTCStatsAnalytics.normaliseFloat(this.mos_report.last);\n    this.mos_report.average = RTCStatsAnalytics.normaliseFloat(this.mos_report.average);\n    return this.mos_report;\n  }\n  static normaliseFloat(value) {\n    return parseFloat(value).toFixed(6);\n  }\n}\nexports.default = RTCStatsAnalytics;\nmodule.exports = RTCStatsAnalytics;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","rtcStatsAdapterParser","require","calculateMos","utils_1","RTCStatsAnalytics","constructor","context","mos_report","min","max","_reportsCount","_mosSum","intervals","_deprecationWarningSent","application","rtc_id","pc","conversation","application_id","attachHandlers","startSendingStats","startEmittingStats","onConnectionStateChange","onconnectionstatechange","event","call","connectionState","removeIntervals","emitLastReport","on","member","_a","body","channel","id","config","emit_events","emit_rtc_analytics","getMOSReport","mos","last","emit","type","api_key","session","apiKey","conversation_id","conversation_name","name","console","warn","remote_collection","remote_collection_url","remote_collection_interval","remote_collection_interval_id","setInterval","getStats","then","report","conv","default","networkRequest","url","data","legId","applicationId","conversationId","conversationName","catch","signalingState","push","emit_interval","emit_stats_interval_id","stats","getMos","forEach","interval","clearInterval","updateMOSReport","parseInt","average","normaliseFloat","parseFloat","toFixed","module"],"sources":["/Users/vineetkhodre/react-workspace/thoughtctlchatapp/client/node_modules/nexmo-client/dist/modules/rtcstats_analytics.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst rtcStatsAdapterParser = require(\"rtc-stats-adapter\");\nconst calculateMos = require('rtc-stats-adapter/calculate-mos');\nconst utils_1 = __importDefault(require(\"../utils\"));\n/**\n * Collect WebRTC Report data\n * Removes credential information from the STUN.TURN server configuration.\n * performs Delta compression\n *\n * if isCallback is true the report includes a MOS score : trace('mos', mos, report);\n *\n * @param {object} context\n * @param {Application} context.application\n * @param {Conversation} context.conversation\n * @param {RTCPeerConnection} context.pc peer connection object\n * @param {string} context.rtc_id id of a leg\n * @param {RTCStatsConfig} context.config config settings for ananlytics\n * @property {MosReport} mos_report the final mos report to be sent when the stream is closed\n * @property {number} _reportsCount the number of reports taken for mos average\n * @property {number} _mosSum the summary of mos scores\n * @private\n */\nclass RTCStatsAnalytics {\n    constructor(context) {\n        this.mos_report = { min: 5, max: 0 };\n        this._reportsCount = 0;\n        this._mosSum = 0;\n        this.intervals = [];\n        this._deprecationWarningSent = false;\n        if (!context || !context.application || !context.rtc_id || !context.pc) {\n            return;\n        }\n        this.conversation = null;\n        this.application_id = null;\n        this.attachHandlers(context);\n        this.startSendingStats(context);\n        this.startEmittingStats(context);\n    }\n    attachHandlers(context) {\n        const { pc } = context;\n        const onConnectionStateChange = pc.onconnectionstatechange\n            ? pc.onconnectionstatechange\n            : () => { };\n        pc.onconnectionstatechange = (event) => {\n            onConnectionStateChange.call(pc, event);\n            switch (pc.connectionState) {\n                case \"disconnected\":\n                case \"failed\":\n                case \"closed\":\n                    this.removeIntervals();\n                    this.emitLastReport(context);\n            }\n        };\n        if (!context.conversation) {\n            const application = context.application;\n            application.on(\"member:joined\", (member, event) => {\n                var _a;\n                if ((!this.conversation || !this.application_id) && ((_a = context) === null || _a === void 0 ? void 0 : _a.rtc_id) === event.body.channel.id) {\n                    this.conversation = member.conversation;\n                    this.application_id = event.application_id;\n                }\n            });\n        }\n        else {\n            const conversation = context.conversation;\n            conversation.on(\"member:media\", (member, event) => {\n                var _a;\n                if (!this.application_id && ((_a = context) === null || _a === void 0 ? void 0 : _a.rtc_id) === event.body.channel.id) {\n                    this.application_id = event.application_id;\n                }\n            });\n        }\n    }\n    emitLastReport(context) {\n        const { application, conversation = null, rtc_id, config: { emit_events, emit_rtc_analytics }, } = context;\n        const mos_report = this.getMOSReport();\n        const mos = mos_report.last;\n        if (mos) {\n            if (emit_rtc_analytics) {\n                application.emit(\"rtcstats:analytics\", {\n                    type: \"mos_report\",\n                    mos,\n                    rtc_id,\n                    mos_report,\n                    api_key: application.session.apiKey,\n                    ...(this.application_id && { application_id: this.application_id }),\n                    ...(conversation && {\n                        conversation_id: conversation.id,\n                        conversation_name: conversation.name\n                    })\n                });\n            }\n            if (emit_events) {\n                if (!this._deprecationWarningSent) {\n                    this._deprecationWarningSent = true;\n                    console.warn('\"rtcstats:report\" event is deprecated. Use \"rtcstats:analytics\" instead');\n                }\n                /**\n                 * @deprecated Use \"rtcstats:analytics instead\"\n                 */\n                application.emit(\"rtcstats:report\", mos, null, conversation, mos_report);\n            }\n        }\n    }\n    startSendingStats(context) {\n        const { application, conversation = null, pc, rtc_id, config: { remote_collection, remote_collection_url, remote_collection_interval, }, } = context;\n        if (!remote_collection)\n            return;\n        const remote_collection_interval_id = setInterval(() => {\n            pc.getStats(null).then((report) => {\n                var _a;\n                const conv = (_a = (conversation !== null && conversation !== void 0 ? conversation : this.conversation), (_a !== null && _a !== void 0 ? _a : null));\n                utils_1.default.networkRequest({\n                    url: remote_collection_url,\n                    type: \"POST\",\n                    data: {\n                        ...rtcStatsAdapterParser(report),\n                        legId: rtc_id,\n                        apiKey: application.session.apiKey,\n                        ...(this.application_id && { applicationId: this.application_id }),\n                        ...(conv && {\n                            conversationId: conv.id,\n                            conversationName: conv.name\n                        })\n                    }\n                }).catch(() => { });\n            }).catch(() => { });\n            if (pc.connectionState === \"closed\" || pc.signalingState === 'closed') {\n                this.removeIntervals();\n            }\n        }, remote_collection_interval);\n        this.intervals.push(remote_collection_interval_id);\n    }\n    startEmittingStats(context) {\n        const { application, conversation = null, pc, rtc_id, config: { emit_events, emit_rtc_analytics, emit_interval }, } = context;\n        if (!emit_events && !emit_rtc_analytics)\n            return;\n        const emit_stats_interval_id = setInterval(() => {\n            var _a;\n            pc.getStats(null).then((stats) => {\n                var _a;\n                const mos = this.getMos(stats);\n                if (!mos)\n                    return;\n                const conv = (_a = (conversation !== null && conversation !== void 0 ? conversation : this.conversation), (_a !== null && _a !== void 0 ? _a : null));\n                if (emit_rtc_analytics) {\n                    application.emit(\"rtcstats:analytics\", {\n                        type: \"mos\",\n                        mos,\n                        report: stats,\n                        rtc_id,\n                        api_key: application.session.apiKey,\n                        ...(this.application_id && { application_id: this.application_id }),\n                        ...(conv && {\n                            conversation_id: conv.id,\n                            conversation_name: conv.name\n                        })\n                    });\n                }\n                if (emit_events) {\n                    if (!this._deprecationWarningSent) {\n                        this._deprecationWarningSent = true;\n                        console.warn('\"rtcstats:report\" event is deprecated. Use \"rtcstats:analytics\" instead');\n                    }\n                    /**\n                     * @deprecated Use \"rtcstats:analytics instead\"\n                     */\n                    application.emit(\"rtcstats:report\", mos, stats, conversation);\n                }\n            }).catch(() => { });\n            if (pc.connectionState === \"closed\" || pc.signalingState === 'closed') {\n                this.removeIntervals();\n                this.emitLastReport({\n                    ...context,\n                    conversation: (_a = (conversation !== null && conversation !== void 0 ? conversation : this.conversation), (_a !== null && _a !== void 0 ? _a : null))\n                });\n            }\n        }, emit_interval);\n        this.intervals.push(emit_stats_interval_id);\n    }\n    removeIntervals() {\n        this.intervals.forEach((interval) => clearInterval(interval));\n        this.intervals = [];\n    }\n    getMos(stats) {\n        const mos = calculateMos(stats);\n        this.updateMOSReport(parseInt(mos));\n        return mos;\n    }\n    /**\n     * Update the mos_report object\n     * @param {number} mos the MOS score\n     * @returns {object} the report object\n     */\n    updateMOSReport(mos) {\n        this._reportsCount++;\n        this._mosSum += mos;\n        this.mos_report.last = mos;\n        this.mos_report.min = mos < this.mos_report.min ? mos : this.mos_report.min;\n        this.mos_report.max = mos > this.mos_report.max ? mos : this.mos_report.max;\n        this.mos_report.average = this._mosSum / this._reportsCount;\n    }\n    /**\n     * Update the MOS report object\n     * mos_report.min - the minimum MOS value during the stream\n     * mos_report.max - the maximum MOS value during the stream\n     * mos_report.last - the last MOS value during the stream\n     * mos_report.average - the average MOS value during the stream\n     * @returns {MosReport} mos_report - a report for the MOS values\n     *\n     */\n    getMOSReport() {\n        this.mos_report.min = RTCStatsAnalytics.normaliseFloat(this.mos_report.min);\n        this.mos_report.max = RTCStatsAnalytics.normaliseFloat(this.mos_report.max);\n        this.mos_report.last = RTCStatsAnalytics.normaliseFloat(this.mos_report.last);\n        this.mos_report.average = RTCStatsAnalytics.normaliseFloat(this.mos_report.average);\n        return this.mos_report;\n    }\n    static normaliseFloat(value) {\n        return parseFloat(value).toFixed(6);\n    }\n}\nexports.default = RTCStatsAnalytics;\nmodule.exports = RTCStatsAnalytics;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}