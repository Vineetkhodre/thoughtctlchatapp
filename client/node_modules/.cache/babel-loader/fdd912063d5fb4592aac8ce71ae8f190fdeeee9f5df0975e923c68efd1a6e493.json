{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nvar fs = require(\"fs\");\nvar FilesResource = function () {\n  _createClass(FilesResource, null, [{\n    key: \"PATH\",\n    /**\n     * The path to the `calls` resource.\n     */\n    get: function get() {\n      return \"/v1/files\";\n    }\n\n    /**\n     * Creates a new FilesResource.\n     *\n     * @param {Credentials} creds - Credentials used when interacting with the Nexmo API.\n     * @param {Object} options - additional options for the class.\n     */\n  }]);\n  function FilesResource(creds, options) {\n    _classCallCheck(this, FilesResource);\n    this.creds = creds;\n    this.options = options;\n  }\n\n  /**\n   * Get stream for a remote File\n   *\n   * @param {string} [fileIdOrUrl] - The unique identifier or URL for the file\n   * @param {function} callback - function to be called when the request completes.\n   */\n\n  _createClass(FilesResource, [{\n    key: \"get\",\n    value: function get(fileIdOrUrl, callback) {\n      if (!fileIdOrUrl) {\n        throw new Error('\"fileIdOrUrl\" is a required parameter');\n      }\n      fileIdOrUrl = fileIdOrUrl.split(\"/\").pop(-1);\n      var config = {\n        host: this.options.apiHost || \"api.nexmo.com\",\n        path: FilesResource.PATH + \"/\" + fileIdOrUrl,\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/octet-stream\",\n          Authorization: \"Bearer \" + this.creds.generateJwt()\n        }\n      };\n      this.options.httpClient.request(config, callback);\n    }\n\n    /**\n     * Save remote File locally\n     *\n     * @param {string} [fileIdOrUrl] - The unique identifier or URL for the file\n     * @param {string} [file] - Filename or file descriptor\n     * @param {function} callback - function to be called when the request completes.\n     */\n  }, {\n    key: \"save\",\n    value: function save(fileIdOrUrl, file, callback) {\n      var _this = this;\n      this.get(fileIdOrUrl, function (error, data) {\n        if (error) {\n          callback(error, null);\n        } else {\n          _this.__storeFile(data, file, callback);\n        }\n      });\n    }\n  }, {\n    key: \"__storeFile\",\n    value: function __storeFile(data, file, callback) {\n      fs.writeFile(file, data, function (error) {\n        if (error) {\n          callback(error, null);\n        } else {\n          callback(null, file);\n        }\n      });\n    }\n  }]);\n  return FilesResource;\n}();\nexports.default = FilesResource;\nmodule.exports = exports[\"default\"];","map":{"version":3,"names":["fs","require","FilesResource","creds","options","_classCallCheck","fileIdOrUrl","callback","Error","split","pop","config","host","apiHost","path","PATH","method","headers","Authorization","generateJwt","httpClient","request","file","_this","get","error","data","__storeFile","writeFile"],"sources":["/Users/vineetkhodre/react-workspace/thoughtctlchatapp/node_modules/nexmo/src/FilesResource.js"],"sourcesContent":["\"use strict\";\n\nvar fs = require(\"fs\");\n\nclass FilesResource {\n  /**\n   * The path to the `calls` resource.\n   */\n  static get PATH() {\n    return \"/v1/files\";\n  }\n\n  /**\n   * Creates a new FilesResource.\n   *\n   * @param {Credentials} creds - Credentials used when interacting with the Nexmo API.\n   * @param {Object} options - additional options for the class.\n   */\n  constructor(creds, options) {\n    this.creds = creds;\n    this.options = options;\n  }\n\n  /**\n   * Get stream for a remote File\n   *\n   * @param {string} [fileIdOrUrl] - The unique identifier or URL for the file\n   * @param {function} callback - function to be called when the request completes.\n   */\n  get(fileIdOrUrl, callback) {\n    if (!fileIdOrUrl) {\n      throw new Error('\"fileIdOrUrl\" is a required parameter');\n    }\n\n    fileIdOrUrl = fileIdOrUrl.split(\"/\").pop(-1);\n\n    var config = {\n      host: this.options.apiHost || \"api.nexmo.com\",\n      path: `${FilesResource.PATH}/${fileIdOrUrl}`,\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/octet-stream\",\n        Authorization: `Bearer ${this.creds.generateJwt()}`\n      }\n    };\n\n    this.options.httpClient.request(config, callback);\n  }\n\n  /**\n   * Save remote File locally\n   *\n   * @param {string} [fileIdOrUrl] - The unique identifier or URL for the file\n   * @param {string} [file] - Filename or file descriptor\n   * @param {function} callback - function to be called when the request completes.\n   */\n  save(fileIdOrUrl, file, callback) {\n    this.get(fileIdOrUrl, (error, data) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        this.__storeFile(data, file, callback);\n      }\n    });\n  }\n\n  __storeFile(data, file, callback) {\n    fs.writeFile(file, data, error => {\n      if (error) {\n        callback(error, null);\n      } else {\n        callback(null, file);\n      }\n    });\n  }\n}\n\nexport default FilesResource;\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAIA,EAAA,GAAKC,OAAA,CAAQ,IAAR,CAAT;IAEMC,a;;;IACJ;;;wBAGkB;MAChB,OAAO,WAAP;IACD;;IAED;;;;;;;EAMA,SAAAA,cAAYC,KAAZ,EAAmBC,OAAnB,EAA4B;IAAAC,eAAA,OAAAH,aAAA;IAC1B,KAAKC,KAAL,GAAaA,KAAb;IACA,KAAKC,OAAL,GAAeA,OAAf;EACD;;EAED;;;;;;;;;wBAMIE,W,EAAaC,Q,EAAU;MACzB,IAAI,CAACD,WAAL,EAAkB;QAChB,MAAM,IAAIE,KAAJ,CAAU,uCAAV,CAAN;MACD;MAEDF,WAAA,GAAcA,WAAA,CAAYG,KAAZ,CAAkB,GAAlB,EAAuBC,GAAvB,CAA2B,CAAC,CAA5B,CAAd;MAEA,IAAIC,MAAA,GAAS;QACXC,IAAA,EAAM,KAAKR,OAAL,CAAaS,OAAb,IAAwB,eADnB;QAEXC,IAAA,EAASZ,aAAA,CAAca,IAAvB,SAA+BT,WAFpB;QAGXU,MAAA,EAAQ,KAHG;QAIXC,OAAA,EAAS;UACP,gBAAgB,0BADT;UAEPC,aAAA,cAAyB,KAAKf,KAAL,CAAWgB,WAAX;QAFlB;MAJE,CAAb;MAUA,KAAKf,OAAL,CAAagB,UAAb,CAAwBC,OAAxB,CAAgCV,MAAhC,EAAwCJ,QAAxC;IACD;;IAED;;;;;;;;;yBAOKD,W,EAAagB,I,EAAMf,Q,EAAU;MAAA,IAAAgB,KAAA;MAChC,KAAKC,GAAL,CAASlB,WAAT,EAAsB,UAACmB,KAAD,EAAQC,IAAR,EAAiB;QACrC,IAAID,KAAJ,EAAW;UACTlB,QAAA,CAASkB,KAAT,EAAgB,IAAhB;QACD,CAFD,MAEO;UACLF,KAAA,CAAKI,WAAL,CAAiBD,IAAjB,EAAuBJ,IAAvB,EAA6Bf,QAA7B;QACD;MACF,CAND;IAOD;;;gCAEWmB,I,EAAMJ,I,EAAMf,Q,EAAU;MAChCP,EAAA,CAAG4B,SAAH,CAAaN,IAAb,EAAmBI,IAAnB,EAAyB,UAAAD,KAAA,EAAS;QAChC,IAAIA,KAAJ,EAAW;UACTlB,QAAA,CAASkB,KAAT,EAAgB,IAAhB;QACD,CAFD,MAEO;UACLlB,QAAA,CAAS,IAAT,EAAee,IAAf;QACD;MACF,CAND;IAOD;;;;kBAGYpB,a"},"metadata":{},"sourceType":"script","externalDependencies":[]}