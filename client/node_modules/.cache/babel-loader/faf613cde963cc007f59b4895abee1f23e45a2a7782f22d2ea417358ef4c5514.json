{"ast":null,"code":"'use strict';\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\n * Nexmo Client SDK\n *  Member Object Model\n *\n * Copyright (c) Nexmo Inc.\n*/\nconst WildEmitter = require('wildemitter');\nconst nexmoClientError_1 = require(\"./nexmoClientError\");\nconst nxmEvent_1 = __importDefault(require(\"./events/nxmEvent\"));\nconst utils_1 = __importDefault(require(\"./utils\"));\n/**\n * An individual user (i.e. conversation member).\n * @class Member\n * @param {Conversation} conversation\n * @param {object} params\n*/\nclass Member {\n  constructor(conversation, params) {\n    this.conversation = conversation;\n    this.callStatus = null;\n    this._normalise(params);\n    WildEmitter.mixin(Member);\n  }\n  /**\n   * Update object instance and align attribute names\n   *\n   * Handle params input to keep consistent the member object\n   * @param {object} params member attributes\n   * @private\n  */\n  _normalise(params) {\n    if (params) {\n      this.user = this.user || {};\n      this.channel = params.channel || {\n        type: 'app'\n      };\n      let key;\n      for (key in params) {\n        switch (key) {\n          case 'member_id':\n            this.id = params.member_id;\n            break;\n          case 'timestamp':\n            this.timestamp = params.timestamp;\n            break;\n          case 'state':\n            this.state = params.state;\n            break;\n          case 'from':\n            this.id = params.from; // special case for member events\n            break;\n          case 'user_id':\n            this.user.id = params.user_id;\n            break;\n          case 'name':\n            this.user.name = params.name;\n            break;\n          case 'user':\n            this.user = {\n              name: params.user.name,\n              id: params.user.user_id || params.user.id\n            };\n            this.display_name = this.display_name || params.user.display_name;\n            break;\n          case 'invited_by':\n            this.invited_by = params.invited_by;\n            break;\n          case 'display_name':\n            this.display_name = this.display_name || params.display_name;\n            break;\n          case '_embedded':\n            if (params._embedded.user) {\n              this.user = {\n                id: params._embedded.user.id || this.user.id,\n                name: params._embedded.user.name || this.user.name\n              };\n              this.display_name = this.display_name || params._embedded.user.display_name;\n            }\n          case 'conversation':\n            break;\n          default:\n            if (!params.type) {\n              this[key] = params[key];\n            }\n        }\n      }\n      // join conversation returns our member with only id,\n      // compare it for now and use the username we have in the application object\n      if (this.conversation.application.me && params.user_id === this.conversation.application.me.id) {\n        this.user.name = this.conversation.application.me.name;\n      }\n      // make sure we don't keep a member.user_id, name in any flow\n      delete this.user_id;\n      delete this.name;\n      delete this.user.user_id;\n    }\n  }\n  /**\n   * Play the given stream only to this member within the conversation\n   *\n   * @param {string} [params]\n   *\n   * @returns {Promise<NXMEvent>}\n   * @private\n  */\n  async playStream(params) {\n    try {\n      const response = await this.conversation.application.session.sendNetworkRequest({\n        type: 'POST',\n        path: `conversations/${this.id}/events`,\n        data: {\n          type: 'audio:play',\n          to: this.id,\n          body: params\n        }\n      });\n      return new nxmEvent_1.default(this.conversation, response);\n    } catch (error) {\n      throw new nexmoClientError_1.NexmoApiError(error);\n    }\n  }\n  /**\n   * Speak the given text only to this member within the Conversation.\n   *\n   * @param {string} [params]\n   *\n   * @returns {Promise<NXMEvent>}\n   * @private\n  */\n  async sayText(params) {\n    try {\n      const response = await this.conversation.application.session.sendNetworkRequest({\n        type: 'POST',\n        path: `conversations/${this.id}/events`,\n        data: {\n          type: 'audio:say',\n          cid: this.id,\n          from: this.conversation.me.id,\n          to: this.id,\n          body: {\n            text: params.text,\n            voice_name: params.voice_name || 'Amy',\n            level: params.level || 1,\n            queue: params.queue || true,\n            loop: params.loop || 1,\n            ssml: params.ssml || false\n          }\n        }\n      });\n      return new nxmEvent_1.default(this.conversation, response);\n    } catch (error) {\n      throw new nexmoClientError_1.NexmoApiError(error);\n    }\n  }\n  /**\n   * Kick a Member from the Conversation.\n   *\n   * @param {object} [reason] the reason for kicking out a member\n   * @param {string} [reason.reason_code] the code of the reason\n   * @param {string} [reason.reason_text] the description of the reason\n   * @example <caption>Remove a member from the Conversation.</caption>\n   * // Remove a member\n   * member.kick({reason_code: \"Reason Code\", reason_text: \"Reason Text\"})\n   * .then(() => {\n   *     console.log(\"Successfully removed member.\");\n   * }).catch((error) => {\n   *     console.error(\"Error removing member: \", error);\n   * });\n   *\n   * // Remove yourself\n   * conversation.me.kick({reason_code: \"Reason Code\", reason_text: \"Reason Text\"})\n   * .then(() => {\n   *     console.log(\"Successfully removed yourself.\");\n   * }).catch((error) => {\n   *     console.error(\"Error removing yourself: \", error);\n   * });\n   *\n   * @returns {Promise}\n  */\n  async kick(reason) {\n    var _a, _b, _c;\n    let path = `conversations/${this.conversation.id}/members/${this.id}`;\n    let params = new URLSearchParams();\n    // add member_id of from\n    if ((_c = (_b = (_a = this) === null || _a === void 0 ? void 0 : _a.conversation) === null || _b === void 0 ? void 0 : _b.me) === null || _c === void 0 ? void 0 : _c.id) {\n      params.append('from', this.conversation.me.id);\n    }\n    if (reason) {\n      Object.keys(reason).forEach(key => {\n        params.append(key, reason[key]);\n      });\n    }\n    path += `?${params.toString()}`;\n    try {\n      return await this.conversation.application.session.sendNetworkRequest({\n        type: 'DELETE',\n        path\n      });\n    } catch (error) {\n      throw new nexmoClientError_1.NexmoApiError(error);\n    }\n  }\n  /**\n   * Mute your stream.\n   *\n   * @param {boolean} [mute] true for mute, false for unmute\n   * @param {number} [streamIndex] stream index of the stream\n   * @example <caption>Mute audio stream of your Member.</caption>\n   * // Mute yourself\n   * conversation.me.mute(true);\n   *\n   * // Unmute yourself\n   * conversation.me.mute(false);\n   *\n   * @returns {Promise}\n  */\n  mute(mute, streamIndex = null) {\n    return this.conversation.media.mute(mute, streamIndex);\n  }\n  /**\n   * Earmuff yourself in the Conversation.\n   *\n   * @param {boolean} earmuff true or false\n   * @example <caption>Disables your Member from hearing other Members in the Conversation.</caption>\n   * // Earmuff yourself\n   * conversation.me.earmuff(true);\n   *\n   * // Unearmuff yourself\n   * conversation.me.earmuff(false);\n   *\n   * @returns {Promise}\n   *\n  */\n  earmuff(earmuff) {\n    return this.conversation.media.earmuff(earmuff);\n  }\n  /**\n   * Handle member object events\n   *\n   * Handle events that are modifying this member instance\n   * @param {NXMEvent} event invited, joined, left, media events\n   * @private\n  */\n  _handleEvent(event) {\n    switch (event.type) {\n      case 'member:invited':\n        this._normalise(event.body); // take care of misaligned objects.\n        this.state = 'INVITED';\n        this.timestamp.invited = event.body.timestamp.invited;\n        if (!event.body.invited_by && event.body.user.media && event.body.user.media.audio_settings && event.body.user.media.audio_settings.enabled) {\n          this._setCallStatusAndEmit('started');\n        }\n        break;\n      case 'member:joined':\n        this._normalise(event.body); // take care of misaligned objects.\n        this.state = 'JOINED';\n        this.timestamp.joined = event.body.timestamp.joined;\n        if (event.body.channel && event.body.channel.knocking_id) {\n          this._setCallStatusAndEmit('started');\n        }\n        break;\n      case 'member:left':\n        this._normalise(event.body); // take care of misaligned objects.\n        this.state = 'LEFT';\n        this.timestamp.left = event.body.timestamp.left;\n        if (event.body.reason && event.body.reason.text) {\n          this._setCallStatusAndEmit(event.body.reason.text);\n        }\n        break;\n      case 'member:media':\n        this.media = event.body.media;\n        break;\n      case 'leg:status:update':\n        this.channel.legs = utils_1.default.updateMemberLegs(this.channel.legs, event);\n        this._setCallStatusAndEmit(event.body.status);\n        break;\n      case 'audio:ringing:start':\n        if (!this.callStatus || this.callStatus === 'started') {\n          this._setCallStatusAndEmit('ringing');\n        }\n        break;\n      default:\n        break;\n    }\n  }\n  /**\n     * Set the member.callStatus and emit a member:call:status event\n     *\n     * @param {Member.callStatus} this.callStatus the call status to set\n     * @private\n    */\n  _setCallStatusAndEmit(callStatus) {\n    if (this.callStatus !== String(callStatus)) {\n      this.callStatus = callStatus;\n      this.conversation.emit('member:call:status', this);\n    }\n  }\n}\nexports.default = Member;\nmodule.exports = Member;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","WildEmitter","require","nexmoClientError_1","nxmEvent_1","utils_1","Member","constructor","conversation","params","callStatus","_normalise","mixin","user","channel","type","key","id","member_id","timestamp","state","from","user_id","name","display_name","invited_by","_embedded","application","me","playStream","response","session","sendNetworkRequest","path","data","to","body","default","error","NexmoApiError","sayText","cid","text","voice_name","level","queue","loop","ssml","kick","reason","_a","_b","_c","URLSearchParams","append","keys","forEach","toString","mute","streamIndex","media","earmuff","_handleEvent","event","invited","audio_settings","enabled","_setCallStatusAndEmit","joined","knocking_id","left","legs","updateMemberLegs","status","String","emit","module"],"sources":["/Users/vineetkhodre/react-workspace/thoughtctlchatapp/client/node_modules/nexmo-client/dist/member.js"],"sourcesContent":["'use strict';\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*\n * Nexmo Client SDK\n *  Member Object Model\n *\n * Copyright (c) Nexmo Inc.\n*/\nconst WildEmitter = require('wildemitter');\nconst nexmoClientError_1 = require(\"./nexmoClientError\");\nconst nxmEvent_1 = __importDefault(require(\"./events/nxmEvent\"));\nconst utils_1 = __importDefault(require(\"./utils\"));\n/**\n * An individual user (i.e. conversation member).\n * @class Member\n * @param {Conversation} conversation\n * @param {object} params\n*/\nclass Member {\n    constructor(conversation, params) {\n        this.conversation = conversation;\n        this.callStatus = null;\n        this._normalise(params);\n        WildEmitter.mixin(Member);\n    }\n    /**\n     * Update object instance and align attribute names\n     *\n     * Handle params input to keep consistent the member object\n     * @param {object} params member attributes\n     * @private\n    */\n    _normalise(params) {\n        if (params) {\n            this.user = this.user || {};\n            this.channel = params.channel || {\n                type: 'app'\n            };\n            let key;\n            for (key in params) {\n                switch (key) {\n                    case 'member_id':\n                        this.id = params.member_id;\n                        break;\n                    case 'timestamp':\n                        this.timestamp = params.timestamp;\n                        break;\n                    case 'state':\n                        this.state = params.state;\n                        break;\n                    case 'from':\n                        this.id = params.from; // special case for member events\n                        break;\n                    case 'user_id':\n                        this.user.id = params.user_id;\n                        break;\n                    case 'name':\n                        this.user.name = params.name;\n                        break;\n                    case 'user':\n                        this.user = {\n                            name: params.user.name,\n                            id: params.user.user_id || params.user.id\n                        };\n                        this.display_name = this.display_name || params.user.display_name;\n                        break;\n                    case 'invited_by':\n                        this.invited_by = params.invited_by;\n                        break;\n                    case 'display_name':\n                        this.display_name = this.display_name || params.display_name;\n                        break;\n                    case '_embedded':\n                        if (params._embedded.user) {\n                            this.user = {\n                                id: params._embedded.user.id || this.user.id,\n                                name: params._embedded.user.name || this.user.name\n                            };\n                            this.display_name = this.display_name || params._embedded.user.display_name;\n                        }\n                    case 'conversation':\n                        break;\n                    default:\n                        if (!params.type) {\n                            this[key] = params[key];\n                        }\n                }\n            }\n            // join conversation returns our member with only id,\n            // compare it for now and use the username we have in the application object\n            if (this.conversation.application.me && params.user_id === this.conversation.application.me.id) {\n                this.user.name = this.conversation.application.me.name;\n            }\n            // make sure we don't keep a member.user_id, name in any flow\n            delete this.user_id;\n            delete this.name;\n            delete this.user.user_id;\n        }\n    }\n    /**\n     * Play the given stream only to this member within the conversation\n     *\n     * @param {string} [params]\n     *\n     * @returns {Promise<NXMEvent>}\n     * @private\n    */\n    async playStream(params) {\n        try {\n            const response = await this.conversation.application.session.sendNetworkRequest({\n                type: 'POST',\n                path: `conversations/${this.id}/events`,\n                data: {\n                    type: 'audio:play',\n                    to: this.id,\n                    body: params\n                }\n            });\n            return new nxmEvent_1.default(this.conversation, response);\n        }\n        catch (error) {\n            throw new nexmoClientError_1.NexmoApiError(error);\n        }\n    }\n    /**\n     * Speak the given text only to this member within the Conversation.\n     *\n     * @param {string} [params]\n     *\n     * @returns {Promise<NXMEvent>}\n     * @private\n    */\n    async sayText(params) {\n        try {\n            const response = await this.conversation.application.session.sendNetworkRequest({\n                type: 'POST',\n                path: `conversations/${this.id}/events`,\n                data: {\n                    type: 'audio:say',\n                    cid: this.id,\n                    from: this.conversation.me.id,\n                    to: this.id,\n                    body: {\n                        text: params.text,\n                        voice_name: params.voice_name || 'Amy',\n                        level: params.level || 1,\n                        queue: params.queue || true,\n                        loop: params.loop || 1,\n                        ssml: params.ssml || false\n                    }\n                }\n            });\n            return new nxmEvent_1.default(this.conversation, response);\n        }\n        catch (error) {\n            throw new nexmoClientError_1.NexmoApiError(error);\n        }\n    }\n    /**\n     * Kick a Member from the Conversation.\n     *\n     * @param {object} [reason] the reason for kicking out a member\n     * @param {string} [reason.reason_code] the code of the reason\n     * @param {string} [reason.reason_text] the description of the reason\n     * @example <caption>Remove a member from the Conversation.</caption>\n     * // Remove a member\n     * member.kick({reason_code: \"Reason Code\", reason_text: \"Reason Text\"})\n     * .then(() => {\n     *     console.log(\"Successfully removed member.\");\n     * }).catch((error) => {\n     *     console.error(\"Error removing member: \", error);\n     * });\n     *\n     * // Remove yourself\n     * conversation.me.kick({reason_code: \"Reason Code\", reason_text: \"Reason Text\"})\n     * .then(() => {\n     *     console.log(\"Successfully removed yourself.\");\n     * }).catch((error) => {\n     *     console.error(\"Error removing yourself: \", error);\n     * });\n     *\n     * @returns {Promise}\n    */\n    async kick(reason) {\n        var _a, _b, _c;\n        let path = `conversations/${this.conversation.id}/members/${this.id}`;\n        let params = new URLSearchParams();\n        // add member_id of from\n        if ((_c = (_b = (_a = this) === null || _a === void 0 ? void 0 : _a.conversation) === null || _b === void 0 ? void 0 : _b.me) === null || _c === void 0 ? void 0 : _c.id) {\n            params.append('from', this.conversation.me.id);\n        }\n        if (reason) {\n            Object.keys(reason).forEach((key) => {\n                params.append(key, reason[key]);\n            });\n        }\n        path += `?${params.toString()}`;\n        try {\n            return await this.conversation.application.session.sendNetworkRequest({\n                type: 'DELETE',\n                path\n            });\n        }\n        catch (error) {\n            throw new nexmoClientError_1.NexmoApiError(error);\n        }\n    }\n    /**\n     * Mute your stream.\n     *\n     * @param {boolean} [mute] true for mute, false for unmute\n     * @param {number} [streamIndex] stream index of the stream\n     * @example <caption>Mute audio stream of your Member.</caption>\n     * // Mute yourself\n     * conversation.me.mute(true);\n     *\n     * // Unmute yourself\n     * conversation.me.mute(false);\n     *\n     * @returns {Promise}\n    */\n    mute(mute, streamIndex = null) {\n        return this.conversation.media.mute(mute, streamIndex);\n    }\n    /**\n     * Earmuff yourself in the Conversation.\n     *\n     * @param {boolean} earmuff true or false\n     * @example <caption>Disables your Member from hearing other Members in the Conversation.</caption>\n     * // Earmuff yourself\n     * conversation.me.earmuff(true);\n     *\n     * // Unearmuff yourself\n     * conversation.me.earmuff(false);\n     *\n     * @returns {Promise}\n     *\n    */\n    earmuff(earmuff) {\n        return this.conversation.media.earmuff(earmuff);\n    }\n    /**\n     * Handle member object events\n     *\n     * Handle events that are modifying this member instance\n     * @param {NXMEvent} event invited, joined, left, media events\n     * @private\n    */\n    _handleEvent(event) {\n        switch (event.type) {\n            case 'member:invited':\n                this._normalise(event.body); // take care of misaligned objects.\n                this.state = 'INVITED';\n                this.timestamp.invited = event.body.timestamp.invited;\n                if (!event.body.invited_by && event.body.user.media && event.body.user.media.audio_settings\n                    && event.body.user.media.audio_settings.enabled) {\n                    this._setCallStatusAndEmit('started');\n                }\n                break;\n            case 'member:joined':\n                this._normalise(event.body); // take care of misaligned objects.\n                this.state = 'JOINED';\n                this.timestamp.joined = event.body.timestamp.joined;\n                if (event.body.channel && event.body.channel.knocking_id) {\n                    this._setCallStatusAndEmit('started');\n                }\n                break;\n            case 'member:left':\n                this._normalise(event.body); // take care of misaligned objects.\n                this.state = 'LEFT';\n                this.timestamp.left = event.body.timestamp.left;\n                if (event.body.reason && event.body.reason.text) {\n                    this._setCallStatusAndEmit(event.body.reason.text);\n                }\n                break;\n            case 'member:media':\n                this.media = event.body.media;\n                break;\n            case 'leg:status:update':\n                this.channel.legs = utils_1.default.updateMemberLegs(this.channel.legs, event);\n                this._setCallStatusAndEmit(event.body.status);\n                break;\n            case 'audio:ringing:start':\n                if (!this.callStatus || this.callStatus === 'started') {\n                    this._setCallStatusAndEmit('ringing');\n                }\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n       * Set the member.callStatus and emit a member:call:status event\n       *\n       * @param {Member.callStatus} this.callStatus the call status to set\n       * @private\n      */\n    _setCallStatusAndEmit(callStatus) {\n        if (this.callStatus !== String(callStatus)) {\n            this.callStatus = callStatus;\n            this.conversation.emit('member:call:status', this);\n        }\n    }\n}\nexports.default = Member;\nmodule.exports = Member;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}