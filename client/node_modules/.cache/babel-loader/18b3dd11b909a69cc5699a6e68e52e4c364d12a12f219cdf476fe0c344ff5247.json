{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _index = _interopRequireDefault(require(\"./index\"));\nvar _Utils = _interopRequireDefault(require(\"./Utils\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/**\n * Provides access to the `events` resource.\n */\nclass Events {\n  /**\n   * The path to the `events` resource.\n   */\n  static get PATH() {\n    return \"/beta/conversations/{conversation_uuid}/events\";\n  }\n  static get BETA2_PATH() {\n    return \"/beta2/conversations/{conversation_uuid}/events\";\n  }\n  /**\n   * Creates a new Events instance.\n   *\n   * @param {Credentials} creds - Credentials used when interacting with the Nexmo API.\n   * @param {Object} options - additional options for the class.\n   */\n\n  constructor(creds, options) {\n    this.creds = creds;\n    this.options = options;\n  }\n  /**\n   * Creates an event in a conversation.\n   *\n   * @param {string} conversationId - The unique identifier for the conversation\n   * @param {Object} params - Parameters used when adding an event to the conversation. See https://developer.nexmo.com/api/conversation#createEvent for more information.\n   * @param {function} callback - function to be called when the request completes.\n   */\n\n  create(conversationId, params, callback) {\n    params = JSON.stringify(params);\n    var config = {\n      host: this.options.apiHost || \"api.nexmo.com\",\n      path: Events.PATH.replace(\"{conversation_uuid}\", conversationId),\n      method: \"POST\",\n      body: params,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \".concat(this.creds.generateJwt())\n      }\n    };\n    this.options.httpClient.request(config, callback);\n  }\n  /**\n   * Get an existing event.\n   *\n   * @param {string} conversationId - The unique identifier for the conversation\n   * @param {string|object} query - The unique identifier for the event to retrieve\n   *               or a set of filter parameters for the query. For more information\n   *               see https://developer.nexmo.com/api/conversation#getEvents\n   * @param {function} callback - function to be called when the request completes.\n   */\n\n  get(conversationId, query, callback) {\n    var config = {\n      host: this.options.apiHost || \"api.nexmo.com\",\n      path: _Utils.default.createPathWithQuery(Events.BETA2_PATH.replace(\"{conversation_uuid}\", conversationId), query),\n      method: \"GET\",\n      body: undefined,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \".concat(this.creds.generateJwt())\n      }\n    };\n    this.options.httpClient.request(config, callback);\n  }\n  /**\n   * Get next page of events for a conversation.\n   *\n   * @param {object} response - The response from a paginated events list\n   *               see https://ea.developer.nexmo.com/api/conversation#getEvents\n   * @param {function} callback - function to be called when the request completes.\n   */\n\n  next(response, callback) {\n    if (response._links.next) {\n      var conversationId = response._links.next.href.match(/CON-[^/]*/g);\n      this.get(conversationId, _Utils.default.getQuery(response._links.next.href), callback);\n    } else {\n      var error = new Error(\"The response doesn't have a next page.\");\n      callback(error, null);\n    }\n  }\n  /**\n   * Get previous page of events for a conversation.\n   *\n   * @param {object} response - The response from a paginated events list\n   *               see https://ea.developer.nexmo.com/api/conversation#getEvents\n   * @param {function} callback - function to be called when the request completes.\n   */\n\n  prev(response, callback) {\n    if (response._links.prev) {\n      var conversationId = response._links.prev.href.match(/CON-[^/]*/g);\n      this.get(conversationId, _Utils.default.getQuery(response._links.prev.href), callback);\n    } else {\n      var error = new Error(\"The response doesn't have a previous page.\");\n      callback(error, null);\n    }\n  }\n  /**\n   * Deleta an existing event.\n   *\n   * @param {string} conversationId- The unique identifier for the conversation to delete the event from.\n   * @param {string} eventId - The unique identifier for the event to delete.\n   * @param {function} callback - function to be called when the request completes.\n   */\n\n  delete(conversationId, eventId, callback) {\n    var config = {\n      host: this.options.apiHost || \"api.nexmo.com\",\n      path: \"\".concat(Events.PATH.replace(\"{conversation_uuid}\", conversationId), \"/\").concat(eventId),\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \".concat(this.creds.generateJwt())\n      }\n    };\n    this.options.httpClient.request(config, callback);\n  }\n}\nvar _default = Events;\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"names":["_index","_interopRequireDefault","require","_Utils","Events","PATH","BETA2_PATH","constructor","creds","options","create","conversationId","params","callback","JSON","stringify","config","host","apiHost","path","replace","method","body","headers","Authorization","concat","generateJwt","httpClient","request","get","query","default","createPathWithQuery","undefined","next","response","_links","href","match","getQuery","error","Error","prev","delete","eventId"],"sources":["/Users/vineetkhodre/react-workspace/thoughtctlchatapp/node_modules/@vonage/server-sdk/src/Events.js"],"sourcesContent":["import nexmo from \"./index\";\n\nimport Utils from \"./Utils\";\n\n/**\n * Provides access to the `events` resource.\n */\nclass Events {\n  /**\n   * The path to the `events` resource.\n   */\n  static get PATH() {\n    return \"/beta/conversations/{conversation_uuid}/events\";\n  }\n\n  static get BETA2_PATH() {\n    return \"/beta2/conversations/{conversation_uuid}/events\";\n  }\n\n  /**\n   * Creates a new Events instance.\n   *\n   * @param {Credentials} creds - Credentials used when interacting with the Nexmo API.\n   * @param {Object} options - additional options for the class.\n   */\n  constructor(creds, options) {\n    this.creds = creds;\n    this.options = options;\n  }\n\n  /**\n   * Creates an event in a conversation.\n   *\n   * @param {string} conversationId - The unique identifier for the conversation\n   * @param {Object} params - Parameters used when adding an event to the conversation. See https://developer.nexmo.com/api/conversation#createEvent for more information.\n   * @param {function} callback - function to be called when the request completes.\n   */\n  create(conversationId, params, callback) {\n    params = JSON.stringify(params);\n\n    var config = {\n      host: this.options.apiHost || \"api.nexmo.com\",\n      path: Events.PATH.replace(\"{conversation_uuid}\", conversationId),\n      method: \"POST\",\n      body: params,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.creds.generateJwt()}`,\n      },\n    };\n    this.options.httpClient.request(config, callback);\n  }\n\n  /**\n   * Get an existing event.\n   *\n   * @param {string} conversationId - The unique identifier for the conversation\n   * @param {string|object} query - The unique identifier for the event to retrieve\n   *               or a set of filter parameters for the query. For more information\n   *               see https://developer.nexmo.com/api/conversation#getEvents\n   * @param {function} callback - function to be called when the request completes.\n   */\n\n  get(conversationId, query, callback) {\n    var config = {\n      host: this.options.apiHost || \"api.nexmo.com\",\n      path: Utils.createPathWithQuery(\n        Events.BETA2_PATH.replace(\"{conversation_uuid}\", conversationId),\n        query\n      ),\n      method: \"GET\",\n      body: undefined,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.creds.generateJwt()}`,\n      },\n    };\n    this.options.httpClient.request(config, callback);\n  }\n\n  /**\n   * Get next page of events for a conversation.\n   *\n   * @param {object} response - The response from a paginated events list\n   *               see https://ea.developer.nexmo.com/api/conversation#getEvents\n   * @param {function} callback - function to be called when the request completes.\n   */\n  next(response, callback) {\n    if (response._links.next) {\n      const conversationId = response._links.next.href.match(/CON-[^/]*/g);\n      this.get(\n        conversationId,\n        Utils.getQuery(response._links.next.href),\n        callback\n      );\n    } else {\n      const error = new Error(\"The response doesn't have a next page.\");\n      callback(error, null);\n    }\n  }\n\n  /**\n   * Get previous page of events for a conversation.\n   *\n   * @param {object} response - The response from a paginated events list\n   *               see https://ea.developer.nexmo.com/api/conversation#getEvents\n   * @param {function} callback - function to be called when the request completes.\n   */\n  prev(response, callback) {\n    if (response._links.prev) {\n      const conversationId = response._links.prev.href.match(/CON-[^/]*/g);\n      this.get(\n        conversationId,\n        Utils.getQuery(response._links.prev.href),\n        callback\n      );\n    } else {\n      const error = new Error(\"The response doesn't have a previous page.\");\n      callback(error, null);\n    }\n  }\n\n  /**\n   * Deleta an existing event.\n   *\n   * @param {string} conversationId- The unique identifier for the conversation to delete the event from.\n   * @param {string} eventId - The unique identifier for the event to delete.\n   * @param {function} callback - function to be called when the request completes.\n   */\n  delete(conversationId, eventId, callback) {\n    var config = {\n      host: this.options.apiHost || \"api.nexmo.com\",\n      path: `${Events.PATH.replace(\n        \"{conversation_uuid}\",\n        conversationId\n      )}/${eventId}`,\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.creds.generateJwt()}`,\n      },\n    };\n\n    this.options.httpClient.request(config, callback);\n  }\n}\n\nexport default Events;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}