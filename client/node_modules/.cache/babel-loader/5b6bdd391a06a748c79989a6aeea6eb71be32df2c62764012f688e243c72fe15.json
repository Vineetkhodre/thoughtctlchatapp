{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\n * Nexmo Client SDK\n *  NXMEvent Object Model\n *\n * Copyright (c) Nexmo Inc.\n*/\nconst WildEmitter = require('wildemitter');\nconst nexmoClientError_1 = require(\"../nexmoClientError\");\n/**\n * Conversation NXMEvent Object.\n * The super class that holds the base events that apply to\n * common event objects.\n * @class NXMEvent\n */\nclass NXMEvent {\n  constructor(conversation, params) {\n    var _a, _b, _c, _d;\n    this.conversation = conversation;\n    if (params) {\n      for (const key in params) {\n        switch (key) {\n          case 'type':\n            if (params.type.startsWith('custom:')) {\n              this.type = params.type.replace('custom:', '');\n            } else {\n              this.type = params.type;\n            }\n            break;\n          case 'application_id':\n            this.application_id = params.application_id;\n            break;\n          case 'cid':\n            this.cid = params.cid;\n            break;\n          case 'from':\n            if (['member:invited', 'member:joined', 'member:left'].indexOf(params.type) > -1) {\n              if ((_b = (_a = params._embedded) === null || _a === void 0 ? void 0 : _a.from_member) === null || _b === void 0 ? void 0 : _b.id) {\n                this.from = (_d = (_c = params._embedded) === null || _c === void 0 ? void 0 : _c.from_member) === null || _d === void 0 ? void 0 : _d.id;\n              }\n            } else {\n              this.from = params.from;\n            }\n            break;\n          case 'timestamp':\n            this.timestamp = params.timestamp;\n            break;\n          case 'id':\n            this.id = params.id;\n            break;\n          case 'state':\n            this.state = params.state;\n            break;\n          case 'index':\n            this.index = params.index;\n            break;\n          case 'streamIndex':\n            this.streamIndex = params.streamIndex;\n            break;\n          case 'body':\n            this.body = params.body;\n            if (this.body.user && this.body.user.user_id) {\n              this.body.user.id = this.body.user.user_id;\n              delete this.body.user.user_id;\n            }\n            if (this.body.digit) {\n              this.digit = this.body.digit;\n              delete this.body.digit;\n            }\n            if (this.body.digits) {\n              this.digit = this.body.digits;\n              delete this.body.digits;\n            }\n            break;\n        }\n      }\n    }\n    WildEmitter.mixin(NXMEvent);\n  }\n  /**\n   * Delete the event\n   * @param {number} [event_id=this.event_id] if the event id param is not present, \"this\" event will be default\n   * @returns {Promise}\n   * @private\n  */\n  async del(event_id = this.id) {\n    try {\n      await this.conversation.application.session.sendNetworkRequest({\n        type: 'DELETE',\n        path: `conversations/${this.conversation.id}/events/${event_id}?from=${this.conversation.me.id}`,\n        version: 'beta2'\n      });\n      return;\n    } catch (error) {\n      throw new nexmoClientError_1.NexmoApiError(error);\n    }\n  }\n  /**\n   * Mark as Delivered the event\n   * @param {number} [event_id=this.event_id] if the event id is not provided, the this event will be used\n   * @returns {Promise}\n   * @private\n   */\n  async delivered(event_id = this.id) {\n    if (this.type !== 'text' && this.type !== 'image' && this.type !== 'message') {\n      this.type = 'event';\n    }\n    if (this.conversation.me.id === this.from) {\n      throw new nexmoClientError_1.NexmoClientError('error:delivered:own-message');\n    } else if (this.state && this.state.delivered_to && this.state.delivered_to[this.conversation.me.id]) {\n      throw new nexmoClientError_1.NexmoClientError('error:already-delivered');\n    } else {\n      try {\n        await this.conversation.application.session.sendNetworkRequest({\n          type: 'POST',\n          path: `conversations/${this.conversation.id}/events`,\n          data: {\n            type: `${this.type}:delivered`,\n            from: this.conversation.me.id,\n            body: {\n              event_id\n            }\n          }\n        });\n        return;\n      } catch (error) {\n        throw new nexmoClientError_1.NexmoApiError(error);\n      }\n    }\n  }\n  /**\n   * Mark as Seen the event\n   * @param {number} [event_id=this.event_id] if the event id is not provided, the this event will be used\n   * @returns {Promise}\n   * @private\n  */\n  async seen(event_id = this.id) {\n    if (this.type !== 'text' && this.type !== 'image' && this.type !== 'message') {\n      this.type = 'event';\n    }\n    if (this.conversation.me.id === this.from) {\n      throw new nexmoClientError_1.NexmoClientError('error:seen:own-message');\n    } else if (this.state && this.state.seen_by && this.state.seen_by[this.conversation.me.id]) {\n      throw new nexmoClientError_1.NexmoClientError('error:already-seen');\n    } else {\n      try {\n        await this.conversation.application.session.sendNetworkRequest({\n          type: 'POST',\n          path: `conversations/${this.conversation.id}/events`,\n          data: {\n            type: `${this.type}:seen`,\n            from: this.conversation.me.id,\n            body: {\n              event_id\n            }\n          }\n        });\n        return;\n      } catch (error) {\n        throw new nexmoClientError_1.NexmoApiError(error);\n      }\n    }\n  }\n}\nexports.default = NXMEvent;\nmodule.exports = NXMEvent;","map":{"version":3,"names":["Object","defineProperty","exports","value","WildEmitter","require","nexmoClientError_1","NXMEvent","constructor","conversation","params","_a","_b","_c","_d","key","type","startsWith","replace","application_id","cid","indexOf","_embedded","from_member","id","from","timestamp","state","index","streamIndex","body","user","user_id","digit","digits","mixin","del","event_id","application","session","sendNetworkRequest","path","me","version","error","NexmoApiError","delivered","NexmoClientError","delivered_to","data","seen","seen_by","default","module"],"sources":["/Users/vineetkhodre/react-workspace/thoughtctlchatapp/client/node_modules/nexmo-client/dist/events/nxmEvent.js"],"sourcesContent":["'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*\n * Nexmo Client SDK\n *  NXMEvent Object Model\n *\n * Copyright (c) Nexmo Inc.\n*/\nconst WildEmitter = require('wildemitter');\nconst nexmoClientError_1 = require(\"../nexmoClientError\");\n/**\n * Conversation NXMEvent Object.\n * The super class that holds the base events that apply to\n * common event objects.\n * @class NXMEvent\n */\nclass NXMEvent {\n    constructor(conversation, params) {\n        var _a, _b, _c, _d;\n        this.conversation = conversation;\n        if (params) {\n            for (const key in params) {\n                switch (key) {\n                    case 'type':\n                        if (params.type.startsWith('custom:')) {\n                            this.type = params.type.replace('custom:', '');\n                        }\n                        else {\n                            this.type = params.type;\n                        }\n                        break;\n                    case 'application_id':\n                        this.application_id = params.application_id;\n                        break;\n                    case 'cid':\n                        this.cid = params.cid;\n                        break;\n                    case 'from':\n                        if (['member:invited', 'member:joined', 'member:left'].indexOf(params.type) > -1) {\n                            if ((_b = (_a = params._embedded) === null || _a === void 0 ? void 0 : _a.from_member) === null || _b === void 0 ? void 0 : _b.id) {\n                                this.from = (_d = (_c = params._embedded) === null || _c === void 0 ? void 0 : _c.from_member) === null || _d === void 0 ? void 0 : _d.id;\n                            }\n                        }\n                        else {\n                            this.from = params.from;\n                        }\n                        break;\n                    case 'timestamp':\n                        this.timestamp = params.timestamp;\n                        break;\n                    case 'id':\n                        this.id = params.id;\n                        break;\n                    case 'state':\n                        this.state = params.state;\n                        break;\n                    case 'index':\n                        this.index = params.index;\n                        break;\n                    case 'streamIndex':\n                        this.streamIndex = params.streamIndex;\n                        break;\n                    case 'body':\n                        this.body = params.body;\n                        if (this.body.user && this.body.user.user_id) {\n                            this.body.user.id = this.body.user.user_id;\n                            delete this.body.user.user_id;\n                        }\n                        if (this.body.digit) {\n                            this.digit = this.body.digit;\n                            delete this.body.digit;\n                        }\n                        if (this.body.digits) {\n                            this.digit = this.body.digits;\n                            delete this.body.digits;\n                        }\n                        break;\n                }\n            }\n        }\n        WildEmitter.mixin(NXMEvent);\n    }\n    /**\n     * Delete the event\n     * @param {number} [event_id=this.event_id] if the event id param is not present, \"this\" event will be default\n     * @returns {Promise}\n     * @private\n    */\n    async del(event_id = this.id) {\n        try {\n            await this.conversation.application.session.sendNetworkRequest({\n                type: 'DELETE',\n                path: `conversations/${this.conversation.id}/events/${event_id}?from=${this.conversation.me.id}`,\n                version: 'beta2'\n            });\n            return;\n        }\n        catch (error) {\n            throw new nexmoClientError_1.NexmoApiError(error);\n        }\n    }\n    /**\n     * Mark as Delivered the event\n     * @param {number} [event_id=this.event_id] if the event id is not provided, the this event will be used\n     * @returns {Promise}\n     * @private\n     */\n    async delivered(event_id = this.id) {\n        if (this.type !== 'text' && this.type !== 'image' && this.type !== 'message') {\n            this.type = 'event';\n        }\n        if (this.conversation.me.id === this.from) {\n            throw new nexmoClientError_1.NexmoClientError('error:delivered:own-message');\n        }\n        else if (this.state && this.state.delivered_to && this.state.delivered_to[this.conversation.me.id]) {\n            throw new nexmoClientError_1.NexmoClientError('error:already-delivered');\n        }\n        else {\n            try {\n                await this.conversation.application.session.sendNetworkRequest({\n                    type: 'POST',\n                    path: `conversations/${this.conversation.id}/events`,\n                    data: {\n                        type: `${this.type}:delivered`,\n                        from: this.conversation.me.id,\n                        body: {\n                            event_id\n                        }\n                    }\n                });\n                return;\n            }\n            catch (error) {\n                throw new nexmoClientError_1.NexmoApiError(error);\n            }\n        }\n    }\n    /**\n     * Mark as Seen the event\n     * @param {number} [event_id=this.event_id] if the event id is not provided, the this event will be used\n     * @returns {Promise}\n     * @private\n    */\n    async seen(event_id = this.id) {\n        if (this.type !== 'text' && this.type !== 'image' && this.type !== 'message') {\n            this.type = 'event';\n        }\n        if (this.conversation.me.id === this.from) {\n            throw new nexmoClientError_1.NexmoClientError('error:seen:own-message');\n        }\n        else if (this.state && this.state.seen_by && this.state.seen_by[this.conversation.me.id]) {\n            throw new nexmoClientError_1.NexmoClientError('error:already-seen');\n        }\n        else {\n            try {\n                await this.conversation.application.session.sendNetworkRequest({\n                    type: 'POST',\n                    path: `conversations/${this.conversation.id}/events`,\n                    data: {\n                        type: `${this.type}:seen`,\n                        from: this.conversation.me.id,\n                        body: {\n                            event_id\n                        }\n                    }\n                });\n                return;\n            }\n            catch (error) {\n                throw new nexmoClientError_1.NexmoApiError(error);\n            }\n        }\n    }\n}\nexports.default = NXMEvent;\nmodule.exports = NXMEvent;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}