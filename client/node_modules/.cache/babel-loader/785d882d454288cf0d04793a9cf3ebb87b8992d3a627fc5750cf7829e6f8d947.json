{"ast":null,"code":"\"use strict\";\n\nvar _uuid = require(\"uuid\");\nvar _jsonwebtoken = _interopRequireDefault(require(\"jsonwebtoken\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nclass JwtGenerator {\n  /**\n   * Generate a JSON Web Token (JWT).\n   *\n   * @param {Buffer} cert - the private key certificate to be used when signing\n   * the claims.\n   * @param {Object} claims - additional claims to include within the generated\n   * JWT.\n   *\n   * @returns {String} the generated token\n   */\n  generate(cert) {\n    var claims = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!(cert instanceof Buffer)) {\n      throw new Error(\"cert must be of type Buffer\");\n    }\n    if (typeof claims !== \"object\") {\n      throw new Error(\"claims must be of type object\");\n    }\n    var toSign = {\n      iat: claims.issuedAt || parseInt(Date.now() / 1000, 10),\n      jti: claims.jti || (0, _uuid.v1)()\n    };\n    Object.keys(claims).forEach(key => {\n      toSign[key] = claims[key];\n    });\n    var token = _jsonwebtoken.default.sign(toSign, cert, {\n      algorithm: \"RS256\"\n    });\n    return token;\n  }\n}\nmodule.exports = JwtGenerator;","map":{"version":3,"names":["_uuid","require","_jsonwebtoken","_interopRequireDefault","JwtGenerator","generate","cert","claims","arguments","length","undefined","Buffer","Error","toSign","iat","issuedAt","parseInt","Date","now","jti","v1","Object","keys","forEach","key","token","default","sign","algorithm","module","exports"],"sources":["/Users/vineetkhodre/react-workspace/thoughtctlchatapp/node_modules/@vonage/server-sdk/src/JwtGenerator.js"],"sourcesContent":["import { v1 as uuidv1 } from \"uuid\";\nimport jwt from \"jsonwebtoken\";\n\nclass JwtGenerator {\n  /**\n   * Generate a JSON Web Token (JWT).\n   *\n   * @param {Buffer} cert - the private key certificate to be used when signing\n   * the claims.\n   * @param {Object} claims - additional claims to include within the generated\n   * JWT.\n   *\n   * @returns {String} the generated token\n   */\n  generate(cert, claims = {}) {\n    if (!(cert instanceof Buffer)) {\n      throw new Error(\"cert must be of type Buffer\");\n    }\n    if (typeof claims !== \"object\") {\n      throw new Error(\"claims must be of type object\");\n    }\n\n    var toSign = {\n      iat: claims.issuedAt || parseInt(Date.now() / 1000, 10),\n      jti: claims.jti || uuidv1(),\n    };\n    Object.keys(claims).forEach((key) => {\n      toSign[key] = claims[key];\n    });\n\n    var token = jwt.sign(toSign, cert, { algorithm: \"RS256\" });\n    return token;\n  }\n}\n\nmodule.exports = JwtGenerator;\n"],"mappings":";;AAAA,IAAAA,KAAA,GAAAC,OAAA;AACA,IAAAC,aAAA,GAAAC,sBAAA,CAAAF,OAAA;;;;;;AAEA,MAAMG,YAAN,CAAmB;EACjB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,QAAQA,CAACC,IAAD,EAAoB;IAAA,IAAbC,MAAa,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAJ,EAAI;IAC1B,IAAI,EAAEF,IAAI,YAAYK,MAAlB,CAAJ,EAA+B;MAC7B,MAAM,IAAIC,KAAJ,CAAU,6BAAV,CAAN;IACD;IACD,IAAI,OAAOL,MAAP,KAAkB,QAAtB,EAAgC;MAC9B,MAAM,IAAIK,KAAJ,CAAU,+BAAV,CAAN;IACD;IAED,IAAIC,MAAM,GAAG;MACXC,GAAG,EAAEP,MAAM,CAACQ,QAAP,IAAmBC,QAAQ,CAACC,IAAI,CAACC,GAAL,KAAa,IAAd,EAAoB,EAApB,CADrB;MAEXC,GAAG,EAAEZ,MAAM,CAACY,GAAP,IAAc,IAAAnB,KAAA,CAAAoB,EAAA;IAFR,CAAb;IAIAC,MAAM,CAACC,IAAP,CAAYf,MAAZ,EAAoBgB,OAApB,CAA6BC,GAAD,IAAS;MACnCX,MAAM,CAACW,GAAD,CAAN,GAAcjB,MAAM,CAACiB,GAAD,CAApB;IACD,CAFD;IAIA,IAAIC,KAAK,GAAGvB,aAAA,CAAAwB,OAAA,CAAIC,IAAJ,CAASd,MAAT,EAAiBP,IAAjB,EAAuB;MAAEsB,SAAS,EAAE;IAAb,CAAvB,CAAZ;IACA,OAAOH,KAAP;EACD;AA7BgB;AAgCnBI,MAAM,CAACC,OAAP,GAAiB1B,YAAjB"},"metadata":{},"sourceType":"script","externalDependencies":[]}