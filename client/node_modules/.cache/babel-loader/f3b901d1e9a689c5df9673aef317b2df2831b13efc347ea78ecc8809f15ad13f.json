{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _index = require(\"./index\");\nvar _index2 = _interopRequireDefault(_index);\nvar _Utils = require(\"./Utils\");\nvar _Utils2 = _interopRequireDefault(_Utils);\nvar _Members = require(\"./Members\");\nvar _Members2 = _interopRequireDefault(_Members);\nvar _Events = require(\"./Events\");\nvar _Events2 = _interopRequireDefault(_Events);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\n/**\n * Provides access to the `conversations` endpoint.\n */\nvar Conversations = function () {\n  _createClass(Conversations, null, [{\n    key: \"PATH\",\n    get: function get() {\n      return \"/beta/conversations\";\n    }\n  }, {\n    key: \"BETA2_PATH\",\n    get: function get() {\n      return \"/beta2/conversations\";\n    }\n  }, {\n    key: \"V1_PATH\",\n    get: function get() {\n      return \"/v1/conversations\";\n    }\n\n    /**\n     * @param {Credentials} credentials\n     *    credentials to be used when interacting with the API.\n     * @param {Object} options\n     *    Additional Conversations options.\n     */\n  }]);\n  function Conversations(credentials) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, Conversations);\n    this.creds = credentials;\n    this.options = options;\n\n    /**\n     * @type Members\n     */\n    this.members = new _Members2.default(this.creds, this.options);\n\n    /**\n     * @type Events\n     */\n    this.events = new _Events2.default(this.creds, this.options);\n  }\n\n  /**\n   * Create a new conversation.\n   *\n   * @param {Object} params - Parameters used when creating the conversation. See https://ea.developer.nexmo.com/api/conversation#create-a-conversation for more information.\n   * @param {function} callback - function to be called when the request completes.\n   */\n\n  _createClass(Conversations, [{\n    key: \"create\",\n    value: function create(params, callback) {\n      params = JSON.stringify(params);\n      var config = {\n        host: this.options.apiHost || \"api.nexmo.com\",\n        path: Conversations.PATH,\n        method: \"POST\",\n        body: params,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + this.creds.generateJwt()\n        }\n      };\n      this.options.httpClient.request(config, callback);\n    }\n\n    /**\n     * Get an existing conversation.\n     *\n     * @param {string|object} query - The unique identifier for the conversation to retrieve\n     *               or a set of filter parameters for the query. For more information\n     *               see https://ea.developer.nexmo.com/api/conversation#retrieve-a-conversation\n     * @param {function} callback - function to be called when the request completes.\n     */\n  }, {\n    key: \"get\",\n    value: function get(query, callback) {\n      var config = {\n        host: this.options.apiHost || \"api.nexmo.com\",\n        path: typeof query === \"string\" ? Conversations.PATH + \"/\" + query : _Utils2.default.createPathWithQuery(Conversations.BETA2_PATH, query),\n        method: \"GET\",\n        body: undefined,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + this.creds.generateJwt()\n        }\n      };\n      this.options.httpClient.request(config, callback);\n    }\n\n    /**\n     * Get next page of conversations.\n     *\n     * @param {object} response - The response from a paginated conversations list\n     *               see https://ea.developer.nexmo.com/api/conversation#listConversations\n     * @param {function} callback - function to be called when the request completes.\n     */\n  }, {\n    key: \"next\",\n    value: function next(response, callback) {\n      if (response._links.next) {\n        this.get(_Utils2.default.getQuery(response._links.next.href), callback);\n      } else {\n        var error = new Error(\"The response doesn't have a next page.\");\n        callback(error, null);\n      }\n    }\n\n    /**\n     * Get previous page of conversations.\n     *\n     * @param {object} response - The response from a paginated conversations list\n     *               see https://ea.developer.nexmo.com/api/conversation#listConversations\n     * @param {function} callback - function to be called when the request completes.\n     */\n  }, {\n    key: \"prev\",\n    value: function prev(response, callback) {\n      if (response._links.prev) {\n        this.get(_Utils2.default.getQuery(response._links.prev.href), callback);\n      } else {\n        var error = new Error(\"The response doesn't have a previous page.\");\n        callback(error, null);\n      }\n    }\n\n    /**\n     * Update an existing conversation.\n     *\n     * @param {string} conversationId - The unique identifier for the conversation to update.\n     * @param {Object} params - Parameters used when updating the conversation.\n     * @param {function} callback - function to be called when the request completes.\n     */\n  }, {\n    key: \"update\",\n    value: function update(conversationId, params, callback) {\n      params = JSON.stringify(params);\n      var config = {\n        host: this.options.apiHost || \"api.nexmo.com\",\n        path: Conversations.PATH + \"/\" + conversationId,\n        method: \"PUT\",\n        body: params,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + this.creds.generateJwt()\n        }\n      };\n      this.options.httpClient.request(config, callback);\n    }\n\n    /**\n     * Record an existing conversation.\n     *\n     * @param {string} conversationId - The unique identifier for the conversation to record.\n     * @param {Object} params - Parameters used when recording the conversation.\n     * @param {function} callback - function to be called when the request completes.\n     */\n  }, {\n    key: \"record\",\n    value: function record(conversationId, params, callback) {\n      params = JSON.stringify(params);\n      var config = {\n        host: this.options.apiHost || \"api.nexmo.com\",\n        path: Conversations.V1_PATH + \"/\" + conversationId + \"/record\",\n        method: \"PUT\",\n        body: params,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + this.creds.generateJwt()\n        }\n      };\n      this.options.httpClient.request(config, callback);\n    }\n\n    /**\n     * Deleta an existing conversation.\n     *\n     * @param {string} conversationId - The unique identifier for the conversation to delete.\n     * @param {function} callback - function to be called when the request completes.\n     */\n  }, {\n    key: \"delete\",\n    value: function _delete(conversationId, callback) {\n      var config = {\n        host: this.options.apiHost || \"api.nexmo.com\",\n        path: Conversations.PATH + \"/\" + conversationId,\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + this.creds.generateJwt()\n        }\n      };\n      this.options.httpClient.request(config, callback);\n    }\n  }]);\n  return Conversations;\n}();\nexports.default = Conversations;\nmodule.exports = exports[\"default\"];","map":{"version":3,"names":["_index","require","_Utils","_Members","_Events","Conversations","credentials","options","arguments","length","undefined","_classCallCheck","creds","members","_Members2","default","events","_Events2","params","callback","JSON","stringify","config","host","apiHost","path","PATH","method","body","headers","Authorization","generateJwt","httpClient","request","query","_Utils2","createPathWithQuery","BETA2_PATH","response","_links","next","get","getQuery","href","error","Error","prev","conversationId","V1_PATH"],"sources":["/Users/vineetkhodre/react-workspace/thoughtctlchatapp/node_modules/nexmo/src/Conversations.js"],"sourcesContent":["\"use strict\";\n\nimport nexmo from \"./index\";\n\nimport Utils from \"./Utils\";\n\nimport Members from \"./Members\";\nimport Events from \"./Events\";\n\n/**\n * Provides access to the `conversations` endpoint.\n */\nclass Conversations {\n  static get PATH() {\n    return \"/beta/conversations\";\n  }\n\n  static get BETA2_PATH() {\n    return \"/beta2/conversations\";\n  }\n\n  static get V1_PATH() {\n    return \"/v1/conversations\";\n  }\n\n  /**\n   * @param {Credentials} credentials\n   *    credentials to be used when interacting with the API.\n   * @param {Object} options\n   *    Additional Conversations options.\n   */\n  constructor(credentials, options = {}) {\n    this.creds = credentials;\n    this.options = options;\n\n    /**\n     * @type Members\n     */\n    this.members = new Members(this.creds, this.options);\n\n    /**\n     * @type Events\n     */\n    this.events = new Events(this.creds, this.options);\n  }\n\n  /**\n   * Create a new conversation.\n   *\n   * @param {Object} params - Parameters used when creating the conversation. See https://ea.developer.nexmo.com/api/conversation#create-a-conversation for more information.\n   * @param {function} callback - function to be called when the request completes.\n   */\n  create(params, callback) {\n    params = JSON.stringify(params);\n\n    var config = {\n      host: this.options.apiHost || \"api.nexmo.com\",\n      path: Conversations.PATH,\n      method: \"POST\",\n      body: params,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.creds.generateJwt()}`\n      }\n    };\n    this.options.httpClient.request(config, callback);\n  }\n\n  /**\n   * Get an existing conversation.\n   *\n   * @param {string|object} query - The unique identifier for the conversation to retrieve\n   *               or a set of filter parameters for the query. For more information\n   *               see https://ea.developer.nexmo.com/api/conversation#retrieve-a-conversation\n   * @param {function} callback - function to be called when the request completes.\n   */\n  get(query, callback) {\n    var config = {\n      host: this.options.apiHost || \"api.nexmo.com\",\n      path:\n        typeof query === \"string\"\n          ? `${Conversations.PATH}/${query}`\n          : Utils.createPathWithQuery(Conversations.BETA2_PATH, query),\n      method: \"GET\",\n      body: undefined,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.creds.generateJwt()}`\n      }\n    };\n    this.options.httpClient.request(config, callback);\n  }\n\n  /**\n   * Get next page of conversations.\n   *\n   * @param {object} response - The response from a paginated conversations list\n   *               see https://ea.developer.nexmo.com/api/conversation#listConversations\n   * @param {function} callback - function to be called when the request completes.\n   */\n  next(response, callback) {\n    if (response._links.next) {\n      this.get(Utils.getQuery(response._links.next.href), callback);\n    } else {\n      const error = new Error(\"The response doesn't have a next page.\");\n      callback(error, null);\n    }\n  }\n\n  /**\n   * Get previous page of conversations.\n   *\n   * @param {object} response - The response from a paginated conversations list\n   *               see https://ea.developer.nexmo.com/api/conversation#listConversations\n   * @param {function} callback - function to be called when the request completes.\n   */\n  prev(response, callback) {\n    if (response._links.prev) {\n      this.get(Utils.getQuery(response._links.prev.href), callback);\n    } else {\n      const error = new Error(\"The response doesn't have a previous page.\");\n      callback(error, null);\n    }\n  }\n\n  /**\n   * Update an existing conversation.\n   *\n   * @param {string} conversationId - The unique identifier for the conversation to update.\n   * @param {Object} params - Parameters used when updating the conversation.\n   * @param {function} callback - function to be called when the request completes.\n   */\n  update(conversationId, params, callback) {\n    params = JSON.stringify(params);\n\n    var config = {\n      host: this.options.apiHost || \"api.nexmo.com\",\n      path: `${Conversations.PATH}/${conversationId}`,\n      method: \"PUT\",\n      body: params,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.creds.generateJwt()}`\n      }\n    };\n\n    this.options.httpClient.request(config, callback);\n  }\n\n  /**\n   * Record an existing conversation.\n   *\n   * @param {string} conversationId - The unique identifier for the conversation to record.\n   * @param {Object} params - Parameters used when recording the conversation.\n   * @param {function} callback - function to be called when the request completes.\n   */\n  record(conversationId, params, callback) {\n    params = JSON.stringify(params);\n\n    var config = {\n      host: this.options.apiHost || \"api.nexmo.com\",\n      path: `${Conversations.V1_PATH}/${conversationId}/record`,\n      method: \"PUT\",\n      body: params,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.creds.generateJwt()}`\n      }\n    };\n\n    this.options.httpClient.request(config, callback);\n  }\n\n  /**\n   * Deleta an existing conversation.\n   *\n   * @param {string} conversationId - The unique identifier for the conversation to delete.\n   * @param {function} callback - function to be called when the request completes.\n   */\n  delete(conversationId, callback) {\n    var config = {\n      host: this.options.apiHost || \"api.nexmo.com\",\n      path: `${Conversations.PATH}/${conversationId}`,\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.creds.generateJwt()}`\n      }\n    };\n\n    this.options.httpClient.request(config, callback);\n  }\n}\n\nexport default Conversations;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}