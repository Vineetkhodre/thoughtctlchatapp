{"ast":null,"code":"'use strict';\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\n * Nexmo Client SDK\n *  ImageEvent Object Model\n *\n * Copyright (c) Nexmo Inc.\n */\nconst utils_1 = __importDefault(require(\"../utils\"));\nconst loglevel_1 = require(\"loglevel\");\nconst nxmEvent_1 = __importDefault(require(\"./nxmEvent\"));\n/**\n * An image event\n *\n * @class ImageEvent\n * @extends NXMEvent\n*/\nclass ImageEvent extends nxmEvent_1.default {\n  constructor(conversation, params) {\n    super(conversation, params);\n    this.log = loglevel_1.getLogger(this.constructor.name);\n    this.type = 'image';\n    this.conversation = conversation;\n    this.state = {\n      seen_by: {},\n      delivered_to: {}\n    };\n    if (params && params.body && params.body.timestamp) {\n      this.timestamp = params.body.timestamp;\n    }\n    Object.assign(this, params);\n  }\n  /**\n   * Set the imageEvent status to 'seen'\n   * @returns {Promise}\n   * @example <caption>Set the imageEvent status to 'seen'</caption>\n   *  imageEvent.seen().then(() => {\n   *    console.log(\"image event status set to seen\");\n   *  }).catch((error)=>{\n   *\tconsole.log(\"error setting image event status to seen \", error);\n   *  });\n   */\n  seen() {\n    return super.seen();\n  }\n  /**\n   * Set the imageEvent status to 'delivered'\n   * @returns {Promise}\n   * @example <caption>Set the imageEvent status to 'delivered'</caption>\n   *  imageEvent.delivered().then(() => {\n   *    console.log(\"image event status set to delivered\");\n   *  }).catch((error)=>{\n   *\tconsole.log(\"error setting image event status to delivered  \", error);\n   *  });\n   */\n  delivered() {\n    return super.delivered();\n  }\n  /**\n   * Delete the image event, all 3 representations of it\n   * passing only the one of the three URLs\n   * @returns {Promise}\n   * @example <caption>Delete the imageEvent</caption>\n   *  imageEvent.del().then(() => {\n   *    console.log(\"image event deleted\");\n   *  }).catch((error)=>{\n   *\tconsole.log(\"error deleting image event  \", error);\n   *  });\n   */\n  async del() {\n    await utils_1.default.networkRequest({\n      type: 'DELETE',\n      url: this.body.representations.original.url,\n      token: this.conversation.application.session.config.token\n    });\n    return super.del();\n  }\n  /**\n   * Download an Image from Media service //3 representations\n   * @param {string} [type=\"thumbnail\"] original, medium, or thumbnail\n   * @param {string} [representations=this.body.representations]  the ImageEvent.body for the image to download\n   * @returns {string} the dataUrl \"data:image/jpeg;base64...\"\n   * @example <caption>Downloading an image from the imageEvent</caption>\n   *  imageEvent.fetchImage(\"medium\").then((imageData) => {\n   *    const img = new Image();\n   *    img.src = imageData;\n   *    document.body.appendChild(img);\n   *  }).catch((error)=>{\n   *\tconsole.log(\"error getting image \", error);\n   *  });\n  */\n  async fetchImage(type = 'thumbnail', imageRepresentations = this.body.representations) {\n    try {\n      return utils_1.default._fetchImage(imageRepresentations[type].url, this.conversation.application.session.config.token);\n    } catch (error) {\n      this.log.error(error);\n      throw error;\n    }\n  }\n}\nexports.default = ImageEvent;\nmodule.exports = ImageEvent;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","utils_1","require","loglevel_1","nxmEvent_1","ImageEvent","default","constructor","conversation","params","log","getLogger","name","type","state","seen_by","delivered_to","body","timestamp","assign","seen","delivered","del","networkRequest","url","representations","original","token","application","session","config","fetchImage","imageRepresentations","_fetchImage","error","module"],"sources":["/Users/vineetkhodre/react-workspace/thoughtctlchatapp/client/node_modules/nexmo-client/dist/events/image_event.js"],"sourcesContent":["'use strict';\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*\n * Nexmo Client SDK\n *  ImageEvent Object Model\n *\n * Copyright (c) Nexmo Inc.\n */\nconst utils_1 = __importDefault(require(\"../utils\"));\nconst loglevel_1 = require(\"loglevel\");\nconst nxmEvent_1 = __importDefault(require(\"./nxmEvent\"));\n/**\n * An image event\n *\n * @class ImageEvent\n * @extends NXMEvent\n*/\nclass ImageEvent extends nxmEvent_1.default {\n    constructor(conversation, params) {\n        super(conversation, params);\n        this.log = loglevel_1.getLogger(this.constructor.name);\n        this.type = 'image';\n        this.conversation = conversation;\n        this.state = {\n            seen_by: {},\n            delivered_to: {}\n        };\n        if (params && params.body && params.body.timestamp) {\n            this.timestamp = params.body.timestamp;\n        }\n        Object.assign(this, params);\n    }\n    /**\n     * Set the imageEvent status to 'seen'\n     * @returns {Promise}\n     * @example <caption>Set the imageEvent status to 'seen'</caption>\n     *  imageEvent.seen().then(() => {\n     *    console.log(\"image event status set to seen\");\n     *  }).catch((error)=>{\n     *\tconsole.log(\"error setting image event status to seen \", error);\n     *  });\n     */\n    seen() {\n        return super.seen();\n    }\n    /**\n     * Set the imageEvent status to 'delivered'\n     * @returns {Promise}\n     * @example <caption>Set the imageEvent status to 'delivered'</caption>\n     *  imageEvent.delivered().then(() => {\n     *    console.log(\"image event status set to delivered\");\n     *  }).catch((error)=>{\n     *\tconsole.log(\"error setting image event status to delivered  \", error);\n     *  });\n     */\n    delivered() {\n        return super.delivered();\n    }\n    /**\n     * Delete the image event, all 3 representations of it\n     * passing only the one of the three URLs\n     * @returns {Promise}\n     * @example <caption>Delete the imageEvent</caption>\n     *  imageEvent.del().then(() => {\n     *    console.log(\"image event deleted\");\n     *  }).catch((error)=>{\n     *\tconsole.log(\"error deleting image event  \", error);\n     *  });\n     */\n    async del() {\n        await utils_1.default.networkRequest({\n            type: 'DELETE',\n            url: this.body.representations.original.url,\n            token: this.conversation.application.session.config.token\n        });\n        return super.del();\n    }\n    /**\n     * Download an Image from Media service //3 representations\n     * @param {string} [type=\"thumbnail\"] original, medium, or thumbnail\n     * @param {string} [representations=this.body.representations]  the ImageEvent.body for the image to download\n     * @returns {string} the dataUrl \"data:image/jpeg;base64...\"\n     * @example <caption>Downloading an image from the imageEvent</caption>\n     *  imageEvent.fetchImage(\"medium\").then((imageData) => {\n     *    const img = new Image();\n     *    img.src = imageData;\n     *    document.body.appendChild(img);\n     *  }).catch((error)=>{\n     *\tconsole.log(\"error getting image \", error);\n     *  });\n    */\n    async fetchImage(type = 'thumbnail', imageRepresentations = this.body.representations) {\n        try {\n            return utils_1.default._fetchImage(imageRepresentations[type].url, this.conversation.application.session.config.token);\n        }\n        catch (error) {\n            this.log.error(error);\n            throw error;\n        }\n    }\n}\nexports.default = ImageEvent;\nmodule.exports = ImageEvent;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}