{"ast":null,"code":"'use strict';\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\n * Nexmo Client SDK\n *  Conversation Events Handler\n *\n * Copyright (c) Nexmo Inc.\n */\nconst loglevel_1 = require(\"loglevel\");\nconst nxmEvent_1 = __importDefault(require(\"../events/nxmEvent\"));\nconst text_event_1 = __importDefault(require(\"../events/text_event\"));\nconst image_event_1 = __importDefault(require(\"../events/image_event\"));\nconst message_event_1 = __importDefault(require(\"../events/message_event\"));\n/**\n * Handle Conversation Events\n *\n * @class ConversationEventsHandler\n * @param {Application} application\n * @param {Conversation} conversation\n * @private\n*/\nclass ConversationEventHandler {\n  constructor(application, conversation) {\n    this.log = loglevel_1.getLogger(this.constructor.name);\n    this.application = application;\n    this.conversation = conversation;\n    this.constructed_event = null;\n    this._handleEventMap = {\n      'event:delete': this._processDelete,\n      'image': this._processImage,\n      'image:delivered': this._processDelivered,\n      'image:seen': this._processSeen,\n      'member:invited': this._processMember,\n      'member:joined': this._processMember,\n      'member:left': this._processMember,\n      'audio:ringing:start': this._processMember,\n      'leg:status:update': this._processLegStatus,\n      'member:media': this._processMedia,\n      'text': this._processText,\n      'text:delivered': this._processDelivered,\n      'text:seen': this._processSeen,\n      'audio:mute:on': this._processMuteForMedia,\n      'audio:mute:off': this._processMuteForMedia,\n      'message': this._processMessage,\n      'message:delivered': this._processDelivered,\n      'message:seen': this._processSeen,\n      'message:submitted': this._processSubmitted,\n      'message:rejected': this._processRejected,\n      'message:undeliverable': this._processUndeliverable\n    };\n  }\n  /**\n    * Handle and event.\n    *\n    * Identify the type of the event,\n    * create the corresponding Class instance\n    * emit to the corresponding Objects\n    * @param {object} event\n    * @private\n  */\n  handleEvent(event) {\n    if (this._handleEventMap.hasOwnProperty(event.type)) {\n      return this._handleEventMap[event.type].call(this, event) || new nxmEvent_1.default(this.conversation, event);\n    }\n    return new nxmEvent_1.default(this.conversation, event);\n  }\n  /**\n    * Mark the requested event as delivered\n    * use that event as constructed to update the local events' map\n      * @param {object} event\n    * @returns the NXMEvent that is marked as delivered\n    * @private\n  */\n  _processDelivered(event) {\n    let event_to_mark = this.conversation.events.get(event.body.event_id);\n    if (event_to_mark) {\n      event_to_mark.state = event_to_mark.state || {};\n      event_to_mark.state.delivered_to = event_to_mark.state.delivered_to || {};\n      event_to_mark.state.delivered_to[event.from] = event.timestamp;\n      return event_to_mark;\n    } else {\n      this.log.warn('NXMEvent not found');\n      return null;\n    }\n  }\n  /**\n    * Delete the requested event\n    * empty the payload of the event (text, image or message)\n    * use that event as constructed to update the local events map\n    * @param {object} event\n    * @returns the deleted events\n    * @private\n  */\n  _processDelete(event) {\n    var _a, _b;\n    let event_to_delete = this.conversation.events.get((_b = (_a = event) === null || _a === void 0 ? void 0 : _a.body) === null || _b === void 0 ? void 0 : _b.event_id);\n    if (event_to_delete) {\n      if (event_to_delete.body.text) event_to_delete.body.text = '';\n      if (event_to_delete.body.representations) event_to_delete.body.representations = '';\n      event_to_delete.body.timestamp = {\n        deleted: event.timestamp\n      };\n      return event_to_delete;\n    } else {\n      this.log.warn('NXMEvent not found');\n      return null;\n    }\n  }\n  /**\n    * Return an ImageEvent with the corresponding image data\n    * @param {object} event\n    * @returns {ImageEvent}\n  */\n  _processImage(event) {\n    var _a;\n    const imageEvent = new image_event_1.default(this.conversation, event);\n    // Automatically send a delivery\n    // avoid sending delivered to our own events\n    if (((_a = this.conversation.me) === null || _a === void 0 ? void 0 : _a.id) !== imageEvent.from) {\n      imageEvent.delivered();\n    }\n    return imageEvent;\n  }\n  /**\n    * Handle events for member state changes (joined, invited, left)\n    * in conversation level.\n    * Other members are going through here too.\n    * For .me member initial event (join, invite) use the application listener\n      * @param {object} event\n    * @returns {NXMEvent}\n    * @private\n  */\n  _processMember(event) {\n    // needs to first process the call state and then alter the member\n    if (this.application.calls.has(this.conversation.id)) {\n      let call = this.application.calls.get(this.conversation.id);\n      call._handleStatusChange(event);\n    }\n    if (this.conversation.members.has(event.from)) this.conversation.members.get(event.from)._handleEvent(event);\n    return new nxmEvent_1.default(this.conversation, event);\n  }\n  /**\n   * Handle events for leg status updates in conversation level.\n   * Other member's legs are going through here too.\n   * @param {object} event\n   * @returns {NXMEvent}\n   * @private\n  */\n  _processLegStatus(event) {\n    if (this.conversation.members.has(event.from)) this.conversation.members.get(event.from)._handleEvent(event);\n    return new nxmEvent_1.default(this.conversation, event);\n  }\n  /**\n    * Handle member:media events\n    * use a call object if and the member object\n      * @param {object} event\n    * @private\n  */\n  _processMedia(event) {\n    if (this.conversation.members.has(event.from)) this.conversation.members.get(event.from)._handleEvent(event);\n    return null;\n  }\n  /**\n    * Handle *:mute:* events\n      * @param {object} event\n    * @private\n  */\n  _processMuteForMedia(event) {\n    if (this.conversation.media.rtcObjects[event.body.rtc_id]) {\n      event.streamIndex = this.conversation.media.rtcObjects[event.body.rtc_id].streamIndex;\n    } else {\n      this.log.warn('No audio stream was found');\n    }\n    return null;\n  }\n  /**\n    * Mark the requested event as seen\n    * use that event as constructed to update the local Events map\n      * @param {object} event\n    * @private\n  */\n  _processSeen(event) {\n    let event_to_mark = this.conversation.events.get(event.body.event_id);\n    if (event_to_mark) {\n      event_to_mark.state = event_to_mark.state || {};\n      event_to_mark.state.seen_by = event_to_mark.state.seen_by || {};\n      event_to_mark.state.seen_by[event.from] = event.timestamp;\n      return event_to_mark;\n    } else {\n      this.log.warn('NXMEvent not found');\n      return null;\n    }\n  }\n  /**\n    * Create the TextEvent object and trigger .delivered()\n      * @param {object} event\n    * @private\n  */\n  _processText(event) {\n    var _a, _b;\n    const textEvent = new text_event_1.default(this.conversation, event);\n    // Automatically send a delivery\n    // avoid sending delivered to our own events\n    if (((_b = (_a = this.conversation) === null || _a === void 0 ? void 0 : _a.me) === null || _b === void 0 ? void 0 : _b.id) !== textEvent.from) {\n      textEvent.delivered();\n    }\n    return textEvent;\n  }\n  /**\n    * Create the MessageEvent object and trigger .delivered()\n      * @param {object} event\n    * @private\n  */\n  _processMessage(event) {\n    var _a, _b;\n    const messageEvent = new message_event_1.default(this.conversation, event);\n    // Automatically send a delivery\n    // avoid sending delivered to our own events\n    if (((_b = (_a = this.conversation) === null || _a === void 0 ? void 0 : _a.me) === null || _b === void 0 ? void 0 : _b.id) !== messageEvent.from) {\n      messageEvent.delivered();\n    }\n    return messageEvent;\n  }\n  /**\n    * Mark the requested event as submitted\n    * use that event as constructed to update the local Events map\n      * @param {object} event\n    * @private\n  */\n  _processSubmitted(event) {\n    let event_to_mark = this.conversation.events.get(event.body.event_id);\n    if (event_to_mark) {\n      event_to_mark.state = event_to_mark.state || {};\n      event_to_mark.state.submitted_to = event_to_mark.state.submitted_to || {};\n      event_to_mark.state.submitted_to[event.from] = event.timestamp;\n      return event_to_mark;\n    } else {\n      this.log.warn('NXMEvent not found');\n      return null;\n    }\n  }\n  /**\n    * Mark the requested event as rejected\n    * use that event as constructed to update the local Events map\n      * @param {object} event\n    * @private\n  */\n  _processRejected(event) {\n    let event_to_mark = this.conversation.events.get(event.body.event_id);\n    if (event_to_mark) {\n      event_to_mark.state = event_to_mark.state || {};\n      event_to_mark.state.rejected_by = event_to_mark.state.rejected_by || {};\n      event_to_mark.state.rejected_by[event.from] = event.timestamp;\n      return event_to_mark;\n    } else {\n      this.log.warn('NXMEvent not found');\n      return null;\n    }\n  }\n  /**\n    * Mark the requested event as undeliverable\n    * use that event as constructed to update the local Events map\n      * @param {object} event\n    * @private\n  */\n  _processUndeliverable(event) {\n    let event_to_mark = this.conversation.events.get(event.body.event_id);\n    if (event_to_mark) {\n      event_to_mark.state = event_to_mark.state || {};\n      event_to_mark.state.undeliverable_to = event_to_mark.state.undeliverable_to || {};\n      event_to_mark.state.undeliverable_to[event.from] = event.timestamp;\n      return event_to_mark;\n    } else {\n      this.log.warn('NXMEvent not found');\n      return null;\n    }\n  }\n}\nexports.default = ConversationEventHandler;\nmodule.exports = ConversationEventHandler;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","loglevel_1","require","nxmEvent_1","text_event_1","image_event_1","message_event_1","ConversationEventHandler","constructor","application","conversation","log","getLogger","name","constructed_event","_handleEventMap","_processDelete","_processImage","_processDelivered","_processSeen","_processMember","_processLegStatus","_processMedia","_processText","_processMuteForMedia","_processMessage","_processSubmitted","_processRejected","_processUndeliverable","handleEvent","event","hasOwnProperty","type","call","default","event_to_mark","events","get","body","event_id","state","delivered_to","from","timestamp","warn","_a","_b","event_to_delete","text","representations","deleted","imageEvent","me","id","delivered","calls","has","_handleStatusChange","members","_handleEvent","media","rtcObjects","rtc_id","streamIndex","seen_by","textEvent","messageEvent","submitted_to","rejected_by","undeliverable_to","module"],"sources":["/Users/vineetkhodre/react-workspace/thoughtctlchatapp/client/node_modules/nexmo-client/dist/handlers/conversation_events.js"],"sourcesContent":["'use strict';\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*\n * Nexmo Client SDK\n *  Conversation Events Handler\n *\n * Copyright (c) Nexmo Inc.\n */\nconst loglevel_1 = require(\"loglevel\");\nconst nxmEvent_1 = __importDefault(require(\"../events/nxmEvent\"));\nconst text_event_1 = __importDefault(require(\"../events/text_event\"));\nconst image_event_1 = __importDefault(require(\"../events/image_event\"));\nconst message_event_1 = __importDefault(require(\"../events/message_event\"));\n/**\n * Handle Conversation Events\n *\n * @class ConversationEventsHandler\n * @param {Application} application\n * @param {Conversation} conversation\n * @private\n*/\nclass ConversationEventHandler {\n    constructor(application, conversation) {\n        this.log = loglevel_1.getLogger(this.constructor.name);\n        this.application = application;\n        this.conversation = conversation;\n        this.constructed_event = null;\n        this._handleEventMap = {\n            'event:delete': this._processDelete,\n            'image': this._processImage,\n            'image:delivered': this._processDelivered,\n            'image:seen': this._processSeen,\n            'member:invited': this._processMember,\n            'member:joined': this._processMember,\n            'member:left': this._processMember,\n            'audio:ringing:start': this._processMember,\n            'leg:status:update': this._processLegStatus,\n            'member:media': this._processMedia,\n            'text': this._processText,\n            'text:delivered': this._processDelivered,\n            'text:seen': this._processSeen,\n            'audio:mute:on': this._processMuteForMedia,\n            'audio:mute:off': this._processMuteForMedia,\n            'message': this._processMessage,\n            'message:delivered': this._processDelivered,\n            'message:seen': this._processSeen,\n            'message:submitted': this._processSubmitted,\n            'message:rejected': this._processRejected,\n            'message:undeliverable': this._processUndeliverable\n        };\n    }\n    /**\n      * Handle and event.\n      *\n      * Identify the type of the event,\n      * create the corresponding Class instance\n      * emit to the corresponding Objects\n      * @param {object} event\n      * @private\n    */\n    handleEvent(event) {\n        if (this._handleEventMap.hasOwnProperty(event.type)) {\n            return this._handleEventMap[event.type].call(this, event) || new nxmEvent_1.default(this.conversation, event);\n        }\n        return new nxmEvent_1.default(this.conversation, event);\n    }\n    /**\n      * Mark the requested event as delivered\n      * use that event as constructed to update the local events' map\n        * @param {object} event\n      * @returns the NXMEvent that is marked as delivered\n      * @private\n    */\n    _processDelivered(event) {\n        let event_to_mark = this.conversation.events.get(event.body.event_id);\n        if (event_to_mark) {\n            event_to_mark.state = event_to_mark.state || {};\n            event_to_mark.state.delivered_to = event_to_mark.state.delivered_to || {};\n            event_to_mark.state.delivered_to[event.from] = event.timestamp;\n            return event_to_mark;\n        }\n        else {\n            this.log.warn('NXMEvent not found');\n            return null;\n        }\n    }\n    /**\n      * Delete the requested event\n      * empty the payload of the event (text, image or message)\n      * use that event as constructed to update the local events map\n      * @param {object} event\n      * @returns the deleted events\n      * @private\n    */\n    _processDelete(event) {\n        var _a, _b;\n        let event_to_delete = this.conversation.events.get((_b = (_a = event) === null || _a === void 0 ? void 0 : _a.body) === null || _b === void 0 ? void 0 : _b.event_id);\n        if (event_to_delete) {\n            if (event_to_delete.body.text)\n                event_to_delete.body.text = '';\n            if (event_to_delete.body.representations)\n                event_to_delete.body.representations = '';\n            event_to_delete.body.timestamp = {\n                deleted: event.timestamp\n            };\n            return event_to_delete;\n        }\n        else {\n            this.log.warn('NXMEvent not found');\n            return null;\n        }\n    }\n    /**\n      * Return an ImageEvent with the corresponding image data\n      * @param {object} event\n      * @returns {ImageEvent}\n    */\n    _processImage(event) {\n        var _a;\n        const imageEvent = new image_event_1.default(this.conversation, event);\n        // Automatically send a delivery\n        // avoid sending delivered to our own events\n        if (((_a = this.conversation.me) === null || _a === void 0 ? void 0 : _a.id) !== imageEvent.from) {\n            imageEvent.delivered();\n        }\n        return imageEvent;\n    }\n    /**\n      * Handle events for member state changes (joined, invited, left)\n      * in conversation level.\n      * Other members are going through here too.\n      * For .me member initial event (join, invite) use the application listener\n        * @param {object} event\n      * @returns {NXMEvent}\n      * @private\n    */\n    _processMember(event) {\n        // needs to first process the call state and then alter the member\n        if (this.application.calls.has(this.conversation.id)) {\n            let call = this.application.calls.get(this.conversation.id);\n            call._handleStatusChange(event);\n        }\n        if (this.conversation.members.has(event.from))\n            this.conversation.members.get(event.from)._handleEvent(event);\n        return new nxmEvent_1.default(this.conversation, event);\n    }\n    /**\n     * Handle events for leg status updates in conversation level.\n     * Other member's legs are going through here too.\n     * @param {object} event\n     * @returns {NXMEvent}\n     * @private\n    */\n    _processLegStatus(event) {\n        if (this.conversation.members.has(event.from))\n            this.conversation.members.get(event.from)._handleEvent(event);\n        return new nxmEvent_1.default(this.conversation, event);\n    }\n    /**\n      * Handle member:media events\n      * use a call object if and the member object\n        * @param {object} event\n      * @private\n    */\n    _processMedia(event) {\n        if (this.conversation.members.has(event.from))\n            this.conversation.members.get(event.from)._handleEvent(event);\n        return null;\n    }\n    /**\n      * Handle *:mute:* events\n        * @param {object} event\n      * @private\n    */\n    _processMuteForMedia(event) {\n        if (this.conversation.media.rtcObjects[event.body.rtc_id]) {\n            event.streamIndex = this.conversation.media.rtcObjects[event.body.rtc_id].streamIndex;\n        }\n        else {\n            this.log.warn('No audio stream was found');\n        }\n        return null;\n    }\n    /**\n      * Mark the requested event as seen\n      * use that event as constructed to update the local Events map\n        * @param {object} event\n      * @private\n    */\n    _processSeen(event) {\n        let event_to_mark = this.conversation.events.get(event.body.event_id);\n        if (event_to_mark) {\n            event_to_mark.state = event_to_mark.state || {};\n            event_to_mark.state.seen_by = event_to_mark.state.seen_by || {};\n            event_to_mark.state.seen_by[event.from] = event.timestamp;\n            return event_to_mark;\n        }\n        else {\n            this.log.warn('NXMEvent not found');\n            return null;\n        }\n    }\n    /**\n      * Create the TextEvent object and trigger .delivered()\n        * @param {object} event\n      * @private\n    */\n    _processText(event) {\n        var _a, _b;\n        const textEvent = new text_event_1.default(this.conversation, event);\n        // Automatically send a delivery\n        // avoid sending delivered to our own events\n        if (((_b = (_a = this.conversation) === null || _a === void 0 ? void 0 : _a.me) === null || _b === void 0 ? void 0 : _b.id) !== textEvent.from) {\n            textEvent.delivered();\n        }\n        return textEvent;\n    }\n    /**\n      * Create the MessageEvent object and trigger .delivered()\n        * @param {object} event\n      * @private\n    */\n    _processMessage(event) {\n        var _a, _b;\n        const messageEvent = new message_event_1.default(this.conversation, event);\n        // Automatically send a delivery\n        // avoid sending delivered to our own events\n        if (((_b = (_a = this.conversation) === null || _a === void 0 ? void 0 : _a.me) === null || _b === void 0 ? void 0 : _b.id) !== messageEvent.from) {\n            messageEvent.delivered();\n        }\n        return messageEvent;\n    }\n    /**\n      * Mark the requested event as submitted\n      * use that event as constructed to update the local Events map\n        * @param {object} event\n      * @private\n    */\n    _processSubmitted(event) {\n        let event_to_mark = this.conversation.events.get(event.body.event_id);\n        if (event_to_mark) {\n            event_to_mark.state = event_to_mark.state || {};\n            event_to_mark.state.submitted_to = event_to_mark.state.submitted_to || {};\n            event_to_mark.state.submitted_to[event.from] = event.timestamp;\n            return event_to_mark;\n        }\n        else {\n            this.log.warn('NXMEvent not found');\n            return null;\n        }\n    }\n    /**\n      * Mark the requested event as rejected\n      * use that event as constructed to update the local Events map\n        * @param {object} event\n      * @private\n    */\n    _processRejected(event) {\n        let event_to_mark = this.conversation.events.get(event.body.event_id);\n        if (event_to_mark) {\n            event_to_mark.state = event_to_mark.state || {};\n            event_to_mark.state.rejected_by = event_to_mark.state.rejected_by || {};\n            event_to_mark.state.rejected_by[event.from] = event.timestamp;\n            return event_to_mark;\n        }\n        else {\n            this.log.warn('NXMEvent not found');\n            return null;\n        }\n    }\n    /**\n      * Mark the requested event as undeliverable\n      * use that event as constructed to update the local Events map\n        * @param {object} event\n      * @private\n    */\n    _processUndeliverable(event) {\n        let event_to_mark = this.conversation.events.get(event.body.event_id);\n        if (event_to_mark) {\n            event_to_mark.state = event_to_mark.state || {};\n            event_to_mark.state.undeliverable_to = event_to_mark.state.undeliverable_to || {};\n            event_to_mark.state.undeliverable_to[event.from] = event.timestamp;\n            return event_to_mark;\n        }\n        else {\n            this.log.warn('NXMEvent not found');\n            return null;\n        }\n    }\n}\nexports.default = ConversationEventHandler;\nmodule.exports = ConversationEventHandler;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}