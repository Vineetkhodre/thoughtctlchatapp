{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar https = require(\"https\");\nvar http = require(\"http\");\nvar request = require(\"request\");\nvar querystring = require(\"query-string\");\nvar URL = require(\"url\").URL;\nvar isValidUrl = s => {\n  if (!s || s === null) return false;\n  try {\n    if (s === \"api.nexmo.com\") return s;\n    var o = new URL(s);\n    return o.host;\n  } catch (err) {\n    return false;\n  }\n};\nclass HttpClient {\n  constructor(options, credentials) {\n    var hostOverride = isValidUrl(options.host);\n    this.credentials = credentials;\n    this.host = hostOverride ? hostOverride : \"rest.nexmo.com\";\n    this.port = options.port || 443;\n    this.https = options.https || https;\n    this.http = options.http || http;\n    this.headers = {\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n      Accept: \"application/json\"\n    };\n    this.logger = options.logger;\n    this.timeout = options.timeout;\n    this.requestLib = request;\n    if (options.userAgent) {\n      this.headers[\"User-Agent\"] = options.userAgent;\n    }\n  }\n  request(endpoint, method, callback) {\n    var skipJsonParsing = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    var customResponseParser = arguments.length > 4 ? arguments[4] : undefined;\n    if (typeof method === \"function\") {\n      callback = method;\n      endpoint.method = endpoint.method || \"GET\";\n    } else if (typeof method !== \"undefined\") {\n      endpoint.method = method;\n    }\n    var options = {\n      host: endpoint.host ? endpoint.host : this.host,\n      port: this.port,\n      path: endpoint.path,\n      method: endpoint.method,\n      headers: Object.assign({}, this.headers, endpoint.headers)\n    };\n    if (this.timeout !== undefined) {\n      options.timeout = this.timeout;\n    } // Allow existing headers to be overridden\n    // Allow new headers to be added\n\n    if (endpoint.headers) {\n      Object.keys(endpoint.headers).forEach(function (key) {\n        options.headers[key] = endpoint.headers[key];\n      });\n    } // the output here can return one of two options:\n    // - Using `sig` & `timestamp` in the JSON body\n    // - Using `sig` & `timestamp` in the query string\n\n    if (this.credentials.signatureSecret && this.credentials.signatureMethod) {\n      // you must first add a timestamp\n      var params;\n      var splitPath;\n      var path; // determine if the response should be querystring or JSON body\n\n      if (!endpoint.body) {\n        // this branch is for query string\n        splitPath = options.path.split(/\\?(.+)/);\n        path = splitPath[0];\n        params = querystring.parse(splitPath[1]);\n      } else {\n        // this section is for JSON body\n        params = JSON.parse(endpoint.body);\n      } // add timestamp if not already present\n\n      if (!params.timestamp) {\n        params.timestamp = (new Date().getTime() / 1000 | 0).toString();\n      } // strip API Secret\n\n      delete params.api_secret;\n      var hash = this.credentials.generateSignature(params);\n      params.sig = hash;\n      if (!endpoint.body) {\n        //this section is for querystring\n        var query = \"\"; // rebuild query\n\n        Object.keys(params).sort().forEach(key => {\n          query += \"&\" + key + \"=\" + encodeURI(params[key]);\n        }); // replace the first & with ?\n\n        query = query.replace(/&/i, \"?\");\n        options.path = \"\".concat(path).concat(query);\n      } else {\n        endpoint.body = JSON.stringify(params);\n      }\n    }\n    this.logger.info(\"Request:\", options, \"\\nBody:\", endpoint.body);\n    var request;\n    if (options.port === 443) {\n      request = this.https.request(options);\n    } else {\n      request = this.http.request(options);\n    }\n    request.end(endpoint.body); // Keep an array of String or Buffers,\n    // depending on content type (binary or JSON) of response\n\n    var responseData = [];\n    request.on(\"response\", response => {\n      var isBinary = response.headers[\"content-type\"] === \"application/octet-stream\";\n      if (!isBinary) {\n        response.setEncoding(\"utf8\");\n      }\n      response.on(\"data\", chunk => {\n        responseData.push(chunk);\n      });\n      response.on(\"end\", () => {\n        this.logger.info(\"response ended:\", response.statusCode);\n        if (callback) {\n          if (isBinary) {\n            responseData = Buffer.concat(responseData);\n          }\n          this.__parseResponse(response, responseData, endpoint.method, callback, skipJsonParsing, customResponseParser);\n        }\n      });\n      response.on(\"close\", e => {\n        if (e) {\n          this.logger.error(\"problem with API request detailed stacktrace below \");\n          this.logger.error(e);\n          callback(e);\n        }\n      });\n    });\n    request.on(\"error\", e => {\n      this.logger.error(\"problem with API request detailed stacktrace below \");\n      this.logger.error(e);\n      callback(e);\n    });\n  }\n  __parseResponse(httpResponse, data, method, callback, skipJsonParsing, customResponseParser) {\n    var isArrayOrBuffer = data instanceof Array || data instanceof Buffer;\n    if (!isArrayOrBuffer) {\n      throw new Error(\"data should be of type Array or Buffer\");\n    }\n    var status = httpResponse.statusCode;\n    var headers = httpResponse.headers;\n    var response = null;\n    var error = null;\n    try {\n      if (status >= 500) {\n        error = {\n          message: \"Server Error\",\n          statusCode: status\n        };\n      } else if (httpResponse.headers[\"content-type\"] === \"application/octet-stream\") {\n        response = data;\n      } else if (status === 429) {\n        // 429 does not return a parsable body\n        if (!headers[\"retry-after\"]) {\n          // retry based on allowed per second\n          var retryAfterMillis = method === \"POST\" ? 1000 / 2 : 1000 / 5;\n          headers[\"retry-after\"] = retryAfterMillis;\n        }\n        error = {\n          body: data.join(\"\")\n        };\n      } else if (status === 204) {\n        response = null;\n      } else if (status >= 400 || status < 200) {\n        error = {\n          body: JSON.parse(data.join(\"\")),\n          headers\n        };\n      } else if (method !== \"DELETE\") {\n        if (!!skipJsonParsing) {\n          response = data.join(\"\");\n        } else {\n          response = JSON.parse(data.join(\"\"));\n        }\n      } else {\n        response = data;\n      }\n    } catch (parseError) {\n      this.logger.error(parseError);\n      this.logger.error(\"could not convert API response to JSON, above error is ignored and raw API response is returned to client\");\n      this.logger.error(\"Raw Error message from API \");\n      this.logger.error(\"\\\"\".concat(data, \"\\\"\"));\n      error = {\n        status: status,\n        message: \"The API response could not be parsed.\",\n        body: data.join(\"\"),\n        parseError: parseError\n      };\n    }\n    if (error) {\n      error.statusCode = status;\n      error.headers = headers;\n    }\n    if (typeof callback === \"function\") {\n      if (typeof customResponseParser === \"function\") {\n        // don't try to parse the response on errors\n        if (response) {\n          response = customResponseParser(response);\n        }\n      }\n      callback(error, response);\n    }\n  }\n  _addLimitedAccessMessageToErrors(callback, limitedAccessStatus) {\n    return function (err, data) {\n      if (err && err.status == limitedAccessStatus) {\n        err._INFO_ = \"This endpoint may need activating on your account. Please email support@nexmo.com for more information\";\n      }\n      return callback(err, data);\n    };\n  }\n  get(path, params, callback) {\n    var useJwt = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    var useBasicAuth = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    if (!callback) {\n      if (typeof params == \"function\") {\n        callback = params;\n        params = {};\n      }\n    }\n    params = params || {};\n    if (!useJwt && !useBasicAuth) {\n      params[\"api_key\"] = this.credentials.apiKey;\n      params[\"api_secret\"] = this.credentials.apiSecret;\n    }\n    path = path + \"?\" + querystring.stringify(params);\n    var headers = {\n      \"Content-Type\": \"application/json\"\n    };\n    if (useJwt) {\n      headers[\"Authorization\"] = \"Bearer \".concat(this.credentials.generateJwt());\n    }\n    if (useBasicAuth) {\n      headers[\"Authorization\"] = \"Basic \".concat(Buffer.from(this.credentials.apiKey + \":\" + this.credentials.apiSecret).toString(\"base64\"));\n    }\n    this.request({\n      path: path,\n      headers\n    }, \"GET\", callback);\n  }\n  delete(path, callback, useJwt, useBasicAuth) {\n    var params = {};\n    if (!useJwt && !useBasicAuth) {\n      params[\"api_key\"] = this.credentials.apiKey;\n      params[\"api_secret\"] = this.credentials.apiSecret;\n    }\n    var headers = {};\n    if (useBasicAuth) {\n      headers[\"Authorization\"] = \"Basic \".concat(Buffer.from(this.credentials.apiKey + \":\" + this.credentials.apiSecret).toString(\"base64\"));\n    }\n    path = path + \"?\" + querystring.stringify(params);\n    this.request({\n      path: path,\n      headers\n    }, \"DELETE\", callback);\n  }\n  postFile(path, options, callback, useJwt) {\n    var qs = {};\n    if (!useJwt) {\n      qs[\"api_key\"] = this.credentials.apiKey;\n      qs[\"api_secret\"] = this.credentials.apiSecret;\n    }\n    if (Object.keys(qs).length) {\n      var joinChar = \"?\";\n      if (path.indexOf(joinChar) !== -1) {\n        joinChar = \"&\";\n      }\n      path = path + joinChar + querystring.stringify(qs);\n    }\n    var file = options.file;\n    delete options.file; // We don't send this as metadata\n\n    var formData = {};\n    if (file) {\n      formData[\"filedata\"] = {\n        value: file,\n        options: {\n          filename: options.filename || null\n        }\n      };\n    }\n    if (options.info) {\n      formData.info = JSON.stringify(options.info);\n    }\n    if (options.url) {\n      formData.url = options.url;\n    }\n    var protocol = this.port === 443 ? \"https://\" : \"http://\";\n    this.requestLib.post({\n      url: protocol + this.host + path,\n      formData: formData,\n      headers: {\n        Authorization: \"Bearer \".concat(this.credentials.generateJwt())\n      }\n    }, callback);\n  }\n  post(path, params, callback, useJwt, headers) {\n    var qs = {};\n    if (!useJwt) {\n      qs[\"api_key\"] = this.credentials.apiKey;\n      qs[\"api_secret\"] = this.credentials.apiSecret;\n    }\n    var joinChar = \"?\";\n    if (path.indexOf(joinChar) !== -1) {\n      joinChar = \"&\";\n    }\n    path = path + joinChar + querystring.stringify(qs);\n    headers = headers || {};\n    if (useJwt) {\n      headers[\"Authorization\"] = \"Bearer \".concat(this.credentials.generateJwt());\n    }\n    var encodedParams;\n    if (headers[\"Content-Type\"] == \"application/json\") {\n      encodedParams = JSON.stringify(params);\n    } else {\n      encodedParams = querystring.stringify(params);\n    }\n    this.request({\n      path,\n      body: encodedParams,\n      headers\n    }, \"POST\", callback);\n  }\n  postJson(path, params, callback, useJwt, useBasicAuth) {\n    var qs = {};\n    if (!useJwt && !useBasicAuth) {\n      qs[\"api_key\"] = this.credentials.apiKey;\n      qs[\"api_secret\"] = this.credentials.apiSecret;\n    }\n    var joinChar = \"?\";\n    if (path.indexOf(joinChar) !== -1) {\n      joinChar = \"&\";\n    }\n    path = path + joinChar + querystring.stringify(qs);\n    var headers = {\n      \"Content-Type\": \"application/json\"\n    };\n    if (useBasicAuth) {\n      headers[\"Authorization\"] = \"Basic \".concat(Buffer.from(this.credentials.apiKey + \":\" + this.credentials.apiSecret).toString(\"base64\"));\n    }\n    this.request({\n      path: path,\n      body: JSON.stringify(params),\n      headers\n    }, \"POST\", callback);\n  }\n  postUseQueryString(path, params, callback, useJwt) {\n    params = params || {};\n    if (!useJwt) {\n      params[\"api_key\"] = this.credentials.apiKey;\n      params[\"api_secret\"] = this.credentials.apiSecret;\n    }\n    path = path + \"?\" + querystring.stringify(params);\n    this.request({\n      path: path\n    }, \"POST\", callback);\n  }\n}\nvar _default = HttpClient;\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"names":["https","require","http","request","querystring","URL","isValidUrl","s","o","host","err","HttpClient","constructor","options","credentials","hostOverride","port","headers","Accept","logger","timeout","requestLib","userAgent","endpoint","method","callback","skipJsonParsing","arguments","length","undefined","customResponseParser","path","Object","assign","keys","forEach","key","signatureSecret","signatureMethod","params","splitPath","body","split","parse","JSON","timestamp","Date","getTime","toString","api_secret","hash","generateSignature","sig","query","sort","encodeURI","replace","concat","stringify","info","end","responseData","on","response","isBinary","setEncoding","chunk","push","statusCode","Buffer","__parseResponse","e","error","httpResponse","data","isArrayOrBuffer","Array","Error","status","message","retryAfterMillis","join","parseError","_addLimitedAccessMessageToErrors","limitedAccessStatus","_INFO_","get","useJwt","useBasicAuth","apiKey","apiSecret","generateJwt","from","delete","postFile","qs","joinChar","indexOf","file","formData","value","filename","url","protocol","post","Authorization","encodedParams","postJson","postUseQueryString"],"sources":["/Users/vineetkhodre/react-workspace/thoughtctlchatapp/node_modules/@vonage/server-sdk/src/HttpClient.js"],"sourcesContent":["var https = require(\"https\");\nvar http = require(\"http\");\nvar request = require(\"request\");\nvar querystring = require(\"query-string\");\nvar URL = require(\"url\").URL;\n\nconst isValidUrl = (s) => {\n  if (!s || s === null) return false;\n\n  try {\n    if (s === \"api.nexmo.com\") return s;\n    let o = new URL(s);\n    return o.host;\n  } catch (err) {\n    return false;\n  }\n};\n\nclass HttpClient {\n  constructor(options, credentials) {\n    let hostOverride = isValidUrl(options.host);\n    this.credentials = credentials;\n    this.host = hostOverride ? hostOverride : `rest.nexmo.com`;\n    this.port = options.port || 443;\n    this.https = options.https || https;\n    this.http = options.http || http;\n    this.headers = {\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n      Accept: \"application/json\",\n    };\n    this.logger = options.logger;\n    this.timeout = options.timeout;\n    this.requestLib = request;\n\n    if (options.userAgent) {\n      this.headers[\"User-Agent\"] = options.userAgent;\n    }\n  }\n\n  request(\n    endpoint,\n    method,\n    callback,\n    skipJsonParsing = false,\n    customResponseParser\n  ) {\n    if (typeof method === \"function\") {\n      callback = method;\n      endpoint.method = endpoint.method || \"GET\";\n    } else if (typeof method !== \"undefined\") {\n      endpoint.method = method;\n    }\n\n    var options = {\n      host: endpoint.host ? endpoint.host : this.host,\n      port: this.port,\n      path: endpoint.path,\n      method: endpoint.method,\n      headers: Object.assign({}, this.headers, endpoint.headers),\n    };\n\n    if (this.timeout !== undefined) {\n      options.timeout = this.timeout;\n    }\n\n    // Allow existing headers to be overridden\n    // Allow new headers to be added\n    if (endpoint.headers) {\n      Object.keys(endpoint.headers).forEach(function (key) {\n        options.headers[key] = endpoint.headers[key];\n      });\n    }\n\n    // the output here can return one of two options:\n    // - Using `sig` & `timestamp` in the JSON body\n    // - Using `sig` & `timestamp` in the query string\n\n    if (this.credentials.signatureSecret && this.credentials.signatureMethod) {\n      // you must first add a timestamp\n      let params;\n      let splitPath;\n      let path;\n\n      // determine if the response should be querystring or JSON body\n      if (!endpoint.body) {\n        // this branch is for query string\n        splitPath = options.path.split(/\\?(.+)/);\n        path = splitPath[0];\n\n        params = querystring.parse(splitPath[1]);\n      } else {\n        // this section is for JSON body\n        params = JSON.parse(endpoint.body);\n      }\n\n      // add timestamp if not already present\n      if (!params.timestamp) {\n        params.timestamp = ((new Date().getTime() / 1000) | 0).toString();\n      }\n\n      // strip API Secret\n      delete params.api_secret;\n\n      let hash = this.credentials.generateSignature(params);\n      params.sig = hash;\n\n      if (!endpoint.body) {\n        //this section is for querystring\n        let query = \"\";\n\n        // rebuild query\n        Object.keys(params)\n          .sort()\n          .forEach((key) => {\n            query += \"&\" + key + \"=\" + encodeURI(params[key]);\n          });\n\n        // replace the first & with ?\n        query = query.replace(/&/i, \"?\");\n\n        options.path = `${path}${query}`;\n      } else {\n        endpoint.body = JSON.stringify(params);\n      }\n    }\n\n    this.logger.info(\"Request:\", options, \"\\nBody:\", endpoint.body);\n\n    var request;\n\n    if (options.port === 443) {\n      request = this.https.request(options);\n    } else {\n      request = this.http.request(options);\n    }\n\n    request.end(endpoint.body);\n\n    // Keep an array of String or Buffers,\n    // depending on content type (binary or JSON) of response\n    var responseData = [];\n\n    request.on(\"response\", (response) => {\n      var isBinary =\n        response.headers[\"content-type\"] === \"application/octet-stream\";\n      if (!isBinary) {\n        response.setEncoding(\"utf8\");\n      }\n\n      response.on(\"data\", (chunk) => {\n        responseData.push(chunk);\n      });\n\n      response.on(\"end\", () => {\n        this.logger.info(\"response ended:\", response.statusCode);\n        if (callback) {\n          if (isBinary) {\n            responseData = Buffer.concat(responseData);\n          }\n\n          this.__parseResponse(\n            response,\n            responseData,\n            endpoint.method,\n            callback,\n            skipJsonParsing,\n            customResponseParser\n          );\n        }\n      });\n      response.on(\"close\", (e) => {\n        if (e) {\n          this.logger.error(\n            \"problem with API request detailed stacktrace below \"\n          );\n          this.logger.error(e);\n          callback(e);\n        }\n      });\n    });\n    request.on(\"error\", (e) => {\n      this.logger.error(\"problem with API request detailed stacktrace below \");\n      this.logger.error(e);\n      callback(e);\n    });\n  }\n\n  __parseResponse(\n    httpResponse,\n    data,\n    method,\n    callback,\n    skipJsonParsing,\n    customResponseParser\n  ) {\n    const isArrayOrBuffer = data instanceof Array || data instanceof Buffer;\n    if (!isArrayOrBuffer) {\n      throw new Error(\"data should be of type Array or Buffer\");\n    }\n\n    const status = httpResponse.statusCode;\n    const headers = httpResponse.headers;\n\n    let response = null;\n    var error = null;\n\n    try {\n      if (status >= 500) {\n        error = {\n          message: \"Server Error\",\n          statusCode: status,\n        };\n      } else if (\n        httpResponse.headers[\"content-type\"] === \"application/octet-stream\"\n      ) {\n        response = data;\n      } else if (status === 429) {\n        // 429 does not return a parsable body\n        if (!headers[\"retry-after\"]) {\n          // retry based on allowed per second\n          const retryAfterMillis = method === \"POST\" ? 1000 / 2 : 1000 / 5;\n          headers[\"retry-after\"] = retryAfterMillis;\n        }\n        error = {\n          body: data.join(\"\"),\n        };\n      } else if (status === 204) {\n        response = null;\n      } else if (status >= 400 || status < 200) {\n        error = {\n          body: JSON.parse(data.join(\"\")),\n          headers,\n        };\n      } else if (method !== \"DELETE\") {\n        if (!!skipJsonParsing) {\n          response = data.join(\"\");\n        } else {\n          response = JSON.parse(data.join(\"\"));\n        }\n      } else {\n        response = data;\n      }\n    } catch (parseError) {\n      this.logger.error(parseError);\n      this.logger.error(\n        \"could not convert API response to JSON, above error is ignored and raw API response is returned to client\"\n      );\n      this.logger.error(\"Raw Error message from API \");\n      this.logger.error(`\"${data}\"`);\n\n      error = {\n        status: status,\n        message: \"The API response could not be parsed.\",\n        body: data.join(\"\"),\n        parseError: parseError,\n      };\n    }\n\n    if (error) {\n      error.statusCode = status;\n      error.headers = headers;\n    }\n\n    if (typeof callback === \"function\") {\n      if (typeof customResponseParser === \"function\") {\n        // don't try to parse the response on errors\n        if (response) {\n          response = customResponseParser(response);\n        }\n      }\n      callback(error, response);\n    }\n  }\n\n  _addLimitedAccessMessageToErrors(callback, limitedAccessStatus) {\n    return function (err, data) {\n      if (err && err.status == limitedAccessStatus) {\n        err._INFO_ =\n          \"This endpoint may need activating on your account. Please email support@nexmo.com for more information\";\n      }\n\n      return callback(err, data);\n    };\n  }\n\n  get(path, params, callback, useJwt = false, useBasicAuth = false) {\n    if (!callback) {\n      if (typeof params == \"function\") {\n        callback = params;\n        params = {};\n      }\n    }\n\n    params = params || {};\n    if (!useJwt && !useBasicAuth) {\n      params[\"api_key\"] = this.credentials.apiKey;\n      params[\"api_secret\"] = this.credentials.apiSecret;\n    }\n\n    path = path + \"?\" + querystring.stringify(params);\n\n    const headers = {\n      \"Content-Type\": \"application/json\",\n    };\n    if (useJwt) {\n      headers[\"Authorization\"] = `Bearer ${this.credentials.generateJwt()}`;\n    }\n    if (useBasicAuth) {\n      headers[\"Authorization\"] = `Basic ${Buffer.from(\n        this.credentials.apiKey + \":\" + this.credentials.apiSecret\n      ).toString(\"base64\")}`;\n    }\n\n    this.request(\n      {\n        path: path,\n        headers,\n      },\n      \"GET\",\n      callback\n    );\n  }\n\n  delete(path, callback, useJwt, useBasicAuth) {\n    let params = {};\n    if (!useJwt && !useBasicAuth) {\n      params[\"api_key\"] = this.credentials.apiKey;\n      params[\"api_secret\"] = this.credentials.apiSecret;\n    }\n\n    let headers = {};\n\n    if (useBasicAuth) {\n      headers[\"Authorization\"] = `Basic ${Buffer.from(\n        this.credentials.apiKey + \":\" + this.credentials.apiSecret\n      ).toString(\"base64\")}`;\n    }\n    path = path + \"?\" + querystring.stringify(params);\n\n    this.request(\n      {\n        path: path,\n        headers,\n      },\n      \"DELETE\",\n      callback\n    );\n  }\n\n  postFile(path, options, callback, useJwt) {\n    let qs = {};\n    if (!useJwt) {\n      qs[\"api_key\"] = this.credentials.apiKey;\n      qs[\"api_secret\"] = this.credentials.apiSecret;\n    }\n\n    if (Object.keys(qs).length) {\n      let joinChar = \"?\";\n      if (path.indexOf(joinChar) !== -1) {\n        joinChar = \"&\";\n      }\n      path = path + joinChar + querystring.stringify(qs);\n    }\n\n    const file = options.file;\n    delete options.file; // We don't send this as metadata\n\n    const formData = {};\n\n    if (file) {\n      formData[\"filedata\"] = {\n        value: file,\n        options: {\n          filename: options.filename || null,\n        },\n      };\n    }\n\n    if (options.info) {\n      formData.info = JSON.stringify(options.info);\n    }\n\n    if (options.url) {\n      formData.url = options.url;\n    }\n\n    let protocol = this.port === 443 ? \"https://\" : \"http://\";\n\n    this.requestLib.post(\n      {\n        url: protocol + this.host + path,\n        formData: formData,\n        headers: {\n          Authorization: `Bearer ${this.credentials.generateJwt()}`,\n        },\n      },\n      callback\n    );\n  }\n\n  post(path, params, callback, useJwt, headers) {\n    let qs = {};\n    if (!useJwt) {\n      qs[\"api_key\"] = this.credentials.apiKey;\n      qs[\"api_secret\"] = this.credentials.apiSecret;\n    }\n\n    let joinChar = \"?\";\n    if (path.indexOf(joinChar) !== -1) {\n      joinChar = \"&\";\n    }\n\n    path = path + joinChar + querystring.stringify(qs);\n\n    headers = headers || {};\n    if (useJwt) {\n      headers[\"Authorization\"] = `Bearer ${this.credentials.generateJwt()}`;\n    }\n\n    let encodedParams;\n    if (headers[\"Content-Type\"] == \"application/json\") {\n      encodedParams = JSON.stringify(params);\n    } else {\n      encodedParams = querystring.stringify(params);\n    }\n\n    this.request({ path, body: encodedParams, headers }, \"POST\", callback);\n  }\n\n  postJson(path, params, callback, useJwt, useBasicAuth) {\n    let qs = {};\n    if (!useJwt && !useBasicAuth) {\n      qs[\"api_key\"] = this.credentials.apiKey;\n      qs[\"api_secret\"] = this.credentials.apiSecret;\n    }\n\n    let joinChar = \"?\";\n    if (path.indexOf(joinChar) !== -1) {\n      joinChar = \"&\";\n    }\n\n    path = path + joinChar + querystring.stringify(qs);\n\n    let headers = {\n      \"Content-Type\": \"application/json\",\n    };\n    if (useBasicAuth) {\n      headers[\"Authorization\"] = `Basic ${Buffer.from(\n        this.credentials.apiKey + \":\" + this.credentials.apiSecret\n      ).toString(\"base64\")}`;\n    }\n\n    this.request(\n      {\n        path: path,\n        body: JSON.stringify(params),\n        headers,\n      },\n      \"POST\",\n      callback\n    );\n  }\n\n  postUseQueryString(path, params, callback, useJwt) {\n    params = params || {};\n    if (!useJwt) {\n      params[\"api_key\"] = this.credentials.apiKey;\n      params[\"api_secret\"] = this.credentials.apiSecret;\n    }\n\n    path = path + \"?\" + querystring.stringify(params);\n    this.request(\n      {\n        path: path,\n      },\n      \"POST\",\n      callback\n    );\n  }\n}\n\nexport default HttpClient;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}