{"ast":null,"code":"'use strict';\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\n * Nexmo Client SDK\n *  Application Events Handler\n *\n * Copyright (c) Nexmo Inc.\n */\nconst loglevel_1 = require(\"loglevel\");\nconst nxmEvent_1 = __importDefault(require(\"../events/nxmEvent\"));\nconst nxmCall_1 = __importDefault(require(\"../modules/nxmCall\"));\nconst utils_1 = __importDefault(require(\"../utils\"));\nconst rtc_helper_1 = __importDefault(require(\"../modules/rtc_helper\"));\n/**\n * Handle Application Events\n *\n * @class ApplicationEventsHandler\n * @param {Application} application\n * @param {Conversation} conversation\n * @private\n*/\nclass ApplicationEventsHandler {\n  constructor(application) {\n    this.log = loglevel_1.getLogger(this.constructor.name);\n    this.application = application;\n    this._handleApplicationEventMap = {\n      'member:joined': this._processMemberJoined,\n      'member:invited': this._processMemberInvited\n    };\n  }\n  /**\n    * Handle and event.\n    *\n    * Update the event to map local generated events\n    * in case we need a more specific event to pass in the application listener\n    * or f/w the event as it comes\n    * @param {object} event\n    * @private\n  */\n  handleEvent(event) {\n    const conversation = this.application.conversations.get(event.cid);\n    const copied_event = Object.assign({}, event);\n    if (this._handleApplicationEventMap.hasOwnProperty(event.type)) {\n      return this._handleApplicationEventMap[event.type].call(this, conversation, new nxmEvent_1.default(conversation, copied_event), event);\n    }\n    return new nxmEvent_1.default(conversation, copied_event);\n  }\n  /**\n    * case: call to PSTN, after knocking event we receive joined\n    * @private\n  */\n  _processMemberJoined(conversation, event, raw_event) {\n    try {\n      if (event.body.channel && this.application._call_draft_list.has(event.body.channel.id)) {\n        this.log.debug(\"_processMemberJoined: outbound serverCall from sdk\", {\n          event\n        });\n        const nxmCall = this.application._call_draft_list.get(event.body.channel.id);\n        let pc = ((nxmCall.rtcObjects || {})[event.body.channel.id] || {}).pc;\n        nxmCall._setFrom(conversation.me);\n        nxmCall._setupConversationObject(conversation, event.body.channel.id);\n        // add the media objects to new conversation from placeholder in call\n        conversation.media._attachEndingEventHandlers();\n        // Checking to see if placeholder NxmCall has rtcObject, pc or activeStreams while new conversation does not and if so add\n        // to new conversation the missing rtcObject, pc or activeStream\n        if (Object.entries(conversation.media.rtcObjects).length === 0 && Object.entries(nxmCall.rtcObjects).length !== 0) {\n          Object.assign(conversation.media.rtcObjects, nxmCall.rtcObjects);\n        }\n        if (!conversation.media.pc && pc) {\n          Object.assign(conversation.media.pc = pc);\n        }\n        if (conversation.application.activeStreams.length === 0 && nxmCall.application.activeStreams.length > 0) {\n          conversation.application.activeStreams = nxmCall.application.activeStreams;\n        }\n        delete nxmCall.client_ref;\n        delete nxmCall.knocking_id;\n        // if rtcStats on call object place on media object as well\n        if (nxmCall.rtcStats) {\n          conversation.media.rtcStats = nxmCall.rtcStats;\n        }\n        // remove the leg_id from the call_draft_list\n        this.application._call_draft_list.delete(event.body.channel.id);\n        this.application.calls.set(conversation.id, nxmCall);\n        nxmCall._handleStatusChange(event);\n        this.log.debug(\"_processMemberJoined: processedCall \", {\n          nxmCall\n        });\n        if (conversation.members && event.body.member_id) {\n          const member = conversation.members.get(event.body.member_id);\n          if (member) this.application.emit('member:call', member, nxmCall);\n        }\n        // Supports old way of listening for the media stream after the conversation is set up even though its already there\n        setTimeout(() => rtc_helper_1.default.emitMediaStream(conversation.me, pc, nxmCall.stream), 50);\n      }\n      this.log.debug(\"_processMemberJoined: default member joined: \", {\n        event\n      });\n      return event;\n    } catch (e) {\n      this.log.error(\"_processMemberJoined: \", {\n        e\n      });\n    }\n  }\n  _processMemberInvited(conversation, event) {\n    var _a, _b, _c, _d, _e, _f;\n    try {\n      if (!conversation) {\n        this.log.warn(`no conversation object for ${event.type}`);\n        return event;\n      }\n      // no need to process the event if it's not media related invite, or the member is us\n      if (((_a = conversation.me) === null || _a === void 0 ? void 0 : _a.user.id) === event.body.invited_by || !((_c = (_b = event.body.user.media) === null || _b === void 0 ? void 0 : _b.audio_settings) === null || _c === void 0 ? void 0 : _c.enabled)) {\n        return event;\n      }\n      const caller = utils_1.default.getMemberNumberFromEventOrNull(event.body.channel) || utils_1.default.getMemberFromNameOrNull(conversation, event.body.invited_by) || 'unknown';\n      const nxmCall = new nxmCall_1.default(this.application, conversation, caller);\n      this.application.calls.set(conversation.id, nxmCall);\n      if (((_d = event.body) === null || _d === void 0 ? void 0 : _d.sdp) && this.application.session.config.enableInboundOffer) {\n        nxmCall._setOffer({\n          sdp: event.body.sdp,\n          leg_id: event.body.channel.id\n        });\n      }\n      // (VAPI call)\n      if (!((_e = conversation.display_name) === null || _e === void 0 ? void 0 : _e.startsWith('CALL_'))) {\n        nxmCall._handleStatusChange(event);\n      }\n      this.application.emit('member:call', this.application.conversations.get(event.cid).members.get((_f = event.body) === null || _f === void 0 ? void 0 : _f.member_id), nxmCall);\n      return event;\n    } catch (e) {\n      this.log.error(\"_processMemberInvited: \", {\n        e\n      });\n    }\n  }\n}\nexports.default = ApplicationEventsHandler;\nmodule.exports = ApplicationEventsHandler;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","loglevel_1","require","nxmEvent_1","nxmCall_1","utils_1","rtc_helper_1","ApplicationEventsHandler","constructor","application","log","getLogger","name","_handleApplicationEventMap","_processMemberJoined","_processMemberInvited","handleEvent","event","conversation","conversations","get","cid","copied_event","assign","hasOwnProperty","type","call","default","raw_event","body","channel","_call_draft_list","has","id","debug","nxmCall","pc","rtcObjects","_setFrom","me","_setupConversationObject","media","_attachEndingEventHandlers","entries","length","activeStreams","client_ref","knocking_id","rtcStats","delete","calls","set","_handleStatusChange","members","member_id","member","emit","setTimeout","emitMediaStream","stream","e","error","_a","_b","_c","_d","_e","_f","warn","user","invited_by","audio_settings","enabled","caller","getMemberNumberFromEventOrNull","getMemberFromNameOrNull","sdp","session","config","enableInboundOffer","_setOffer","leg_id","display_name","startsWith","module"],"sources":["/Users/vineetkhodre/react-workspace/thoughtctlchatapp/client/node_modules/nexmo-client/dist/handlers/application_events.js"],"sourcesContent":["'use strict';\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*\n * Nexmo Client SDK\n *  Application Events Handler\n *\n * Copyright (c) Nexmo Inc.\n */\nconst loglevel_1 = require(\"loglevel\");\nconst nxmEvent_1 = __importDefault(require(\"../events/nxmEvent\"));\nconst nxmCall_1 = __importDefault(require(\"../modules/nxmCall\"));\nconst utils_1 = __importDefault(require(\"../utils\"));\nconst rtc_helper_1 = __importDefault(require(\"../modules/rtc_helper\"));\n/**\n * Handle Application Events\n *\n * @class ApplicationEventsHandler\n * @param {Application} application\n * @param {Conversation} conversation\n * @private\n*/\nclass ApplicationEventsHandler {\n    constructor(application) {\n        this.log = loglevel_1.getLogger(this.constructor.name);\n        this.application = application;\n        this._handleApplicationEventMap = {\n            'member:joined': this._processMemberJoined,\n            'member:invited': this._processMemberInvited\n        };\n    }\n    /**\n      * Handle and event.\n      *\n      * Update the event to map local generated events\n      * in case we need a more specific event to pass in the application listener\n      * or f/w the event as it comes\n      * @param {object} event\n      * @private\n    */\n    handleEvent(event) {\n        const conversation = this.application.conversations.get(event.cid);\n        const copied_event = Object.assign({}, event);\n        if (this._handleApplicationEventMap.hasOwnProperty(event.type)) {\n            return this._handleApplicationEventMap[event.type].call(this, conversation, new nxmEvent_1.default(conversation, copied_event), event);\n        }\n        return new nxmEvent_1.default(conversation, copied_event);\n    }\n    /**\n      * case: call to PSTN, after knocking event we receive joined\n      * @private\n    */\n    _processMemberJoined(conversation, event, raw_event) {\n        try {\n            if (event.body.channel && this.application._call_draft_list.has(event.body.channel.id)) {\n                this.log.debug(\"_processMemberJoined: outbound serverCall from sdk\", { event });\n                const nxmCall = this.application._call_draft_list.get(event.body.channel.id);\n                let pc = ((nxmCall.rtcObjects || {})[event.body.channel.id] || {}).pc;\n                nxmCall._setFrom(conversation.me);\n                nxmCall._setupConversationObject(conversation, event.body.channel.id);\n                // add the media objects to new conversation from placeholder in call\n                conversation.media._attachEndingEventHandlers();\n                // Checking to see if placeholder NxmCall has rtcObject, pc or activeStreams while new conversation does not and if so add\n                // to new conversation the missing rtcObject, pc or activeStream\n                if (Object.entries(conversation.media.rtcObjects).length === 0 && Object.entries(nxmCall.rtcObjects).length !== 0) {\n                    Object.assign(conversation.media.rtcObjects, nxmCall.rtcObjects);\n                }\n                if (!conversation.media.pc && pc) {\n                    Object.assign(conversation.media.pc = pc);\n                }\n                if (conversation.application.activeStreams.length === 0 && nxmCall.application.activeStreams.length > 0) {\n                    conversation.application.activeStreams = nxmCall.application.activeStreams;\n                }\n                delete nxmCall.client_ref;\n                delete nxmCall.knocking_id;\n                // if rtcStats on call object place on media object as well\n                if (nxmCall.rtcStats) {\n                    conversation.media.rtcStats = nxmCall.rtcStats;\n                }\n                // remove the leg_id from the call_draft_list\n                this.application._call_draft_list.delete(event.body.channel.id);\n                this.application.calls.set(conversation.id, nxmCall);\n                nxmCall._handleStatusChange(event);\n                this.log.debug(\"_processMemberJoined: processedCall \", { nxmCall });\n                if (conversation.members && event.body.member_id) {\n                    const member = conversation.members.get(event.body.member_id);\n                    if (member)\n                        this.application.emit('member:call', member, nxmCall);\n                }\n                // Supports old way of listening for the media stream after the conversation is set up even though its already there\n                setTimeout(() => rtc_helper_1.default.emitMediaStream(conversation.me, pc, nxmCall.stream), 50);\n            }\n            this.log.debug(\"_processMemberJoined: default member joined: \", { event });\n            return event;\n        }\n        catch (e) {\n            this.log.error(\"_processMemberJoined: \", { e });\n        }\n    }\n    _processMemberInvited(conversation, event) {\n        var _a, _b, _c, _d, _e, _f;\n        try {\n            if (!conversation) {\n                this.log.warn(`no conversation object for ${event.type}`);\n                return event;\n            }\n            // no need to process the event if it's not media related invite, or the member is us\n            if ((((_a = conversation.me) === null || _a === void 0 ? void 0 : _a.user.id) === event.body.invited_by) || !((_c = (_b = event.body.user.media) === null || _b === void 0 ? void 0 : _b.audio_settings) === null || _c === void 0 ? void 0 : _c.enabled)) {\n                return event;\n            }\n            const caller = utils_1.default.getMemberNumberFromEventOrNull(event.body.channel) ||\n                utils_1.default.getMemberFromNameOrNull(conversation, event.body.invited_by) || 'unknown';\n            const nxmCall = new nxmCall_1.default(this.application, conversation, caller);\n            this.application.calls.set(conversation.id, nxmCall);\n            if (((_d = event.body) === null || _d === void 0 ? void 0 : _d.sdp) && this.application.session.config.enableInboundOffer) {\n                nxmCall._setOffer({ sdp: event.body.sdp, leg_id: event.body.channel.id });\n            }\n            // (VAPI call)\n            if (!((_e = conversation.display_name) === null || _e === void 0 ? void 0 : _e.startsWith('CALL_'))) {\n                nxmCall._handleStatusChange(event);\n            }\n            this.application.emit('member:call', this.application.conversations.get(event.cid).members.get((_f = event.body) === null || _f === void 0 ? void 0 : _f.member_id), nxmCall);\n            return event;\n        }\n        catch (e) {\n            this.log.error(\"_processMemberInvited: \", { e });\n        }\n    }\n}\nexports.default = ApplicationEventsHandler;\nmodule.exports = ApplicationEventsHandler;\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,eAAe,GAAI,IAAI,IAAI,IAAI,CAACA,eAAe,IAAK,UAAUC,GAAG,EAAE;EACnE,OAAQA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAID,GAAG,GAAG;IAAE,SAAS,EAAEA;EAAI,CAAC;AAC7D,CAAC;AACDE,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,GAAGC,OAAO,CAAC,UAAU,CAAC;AACtC,MAAMC,UAAU,GAAGT,eAAe,CAACQ,OAAO,CAAC,oBAAoB,CAAC,CAAC;AACjE,MAAME,SAAS,GAAGV,eAAe,CAACQ,OAAO,CAAC,oBAAoB,CAAC,CAAC;AAChE,MAAMG,OAAO,GAAGX,eAAe,CAACQ,OAAO,CAAC,UAAU,CAAC,CAAC;AACpD,MAAMI,YAAY,GAAGZ,eAAe,CAACQ,OAAO,CAAC,uBAAuB,CAAC,CAAC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMK,wBAAwB,CAAC;EAC3BC,WAAWA,CAACC,WAAW,EAAE;IACrB,IAAI,CAACC,GAAG,GAAGT,UAAU,CAACU,SAAS,CAAC,IAAI,CAACH,WAAW,CAACI,IAAI,CAAC;IACtD,IAAI,CAACH,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACI,0BAA0B,GAAG;MAC9B,eAAe,EAAE,IAAI,CAACC,oBAAoB;MAC1C,gBAAgB,EAAE,IAAI,CAACC;IAC3B,CAAC;EACL;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,WAAWA,CAACC,KAAK,EAAE;IACf,MAAMC,YAAY,GAAG,IAAI,CAACT,WAAW,CAACU,aAAa,CAACC,GAAG,CAACH,KAAK,CAACI,GAAG,CAAC;IAClE,MAAMC,YAAY,GAAGzB,MAAM,CAAC0B,MAAM,CAAC,CAAC,CAAC,EAAEN,KAAK,CAAC;IAC7C,IAAI,IAAI,CAACJ,0BAA0B,CAACW,cAAc,CAACP,KAAK,CAACQ,IAAI,CAAC,EAAE;MAC5D,OAAO,IAAI,CAACZ,0BAA0B,CAACI,KAAK,CAACQ,IAAI,CAAC,CAACC,IAAI,CAAC,IAAI,EAAER,YAAY,EAAE,IAAIf,UAAU,CAACwB,OAAO,CAACT,YAAY,EAAEI,YAAY,CAAC,EAAEL,KAAK,CAAC;IAC1I;IACA,OAAO,IAAId,UAAU,CAACwB,OAAO,CAACT,YAAY,EAAEI,YAAY,CAAC;EAC7D;EACA;AACJ;AACA;AACA;EACIR,oBAAoBA,CAACI,YAAY,EAAED,KAAK,EAAEW,SAAS,EAAE;IACjD,IAAI;MACA,IAAIX,KAAK,CAACY,IAAI,CAACC,OAAO,IAAI,IAAI,CAACrB,WAAW,CAACsB,gBAAgB,CAACC,GAAG,CAACf,KAAK,CAACY,IAAI,CAACC,OAAO,CAACG,EAAE,CAAC,EAAE;QACpF,IAAI,CAACvB,GAAG,CAACwB,KAAK,CAAC,oDAAoD,EAAE;UAAEjB;QAAM,CAAC,CAAC;QAC/E,MAAMkB,OAAO,GAAG,IAAI,CAAC1B,WAAW,CAACsB,gBAAgB,CAACX,GAAG,CAACH,KAAK,CAACY,IAAI,CAACC,OAAO,CAACG,EAAE,CAAC;QAC5E,IAAIG,EAAE,GAAG,CAAC,CAACD,OAAO,CAACE,UAAU,IAAI,CAAC,CAAC,EAAEpB,KAAK,CAACY,IAAI,CAACC,OAAO,CAACG,EAAE,CAAC,IAAI,CAAC,CAAC,EAAEG,EAAE;QACrED,OAAO,CAACG,QAAQ,CAACpB,YAAY,CAACqB,EAAE,CAAC;QACjCJ,OAAO,CAACK,wBAAwB,CAACtB,YAAY,EAAED,KAAK,CAACY,IAAI,CAACC,OAAO,CAACG,EAAE,CAAC;QACrE;QACAf,YAAY,CAACuB,KAAK,CAACC,0BAA0B,CAAC,CAAC;QAC/C;QACA;QACA,IAAI7C,MAAM,CAAC8C,OAAO,CAACzB,YAAY,CAACuB,KAAK,CAACJ,UAAU,CAAC,CAACO,MAAM,KAAK,CAAC,IAAI/C,MAAM,CAAC8C,OAAO,CAACR,OAAO,CAACE,UAAU,CAAC,CAACO,MAAM,KAAK,CAAC,EAAE;UAC/G/C,MAAM,CAAC0B,MAAM,CAACL,YAAY,CAACuB,KAAK,CAACJ,UAAU,EAAEF,OAAO,CAACE,UAAU,CAAC;QACpE;QACA,IAAI,CAACnB,YAAY,CAACuB,KAAK,CAACL,EAAE,IAAIA,EAAE,EAAE;UAC9BvC,MAAM,CAAC0B,MAAM,CAACL,YAAY,CAACuB,KAAK,CAACL,EAAE,GAAGA,EAAE,CAAC;QAC7C;QACA,IAAIlB,YAAY,CAACT,WAAW,CAACoC,aAAa,CAACD,MAAM,KAAK,CAAC,IAAIT,OAAO,CAAC1B,WAAW,CAACoC,aAAa,CAACD,MAAM,GAAG,CAAC,EAAE;UACrG1B,YAAY,CAACT,WAAW,CAACoC,aAAa,GAAGV,OAAO,CAAC1B,WAAW,CAACoC,aAAa;QAC9E;QACA,OAAOV,OAAO,CAACW,UAAU;QACzB,OAAOX,OAAO,CAACY,WAAW;QAC1B;QACA,IAAIZ,OAAO,CAACa,QAAQ,EAAE;UAClB9B,YAAY,CAACuB,KAAK,CAACO,QAAQ,GAAGb,OAAO,CAACa,QAAQ;QAClD;QACA;QACA,IAAI,CAACvC,WAAW,CAACsB,gBAAgB,CAACkB,MAAM,CAAChC,KAAK,CAACY,IAAI,CAACC,OAAO,CAACG,EAAE,CAAC;QAC/D,IAAI,CAACxB,WAAW,CAACyC,KAAK,CAACC,GAAG,CAACjC,YAAY,CAACe,EAAE,EAAEE,OAAO,CAAC;QACpDA,OAAO,CAACiB,mBAAmB,CAACnC,KAAK,CAAC;QAClC,IAAI,CAACP,GAAG,CAACwB,KAAK,CAAC,sCAAsC,EAAE;UAAEC;QAAQ,CAAC,CAAC;QACnE,IAAIjB,YAAY,CAACmC,OAAO,IAAIpC,KAAK,CAACY,IAAI,CAACyB,SAAS,EAAE;UAC9C,MAAMC,MAAM,GAAGrC,YAAY,CAACmC,OAAO,CAACjC,GAAG,CAACH,KAAK,CAACY,IAAI,CAACyB,SAAS,CAAC;UAC7D,IAAIC,MAAM,EACN,IAAI,CAAC9C,WAAW,CAAC+C,IAAI,CAAC,aAAa,EAAED,MAAM,EAAEpB,OAAO,CAAC;QAC7D;QACA;QACAsB,UAAU,CAAC,MAAMnD,YAAY,CAACqB,OAAO,CAAC+B,eAAe,CAACxC,YAAY,CAACqB,EAAE,EAAEH,EAAE,EAAED,OAAO,CAACwB,MAAM,CAAC,EAAE,EAAE,CAAC;MACnG;MACA,IAAI,CAACjD,GAAG,CAACwB,KAAK,CAAC,+CAA+C,EAAE;QAAEjB;MAAM,CAAC,CAAC;MAC1E,OAAOA,KAAK;IAChB,CAAC,CACD,OAAO2C,CAAC,EAAE;MACN,IAAI,CAAClD,GAAG,CAACmD,KAAK,CAAC,wBAAwB,EAAE;QAAED;MAAE,CAAC,CAAC;IACnD;EACJ;EACA7C,qBAAqBA,CAACG,YAAY,EAAED,KAAK,EAAE;IACvC,IAAI6C,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE;IAC1B,IAAI;MACA,IAAI,CAACjD,YAAY,EAAE;QACf,IAAI,CAACR,GAAG,CAAC0D,IAAI,CAAE,8BAA6BnD,KAAK,CAACQ,IAAK,EAAC,CAAC;QACzD,OAAOR,KAAK;MAChB;MACA;MACA,IAAK,CAAC,CAAC6C,EAAE,GAAG5C,YAAY,CAACqB,EAAE,MAAM,IAAI,IAAIuB,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACO,IAAI,CAACpC,EAAE,MAAMhB,KAAK,CAACY,IAAI,CAACyC,UAAU,IAAK,EAAE,CAACN,EAAE,GAAG,CAACD,EAAE,GAAG9C,KAAK,CAACY,IAAI,CAACwC,IAAI,CAAC5B,KAAK,MAAM,IAAI,IAAIsB,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACQ,cAAc,MAAM,IAAI,IAAIP,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACQ,OAAO,CAAC,EAAE;QACvP,OAAOvD,KAAK;MAChB;MACA,MAAMwD,MAAM,GAAGpE,OAAO,CAACsB,OAAO,CAAC+C,8BAA8B,CAACzD,KAAK,CAACY,IAAI,CAACC,OAAO,CAAC,IAC7EzB,OAAO,CAACsB,OAAO,CAACgD,uBAAuB,CAACzD,YAAY,EAAED,KAAK,CAACY,IAAI,CAACyC,UAAU,CAAC,IAAI,SAAS;MAC7F,MAAMnC,OAAO,GAAG,IAAI/B,SAAS,CAACuB,OAAO,CAAC,IAAI,CAAClB,WAAW,EAAES,YAAY,EAAEuD,MAAM,CAAC;MAC7E,IAAI,CAAChE,WAAW,CAACyC,KAAK,CAACC,GAAG,CAACjC,YAAY,CAACe,EAAE,EAAEE,OAAO,CAAC;MACpD,IAAI,CAAC,CAAC8B,EAAE,GAAGhD,KAAK,CAACY,IAAI,MAAM,IAAI,IAAIoC,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACW,GAAG,KAAK,IAAI,CAACnE,WAAW,CAACoE,OAAO,CAACC,MAAM,CAACC,kBAAkB,EAAE;QACvH5C,OAAO,CAAC6C,SAAS,CAAC;UAAEJ,GAAG,EAAE3D,KAAK,CAACY,IAAI,CAAC+C,GAAG;UAAEK,MAAM,EAAEhE,KAAK,CAACY,IAAI,CAACC,OAAO,CAACG;QAAG,CAAC,CAAC;MAC7E;MACA;MACA,IAAI,EAAE,CAACiC,EAAE,GAAGhD,YAAY,CAACgE,YAAY,MAAM,IAAI,IAAIhB,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACiB,UAAU,CAAC,OAAO,CAAC,CAAC,EAAE;QACjGhD,OAAO,CAACiB,mBAAmB,CAACnC,KAAK,CAAC;MACtC;MACA,IAAI,CAACR,WAAW,CAAC+C,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC/C,WAAW,CAACU,aAAa,CAACC,GAAG,CAACH,KAAK,CAACI,GAAG,CAAC,CAACgC,OAAO,CAACjC,GAAG,CAAC,CAAC+C,EAAE,GAAGlD,KAAK,CAACY,IAAI,MAAM,IAAI,IAAIsC,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACb,SAAS,CAAC,EAAEnB,OAAO,CAAC;MAC7K,OAAOlB,KAAK;IAChB,CAAC,CACD,OAAO2C,CAAC,EAAE;MACN,IAAI,CAAClD,GAAG,CAACmD,KAAK,CAAC,yBAAyB,EAAE;QAAED;MAAE,CAAC,CAAC;IACpD;EACJ;AACJ;AACA7D,OAAO,CAAC4B,OAAO,GAAGpB,wBAAwB;AAC1C6E,MAAM,CAACrF,OAAO,GAAGQ,wBAAwB"},"metadata":{},"sourceType":"script","externalDependencies":[]}