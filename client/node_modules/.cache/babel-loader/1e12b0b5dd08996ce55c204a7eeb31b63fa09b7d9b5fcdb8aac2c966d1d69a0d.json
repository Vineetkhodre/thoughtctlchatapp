{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _index = require(\"./index\");\nvar _index2 = _interopRequireDefault(_index);\nvar _Utils = require(\"./Utils\");\nvar _Utils2 = _interopRequireDefault(_Utils);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\n/**\n * Provides access to the `members` resource.\n */\nvar Members = function () {\n  _createClass(Members, null, [{\n    key: \"PATH\",\n    /**\n     * The path to the `members` resource.\n     */\n    get: function get() {\n      return \"/beta/conversations/{conversation_uuid}/members\";\n    }\n  }, {\n    key: \"BETA2_PATH\",\n    get: function get() {\n      return \"/beta2/conversations/{conversation_uuid}/members\";\n    }\n\n    /**\n     * Creates a new Members.\n     *\n     * @param {Credentials} creds - Credentials used when interacting with the Nexmo API.\n     * @param {Object} options - additional options for the class.\n     */\n  }]);\n  function Members(creds, options) {\n    _classCallCheck(this, Members);\n    this.creds = creds;\n    this.options = options;\n  }\n\n  /**\n   * Creates a member in a conversation.\n   *\n   * @param {string} conversationId - The unique identifier for the conversation\n   * @param {Object} params - Parameters used when adding a member to the conversation. See https://ea.developer.nexmo.com/api/conversation#add-a-user-to-a-conversation for more information.\n   * @param {function} callback - function to be called when the request completes.\n   */\n\n  _createClass(Members, [{\n    key: \"create\",\n    value: function create(conversationId, params, callback) {\n      params = JSON.stringify(params);\n      var config = {\n        host: this.options.apiHost || \"api.nexmo.com\",\n        path: Members.PATH.replace(\"{conversation_uuid}\", conversationId),\n        method: \"POST\",\n        body: params,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + this.creds.generateJwt()\n        }\n      };\n      this.options.httpClient.request(config, callback);\n    }\n\n    // backwards compatibility to 2.4.0-beta1. Remove for 3.0.0\n  }, {\n    key: \"add\",\n    value: function add(conversationId, params, callback) {\n      this.create(conversationId, params, callback);\n    }\n\n    /**\n     * Get an existing member.\n     *\n     * @param {string} conversationId - The unique identifier for the conversation\n     * @param {string|object} query - The unique identifier for the member to retrieve\n     *               or a set of filter parameters for the query. For more information\n     *               see https://ea.developer.nexmo.com/api/conversation#retrieve-members-of-a-conversation\n     * @param {function} callback - function to be called when the request completes.\n     */\n  }, {\n    key: \"get\",\n    value: function get(conversationId, query, callback) {\n      var config = {\n        host: this.options.apiHost || \"api.nexmo.com\",\n        path: _Utils2.default.createPathWithQuery(Members.BETA2_PATH.replace(\"{conversation_uuid}\", conversationId), query),\n        method: \"GET\",\n        body: undefined,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + this.creds.generateJwt()\n        }\n      };\n      this.options.httpClient.request(config, callback);\n    }\n\n    /**\n     * Get next page of members for a conversation.\n     *\n     * @param {object} response - The response from a paginated members list\n     *               see https://ea.developer.nexmo.com/api/conversation#getMembers\n     * @param {function} callback - function to be called when the request completes.\n     */\n  }, {\n    key: \"next\",\n    value: function next(response, callback) {\n      if (response._links.next) {\n        var conversationId = response._links.next.href.match(/CON-[^/]*/g);\n        this.get(conversationId, _Utils2.default.getQuery(response._links.next.href), callback);\n      } else {\n        var error = new Error(\"The response doesn't have a next page.\");\n        callback(error, null);\n      }\n    }\n\n    /**\n     * Get previous page members for a conversation.\n     *\n     * @param {object} response - The response from a paginated members list\n     *               see https://ea.developer.nexmo.com/api/conversation#getMembers\n     * @param {function} callback - function to be called when the request completes.\n     */\n  }, {\n    key: \"prev\",\n    value: function prev(response, callback) {\n      if (response._links.prev) {\n        var conversationId = response._links.prev.href.match(/CON-[^/]*/g);\n        this.get(conversationId, _Utils2.default.getQuery(response._links.prev.href), callback);\n      } else {\n        var error = new Error(\"The response doesn't have a previous page.\");\n        callback(error, null);\n      }\n    }\n\n    /**\n     * Update an existing member.\n     *\n     * @param {string} conversationId - The unique identifier for the conversation to update the member in.\n     * @param {string} memberId - The unique identifier for the member to update.\n     * @param {Object} params - Parameters used when updating the member.\n     * @param {function} callback - function to be called when the request completes.\n     */\n  }, {\n    key: \"update\",\n    value: function update(conversationId, memberId, params, callback) {\n      params = JSON.stringify(params);\n      var config = {\n        host: this.options.apiHost || \"api.nexmo.com\",\n        path: Members.PATH.replace(\"{conversation_uuid}\", conversationId) + \"/\" + memberId,\n        method: \"PUT\",\n        body: params,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + this.creds.generateJwt()\n        }\n      };\n      this.options.httpClient.request(config, callback);\n    }\n\n    /**\n     * Deleta an existing member.\n     *\n     * @param {string} conversationId- The unique identifier for the conversation to delete the member from.\n     * @param {string} memberId - The unique identifier for the member to delete.\n     * @param {function} callback - function to be called when the request completes.\n     */\n  }, {\n    key: \"delete\",\n    value: function _delete(conversationId, memberId, callback) {\n      var config = {\n        host: this.options.apiHost || \"api.nexmo.com\",\n        path: Members.PATH.replace(\"{conversation_uuid}\", conversationId) + \"/\" + memberId,\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + this.creds.generateJwt()\n        }\n      };\n      this.options.httpClient.request(config, callback);\n    }\n  }]);\n  return Members;\n}();\nexports.default = Members;\nmodule.exports = exports[\"default\"];","map":{"version":3,"names":["_index","require","_Utils","Members","creds","options","_classCallCheck","conversationId","params","callback","JSON","stringify","config","host","apiHost","path","PATH","replace","method","body","headers","Authorization","generateJwt","httpClient","request","create","query","_Utils2","default","createPathWithQuery","BETA2_PATH","undefined","response","_links","next","href","match","get","getQuery","error","Error","prev","memberId"],"sources":["/Users/vineetkhodre/react-workspace/thoughtctlchatapp/node_modules/nexmo/src/Members.js"],"sourcesContent":["import nexmo from \"./index\";\n\nimport Utils from \"./Utils\";\n\n/**\n * Provides access to the `members` resource.\n */\nclass Members {\n  /**\n   * The path to the `members` resource.\n   */\n  static get PATH() {\n    return \"/beta/conversations/{conversation_uuid}/members\";\n  }\n\n  static get BETA2_PATH() {\n    return \"/beta2/conversations/{conversation_uuid}/members\";\n  }\n\n  /**\n   * Creates a new Members.\n   *\n   * @param {Credentials} creds - Credentials used when interacting with the Nexmo API.\n   * @param {Object} options - additional options for the class.\n   */\n  constructor(creds, options) {\n    this.creds = creds;\n    this.options = options;\n  }\n\n  /**\n   * Creates a member in a conversation.\n   *\n   * @param {string} conversationId - The unique identifier for the conversation\n   * @param {Object} params - Parameters used when adding a member to the conversation. See https://ea.developer.nexmo.com/api/conversation#add-a-user-to-a-conversation for more information.\n   * @param {function} callback - function to be called when the request completes.\n   */\n  create(conversationId, params, callback) {\n    params = JSON.stringify(params);\n\n    var config = {\n      host: this.options.apiHost || \"api.nexmo.com\",\n      path: Members.PATH.replace(\"{conversation_uuid}\", conversationId),\n      method: \"POST\",\n      body: params,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.creds.generateJwt()}`\n      }\n    };\n    this.options.httpClient.request(config, callback);\n  }\n\n  // backwards compatibility to 2.4.0-beta1. Remove for 3.0.0\n  add(conversationId, params, callback) {\n    this.create(conversationId, params, callback);\n  }\n\n  /**\n   * Get an existing member.\n   *\n   * @param {string} conversationId - The unique identifier for the conversation\n   * @param {string|object} query - The unique identifier for the member to retrieve\n   *               or a set of filter parameters for the query. For more information\n   *               see https://ea.developer.nexmo.com/api/conversation#retrieve-members-of-a-conversation\n   * @param {function} callback - function to be called when the request completes.\n   */\n  get(conversationId, query, callback) {\n    var config = {\n      host: this.options.apiHost || \"api.nexmo.com\",\n      path: Utils.createPathWithQuery(\n        Members.BETA2_PATH.replace(\"{conversation_uuid}\", conversationId),\n        query\n      ),\n      method: \"GET\",\n      body: undefined,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.creds.generateJwt()}`\n      }\n    };\n    this.options.httpClient.request(config, callback);\n  }\n\n  /**\n   * Get next page of members for a conversation.\n   *\n   * @param {object} response - The response from a paginated members list\n   *               see https://ea.developer.nexmo.com/api/conversation#getMembers\n   * @param {function} callback - function to be called when the request completes.\n   */\n  next(response, callback) {\n    if (response._links.next) {\n      const conversationId = response._links.next.href.match(/CON-[^/]*/g);\n      this.get(\n        conversationId,\n        Utils.getQuery(response._links.next.href),\n        callback\n      );\n    } else {\n      const error = new Error(\"The response doesn't have a next page.\");\n      callback(error, null);\n    }\n  }\n\n  /**\n   * Get previous page members for a conversation.\n   *\n   * @param {object} response - The response from a paginated members list\n   *               see https://ea.developer.nexmo.com/api/conversation#getMembers\n   * @param {function} callback - function to be called when the request completes.\n   */\n  prev(response, callback) {\n    if (response._links.prev) {\n      const conversationId = response._links.prev.href.match(/CON-[^/]*/g);\n      this.get(\n        conversationId,\n        Utils.getQuery(response._links.prev.href),\n        callback\n      );\n    } else {\n      const error = new Error(\"The response doesn't have a previous page.\");\n      callback(error, null);\n    }\n  }\n\n  /**\n   * Update an existing member.\n   *\n   * @param {string} conversationId - The unique identifier for the conversation to update the member in.\n   * @param {string} memberId - The unique identifier for the member to update.\n   * @param {Object} params - Parameters used when updating the member.\n   * @param {function} callback - function to be called when the request completes.\n   */\n  update(conversationId, memberId, params, callback) {\n    params = JSON.stringify(params);\n\n    var config = {\n      host: this.options.apiHost || \"api.nexmo.com\",\n      path: `${Members.PATH.replace(\n        \"{conversation_uuid}\",\n        conversationId\n      )}/${memberId}`,\n      method: \"PUT\",\n      body: params,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.creds.generateJwt()}`\n      }\n    };\n\n    this.options.httpClient.request(config, callback);\n  }\n\n  /**\n   * Deleta an existing member.\n   *\n   * @param {string} conversationId- The unique identifier for the conversation to delete the member from.\n   * @param {string} memberId - The unique identifier for the member to delete.\n   * @param {function} callback - function to be called when the request completes.\n   */\n  delete(conversationId, memberId, callback) {\n    var config = {\n      host: this.options.apiHost || \"api.nexmo.com\",\n      path: `${Members.PATH.replace(\n        \"{conversation_uuid}\",\n        conversationId\n      )}/${memberId}`,\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.creds.generateJwt()}`\n      }\n    };\n\n    this.options.httpClient.request(config, callback);\n  }\n}\n\nexport default Members;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}