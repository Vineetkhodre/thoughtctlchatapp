{"ast":null,"code":"\"use strict\";\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _uuid = require(\"uuid\");\nvar _uuid2 = _interopRequireDefault(_uuid);\nvar _jsonwebtoken = require(\"jsonwebtoken\");\nvar _jsonwebtoken2 = _interopRequireDefault(_jsonwebtoken);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nvar JwtGenerator = function () {\n  function JwtGenerator() {\n    _classCallCheck(this, JwtGenerator);\n  }\n  _createClass(JwtGenerator, [{\n    key: \"generate\",\n    /**\n     * Generate a JSON Web Token (JWT).\n     *\n     * @param {Buffer} cert - the private key certificate to be used when signing\n     * the claims.\n     * @param {Object} claims - additional claims to include within the generated\n     * JWT.\n     *\n     * @returns {String} the generated token\n     */\n    value: function generate(cert) {\n      var claims = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (!(cert instanceof Buffer)) {\n        throw new Error(\"cert must be of type Buffer\");\n      }\n      if ((typeof claims === \"undefined\" ? \"undefined\" : _typeof(claims)) !== \"object\") {\n        throw new Error(\"claims must be of type object\");\n      }\n      var toSign = {\n        iat: claims.issuedAt || parseInt(Date.now() / 1000, 10),\n        jti: claims.jti || _uuid2.default.v1()\n      };\n      Object.keys(claims).forEach(function (key) {\n        toSign[key] = claims[key];\n      });\n      var token = _jsonwebtoken2.default.sign(toSign, cert, {\n        algorithm: \"RS256\"\n      });\n      return token;\n    }\n  }]);\n  return JwtGenerator;\n}();\nmodule.exports = JwtGenerator;","map":{"version":3,"names":["_uuid","require","_jsonwebtoken","JwtGenerator","cert","claims","arguments","length","undefined","Buffer","Error","_typeof","toSign","iat","issuedAt","parseInt","Date","now","jti","_uuid2","default","v1","Object","keys","forEach","key","token","_jsonwebtoken2","sign","algorithm","module","exports"],"sources":["/Users/vineetkhodre/react-workspace/thoughtctlchatapp/node_modules/nexmo/src/JwtGenerator.js"],"sourcesContent":["import uuid from \"uuid\";\nimport jwt from \"jsonwebtoken\";\n\nclass JwtGenerator {\n  /**\n   * Generate a JSON Web Token (JWT).\n   *\n   * @param {Buffer} cert - the private key certificate to be used when signing\n   * the claims.\n   * @param {Object} claims - additional claims to include within the generated\n   * JWT.\n   *\n   * @returns {String} the generated token\n   */\n  generate(cert, claims = {}) {\n    if (!(cert instanceof Buffer)) {\n      throw new Error(\"cert must be of type Buffer\");\n    }\n    if (typeof claims !== \"object\") {\n      throw new Error(\"claims must be of type object\");\n    }\n\n    var toSign = {\n      iat: claims.issuedAt || parseInt(Date.now() / 1000, 10),\n      jti: claims.jti || uuid.v1()\n    };\n    Object.keys(claims).forEach(key => {\n      toSign[key] = claims[key];\n    });\n\n    var token = jwt.sign(toSign, cert, { algorithm: \"RS256\" });\n    return token;\n  }\n}\n\nmodule.exports = JwtGenerator;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAAA,KAAA,GAAAC,OAAA;;AACA,IAAAC,aAAA,GAAAD,OAAA;;;;;;;;;;;;IAEME,Y;;;;;;IACJ;;;;;;;;;;6BAUSC,I,EAAmB;MAAA,IAAbC,MAAa,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAJ,EAAI;MAC1B,IAAI,EAAEF,IAAA,YAAgBK,MAAlB,CAAJ,EAA+B;QAC7B,MAAM,IAAIC,KAAJ,CAAU,6BAAV,CAAN;MACD;MACD,IAAI,QAAOL,MAAP,iCAAAM,OAAA,CAAON,MAAP,OAAkB,QAAtB,EAAgC;QAC9B,MAAM,IAAIK,KAAJ,CAAU,+BAAV,CAAN;MACD;MAED,IAAIE,MAAA,GAAS;QACXC,GAAA,EAAKR,MAAA,CAAOS,QAAP,IAAmBC,QAAA,CAASC,IAAA,CAAKC,GAAL,KAAa,IAAtB,EAA4B,EAA5B,CADb;QAEXC,GAAA,EAAKb,MAAA,CAAOa,GAAP,IAAcC,MAAA,CAAAC,OAAA,CAAKC,EAAL;MAFR,CAAb;MAIAC,MAAA,CAAOC,IAAP,CAAYlB,MAAZ,EAAoBmB,OAApB,CAA4B,UAAAC,GAAA,EAAO;QACjCb,MAAA,CAAOa,GAAP,IAAcpB,MAAA,CAAOoB,GAAP,CAAd;MACD,CAFD;MAIA,IAAIC,KAAA,GAAQC,cAAA,CAAAP,OAAA,CAAIQ,IAAJ,CAAShB,MAAT,EAAiBR,IAAjB,EAAuB;QAAEyB,SAAA,EAAW;MAAb,CAAvB,CAAZ;MACA,OAAOH,KAAP;IACD;;;;AAGHI,MAAA,CAAOC,OAAP,GAAiB5B,YAAjB"},"metadata":{},"sourceType":"script","externalDependencies":[]}