{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _index = _interopRequireDefault(require(\"./index\"));\nvar _Utils = _interopRequireDefault(require(\"./Utils\"));\nvar _Members = _interopRequireDefault(require(\"./Members\"));\nvar _Events = _interopRequireDefault(require(\"./Events\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/**\n * Provides access to the `conversations` endpoint.\n */\nclass Conversations {\n  static get PATH() {\n    return \"/beta/conversations\";\n  }\n  static get BETA2_PATH() {\n    return \"/beta2/conversations\";\n  }\n  static get V1_PATH() {\n    return \"/v1/conversations\";\n  }\n  /**\n   * @param {Credentials} credentials\n   *    credentials to be used when interacting with the API.\n   * @param {Object} options\n   *    Additional Conversations options.\n   */\n\n  constructor(credentials) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.creds = credentials;\n    this.options = options;\n    /**\n     * @type Members\n     */\n\n    this.members = new _Members.default(this.creds, this.options);\n    /**\n     * @type Events\n     */\n\n    this.events = new _Events.default(this.creds, this.options);\n  }\n  /**\n   * Create a new conversation.\n   *\n   * @param {Object} params - Parameters used when creating the conversation. See https://ea.developer.nexmo.com/api/conversation#create-a-conversation for more information.\n   * @param {function} callback - function to be called when the request completes.\n   */\n\n  create(params, callback) {\n    params = JSON.stringify(params);\n    var config = {\n      host: this.options.apiHost || \"api.nexmo.com\",\n      path: Conversations.PATH,\n      method: \"POST\",\n      body: params,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \".concat(this.creds.generateJwt())\n      }\n    };\n    this.options.httpClient.request(config, callback);\n  }\n  /**\n   * Get an existing conversation.\n   *\n   * @param {string|object} query - The unique identifier for the conversation to retrieve\n   *               or a set of filter parameters for the query. For more information\n   *               see https://ea.developer.nexmo.com/api/conversation#retrieve-a-conversation\n   * @param {function} callback - function to be called when the request completes.\n   */\n\n  get(query, callback) {\n    var config = {\n      host: this.options.apiHost || \"api.nexmo.com\",\n      path: typeof query === \"string\" ? \"\".concat(Conversations.PATH, \"/\").concat(query) : _Utils.default.createPathWithQuery(Conversations.BETA2_PATH, query),\n      method: \"GET\",\n      body: undefined,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \".concat(this.creds.generateJwt())\n      }\n    };\n    this.options.httpClient.request(config, callback);\n  }\n  /**\n   * Get next page of conversations.\n   *\n   * @param {object} response - The response from a paginated conversations list\n   *               see https://ea.developer.nexmo.com/api/conversation#listConversations\n   * @param {function} callback - function to be called when the request completes.\n   */\n\n  next(response, callback) {\n    if (response._links.next) {\n      this.get(_Utils.default.getQuery(response._links.next.href), callback);\n    } else {\n      var error = new Error(\"The response doesn't have a next page.\");\n      callback(error, null);\n    }\n  }\n  /**\n   * Get previous page of conversations.\n   *\n   * @param {object} response - The response from a paginated conversations list\n   *               see https://ea.developer.nexmo.com/api/conversation#listConversations\n   * @param {function} callback - function to be called when the request completes.\n   */\n\n  prev(response, callback) {\n    if (response._links.prev) {\n      this.get(_Utils.default.getQuery(response._links.prev.href), callback);\n    } else {\n      var error = new Error(\"The response doesn't have a previous page.\");\n      callback(error, null);\n    }\n  }\n  /**\n   * Update an existing conversation.\n   *\n   * @param {string} conversationId - The unique identifier for the conversation to update.\n   * @param {Object} params - Parameters used when updating the conversation.\n   * @param {function} callback - function to be called when the request completes.\n   */\n\n  update(conversationId, params, callback) {\n    params = JSON.stringify(params);\n    var config = {\n      host: this.options.apiHost || \"api.nexmo.com\",\n      path: \"\".concat(Conversations.PATH, \"/\").concat(conversationId),\n      method: \"PUT\",\n      body: params,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \".concat(this.creds.generateJwt())\n      }\n    };\n    this.options.httpClient.request(config, callback);\n  }\n  /**\n   * Record an existing conversation.\n   *\n   * @param {string} conversationId - The unique identifier for the conversation to record.\n   * @param {Object} params - Parameters used when recording the conversation.\n   * @param {function} callback - function to be called when the request completes.\n   */\n\n  record(conversationId, params, callback) {\n    params = JSON.stringify(params);\n    var config = {\n      host: this.options.apiHost || \"api.nexmo.com\",\n      path: \"\".concat(Conversations.V1_PATH, \"/\").concat(conversationId, \"/record\"),\n      method: \"PUT\",\n      body: params,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \".concat(this.creds.generateJwt())\n      }\n    };\n    this.options.httpClient.request(config, callback);\n  }\n  /**\n   * Deleta an existing conversation.\n   *\n   * @param {string} conversationId - The unique identifier for the conversation to delete.\n   * @param {function} callback - function to be called when the request completes.\n   */\n\n  delete(conversationId, callback) {\n    var config = {\n      host: this.options.apiHost || \"api.nexmo.com\",\n      path: \"\".concat(Conversations.PATH, \"/\").concat(conversationId),\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \".concat(this.creds.generateJwt())\n      }\n    };\n    this.options.httpClient.request(config, callback);\n  }\n}\nvar _default = Conversations;\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"names":["_index","_interopRequireDefault","require","_Utils","_Members","_Events","Conversations","PATH","BETA2_PATH","V1_PATH","constructor","credentials","options","arguments","length","undefined","creds","members","default","events","create","params","callback","JSON","stringify","config","host","apiHost","path","method","body","headers","Authorization","concat","generateJwt","httpClient","request","get","query","createPathWithQuery","next","response","_links","getQuery","href","error","Error","prev","update","conversationId","record","delete"],"sources":["/Users/vineetkhodre/react-workspace/thoughtctlchatapp/node_modules/@vonage/server-sdk/src/Conversations.js"],"sourcesContent":["\"use strict\";\n\nimport vonage from \"./index\";\n\nimport Utils from \"./Utils\";\n\nimport Members from \"./Members\";\nimport Events from \"./Events\";\n\n/**\n * Provides access to the `conversations` endpoint.\n */\nclass Conversations {\n  static get PATH() {\n    return \"/beta/conversations\";\n  }\n\n  static get BETA2_PATH() {\n    return \"/beta2/conversations\";\n  }\n\n  static get V1_PATH() {\n    return \"/v1/conversations\";\n  }\n\n  /**\n   * @param {Credentials} credentials\n   *    credentials to be used when interacting with the API.\n   * @param {Object} options\n   *    Additional Conversations options.\n   */\n  constructor(credentials, options = {}) {\n    this.creds = credentials;\n    this.options = options;\n\n    /**\n     * @type Members\n     */\n    this.members = new Members(this.creds, this.options);\n\n    /**\n     * @type Events\n     */\n    this.events = new Events(this.creds, this.options);\n  }\n\n  /**\n   * Create a new conversation.\n   *\n   * @param {Object} params - Parameters used when creating the conversation. See https://ea.developer.nexmo.com/api/conversation#create-a-conversation for more information.\n   * @param {function} callback - function to be called when the request completes.\n   */\n  create(params, callback) {\n    params = JSON.stringify(params);\n\n    var config = {\n      host: this.options.apiHost || \"api.nexmo.com\",\n      path: Conversations.PATH,\n      method: \"POST\",\n      body: params,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.creds.generateJwt()}`,\n      },\n    };\n    this.options.httpClient.request(config, callback);\n  }\n\n  /**\n   * Get an existing conversation.\n   *\n   * @param {string|object} query - The unique identifier for the conversation to retrieve\n   *               or a set of filter parameters for the query. For more information\n   *               see https://ea.developer.nexmo.com/api/conversation#retrieve-a-conversation\n   * @param {function} callback - function to be called when the request completes.\n   */\n  get(query, callback) {\n    var config = {\n      host: this.options.apiHost || \"api.nexmo.com\",\n      path:\n        typeof query === \"string\"\n          ? `${Conversations.PATH}/${query}`\n          : Utils.createPathWithQuery(Conversations.BETA2_PATH, query),\n      method: \"GET\",\n      body: undefined,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.creds.generateJwt()}`,\n      },\n    };\n    this.options.httpClient.request(config, callback);\n  }\n\n  /**\n   * Get next page of conversations.\n   *\n   * @param {object} response - The response from a paginated conversations list\n   *               see https://ea.developer.nexmo.com/api/conversation#listConversations\n   * @param {function} callback - function to be called when the request completes.\n   */\n  next(response, callback) {\n    if (response._links.next) {\n      this.get(Utils.getQuery(response._links.next.href), callback);\n    } else {\n      const error = new Error(\"The response doesn't have a next page.\");\n      callback(error, null);\n    }\n  }\n\n  /**\n   * Get previous page of conversations.\n   *\n   * @param {object} response - The response from a paginated conversations list\n   *               see https://ea.developer.nexmo.com/api/conversation#listConversations\n   * @param {function} callback - function to be called when the request completes.\n   */\n  prev(response, callback) {\n    if (response._links.prev) {\n      this.get(Utils.getQuery(response._links.prev.href), callback);\n    } else {\n      const error = new Error(\"The response doesn't have a previous page.\");\n      callback(error, null);\n    }\n  }\n\n  /**\n   * Update an existing conversation.\n   *\n   * @param {string} conversationId - The unique identifier for the conversation to update.\n   * @param {Object} params - Parameters used when updating the conversation.\n   * @param {function} callback - function to be called when the request completes.\n   */\n  update(conversationId, params, callback) {\n    params = JSON.stringify(params);\n\n    var config = {\n      host: this.options.apiHost || \"api.nexmo.com\",\n      path: `${Conversations.PATH}/${conversationId}`,\n      method: \"PUT\",\n      body: params,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.creds.generateJwt()}`,\n      },\n    };\n\n    this.options.httpClient.request(config, callback);\n  }\n\n  /**\n   * Record an existing conversation.\n   *\n   * @param {string} conversationId - The unique identifier for the conversation to record.\n   * @param {Object} params - Parameters used when recording the conversation.\n   * @param {function} callback - function to be called when the request completes.\n   */\n  record(conversationId, params, callback) {\n    params = JSON.stringify(params);\n\n    var config = {\n      host: this.options.apiHost || \"api.nexmo.com\",\n      path: `${Conversations.V1_PATH}/${conversationId}/record`,\n      method: \"PUT\",\n      body: params,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.creds.generateJwt()}`,\n      },\n    };\n\n    this.options.httpClient.request(config, callback);\n  }\n\n  /**\n   * Deleta an existing conversation.\n   *\n   * @param {string} conversationId - The unique identifier for the conversation to delete.\n   * @param {function} callback - function to be called when the request completes.\n   */\n  delete(conversationId, callback) {\n    var config = {\n      host: this.options.apiHost || \"api.nexmo.com\",\n      path: `${Conversations.PATH}/${conversationId}`,\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.creds.generateJwt()}`,\n      },\n    };\n\n    this.options.httpClient.request(config, callback);\n  }\n}\n\nexport default Conversations;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}