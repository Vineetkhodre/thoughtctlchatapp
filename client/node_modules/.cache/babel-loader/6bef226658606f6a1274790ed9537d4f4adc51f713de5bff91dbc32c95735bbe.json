{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _index = require(\"./index\");\nvar _index2 = _interopRequireDefault(_index);\nvar _Utils = require(\"./Utils\");\nvar _Utils2 = _interopRequireDefault(_Utils);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\n/**\n * Provides access to the `users` endpoint.\n */\nvar Users = function () {\n  _createClass(Users, null, [{\n    key: \"PATH\",\n    get: function get() {\n      return \"/beta/users\";\n    }\n  }, {\n    key: \"BETA2_PATH\",\n    get: function get() {\n      return \"/beta2/users\";\n    }\n\n    /**\n     * @param {Credentials} credentials\n     *    credentials to be used when interacting with the API.\n     * @param {Object} options\n     *    Additional Users options.\n     */\n  }]);\n  function Users(credentials) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, Users);\n    this.creds = credentials;\n    this.options = options;\n  }\n\n  /**\n   * Create a new user.\n   *\n   * @param {Object} params - Parameters used when creating the user. See https://ea.developer.nexmo.com/api/conversation#create-a-user for more information.\n   * @param {function} callback - function to be called when the request completes.\n   */\n\n  _createClass(Users, [{\n    key: \"create\",\n    value: function create(params, callback) {\n      params = JSON.stringify(params);\n      var config = {\n        host: this.options.apiHost || \"api.nexmo.com\",\n        path: Users.PATH,\n        method: \"POST\",\n        body: params,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + this.creds.generateJwt()\n        }\n      };\n      this.options.httpClient.request(config, callback);\n    }\n\n    /**\n     * Get an existing user.\n     *\n     * @param {string|object} query - The unique identifier for the user to retrieve\n     *               or a set of filter parameters for the query. For more information\n     *               see https://ea.developer.nexmo.com/api/conversation#retrieve-all-users\n     * @param {function} callback - function to be called when the request completes.\n     */\n  }, {\n    key: \"get\",\n    value: function get(query, callback) {\n      var config = {\n        host: this.options.apiHost || \"api.nexmo.com\",\n        path: _Utils2.default.createPathWithQuery(Users.BETA2_PATH, query),\n        method: \"GET\",\n        body: undefined,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + this.creds.generateJwt()\n        }\n      };\n      this.options.httpClient.request(config, callback);\n    }\n\n    /**\n     * Get next page of users or conversations for a user.\n     *\n     * @param {object} response - The response from a paginated users or conversations list\n     *               see https://ea.developer.nexmo.com/api/conversation#retrieve-all-users\n     * @param {function} callback - function to be called when the request completes.\n     */\n  }, {\n    key: \"next\",\n    value: function next(response, callback) {\n      if (response._links.next) {\n        var userId = response._links.next.href.match(/USR-[^/]*/g);\n        if (userId) {\n          this.getConversations(userId[0], _Utils2.default.getQuery(response._links.next.href), callback);\n        } else {\n          this.get(_Utils2.default.getQuery(response._links.next.href), callback);\n        }\n      } else {\n        var error = new Error(\"The response doesn't have a next page.\");\n        callback(error, null);\n      }\n    }\n\n    /**\n     * Get previous page of users or conversations for a user.\n     *\n     * @param {object} response - The response from a paginated users or conversations list\n     *               see https://ea.developer.nexmo.com/api/conversation#retrieve-all-users\n     * @param {function} callback - function to be called when the request completes.\n     */\n  }, {\n    key: \"prev\",\n    value: function prev(response, callback) {\n      if (response._links.prev) {\n        var userId = response._links.prev.href.match(/USR-[^/]*/g);\n        if (userId) {\n          this.getConversations(userId[0], _Utils2.default.getQuery(response._links.prev.href), callback);\n        } else {\n          this.get(_Utils2.default.getQuery(response._links.prev.href), callback);\n        }\n      } else {\n        var error = new Error(\"The response doesn't have a previous page.\");\n        callback(error, null);\n      }\n    }\n\n    /**\n     * Get an conversations for an existing user.\n     *\n     * @param {string} userId - The unique identifier for the user to retrieve conversations for\n     * @param {function} callback - function to be called when the request completes.\n     */\n  }, {\n    key: \"getConversations\",\n    value: function getConversations(userId, query, callback) {\n      // backwards compatibility to 2.5.4-beta-1. Remove for 3.0.0\n      if (typeof query === \"function\") {\n        callback = query;\n        query = {};\n      }\n      var config = {\n        host: this.options.apiHost || \"api.nexmo.com\",\n        path: _Utils2.default.createPathWithQuery(Users.BETA2_PATH + \"/\" + userId + \"/conversations\", query),\n        method: \"GET\",\n        body: undefined,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + this.creds.generateJwt()\n        }\n      };\n      this.options.httpClient.request(config, callback);\n    }\n\n    /**\n     * Update an existing user.\n     *\n     * @param {string} userId - The unique identifier for the user to update.\n     * @param {Object} params - Parameters used when updating the conversation.\n     * @param {function} callback - function to be called when the request completes.\n     */\n  }, {\n    key: \"update\",\n    value: function update(userId, params, callback) {\n      params = JSON.stringify(params);\n      var config = {\n        host: this.options.apiHost || \"api.nexmo.com\",\n        path: Users.PATH + \"/\" + userId,\n        method: \"PUT\",\n        body: params,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + this.creds.generateJwt()\n        }\n      };\n      this.options.httpClient.request(config, callback);\n    }\n\n    /**\n     * Deleta an existing user.\n     *\n     * @param {string} userId - The unique identifier for the user to delete.\n     * @param {function} callback - function to be called when the request completes.\n     */\n  }, {\n    key: \"delete\",\n    value: function _delete(userId, callback) {\n      var config = {\n        host: this.options.apiHost || \"api.nexmo.com\",\n        path: Users.PATH + \"/\" + userId,\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + this.creds.generateJwt()\n        }\n      };\n      this.options.httpClient.request(config, callback);\n    }\n  }]);\n  return Users;\n}();\nexports.default = Users;\nmodule.exports = exports[\"default\"];","map":{"version":3,"names":["_index","require","_Utils","Users","credentials","options","arguments","length","undefined","_classCallCheck","creds","params","callback","JSON","stringify","config","host","apiHost","path","PATH","method","body","headers","Authorization","generateJwt","httpClient","request","query","_Utils2","default","createPathWithQuery","BETA2_PATH","response","_links","next","userId","href","match","getConversations","getQuery","get","error","Error","prev"],"sources":["/Users/vineetkhodre/react-workspace/thoughtctlchatapp/node_modules/nexmo/src/Users.js"],"sourcesContent":["\"use strict\";\n\nimport nexmo from \"./index\";\n\nimport Utils from \"./Utils\";\n\n/**\n * Provides access to the `users` endpoint.\n */\nclass Users {\n  static get PATH() {\n    return \"/beta/users\";\n  }\n\n  static get BETA2_PATH() {\n    return \"/beta2/users\";\n  }\n\n  /**\n   * @param {Credentials} credentials\n   *    credentials to be used when interacting with the API.\n   * @param {Object} options\n   *    Additional Users options.\n   */\n  constructor(credentials, options = {}) {\n    this.creds = credentials;\n    this.options = options;\n  }\n\n  /**\n   * Create a new user.\n   *\n   * @param {Object} params - Parameters used when creating the user. See https://ea.developer.nexmo.com/api/conversation#create-a-user for more information.\n   * @param {function} callback - function to be called when the request completes.\n   */\n  create(params, callback) {\n    params = JSON.stringify(params);\n\n    var config = {\n      host: this.options.apiHost || \"api.nexmo.com\",\n      path: Users.PATH,\n      method: \"POST\",\n      body: params,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.creds.generateJwt()}`\n      }\n    };\n    this.options.httpClient.request(config, callback);\n  }\n\n  /**\n   * Get an existing user.\n   *\n   * @param {string|object} query - The unique identifier for the user to retrieve\n   *               or a set of filter parameters for the query. For more information\n   *               see https://ea.developer.nexmo.com/api/conversation#retrieve-all-users\n   * @param {function} callback - function to be called when the request completes.\n   */\n  get(query, callback) {\n    var config = {\n      host: this.options.apiHost || \"api.nexmo.com\",\n      path: Utils.createPathWithQuery(Users.BETA2_PATH, query),\n      method: \"GET\",\n      body: undefined,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.creds.generateJwt()}`\n      }\n    };\n    this.options.httpClient.request(config, callback);\n  }\n\n  /**\n   * Get next page of users or conversations for a user.\n   *\n   * @param {object} response - The response from a paginated users or conversations list\n   *               see https://ea.developer.nexmo.com/api/conversation#retrieve-all-users\n   * @param {function} callback - function to be called when the request completes.\n   */\n  next(response, callback) {\n    if (response._links.next) {\n      const userId = response._links.next.href.match(/USR-[^/]*/g);\n      if (userId) {\n        this.getConversations(\n          userId[0],\n          Utils.getQuery(response._links.next.href),\n          callback\n        );\n      } else {\n        this.get(Utils.getQuery(response._links.next.href), callback);\n      }\n    } else {\n      const error = new Error(\"The response doesn't have a next page.\");\n      callback(error, null);\n    }\n  }\n\n  /**\n   * Get previous page of users or conversations for a user.\n   *\n   * @param {object} response - The response from a paginated users or conversations list\n   *               see https://ea.developer.nexmo.com/api/conversation#retrieve-all-users\n   * @param {function} callback - function to be called when the request completes.\n   */\n  prev(response, callback) {\n    if (response._links.prev) {\n      const userId = response._links.prev.href.match(/USR-[^/]*/g);\n      if (userId) {\n        this.getConversations(\n          userId[0],\n          Utils.getQuery(response._links.prev.href),\n          callback\n        );\n      } else {\n        this.get(Utils.getQuery(response._links.prev.href), callback);\n      }\n    } else {\n      const error = new Error(\"The response doesn't have a previous page.\");\n      callback(error, null);\n    }\n  }\n\n  /**\n   * Get an conversations for an existing user.\n   *\n   * @param {string} userId - The unique identifier for the user to retrieve conversations for\n   * @param {function} callback - function to be called when the request completes.\n   */\n  getConversations(userId, query, callback) {\n    // backwards compatibility to 2.5.4-beta-1. Remove for 3.0.0\n    if (typeof query === \"function\") {\n      callback = query;\n      query = {};\n    }\n\n    var config = {\n      host: this.options.apiHost || \"api.nexmo.com\",\n      path: Utils.createPathWithQuery(\n        `${Users.BETA2_PATH}/${userId}/conversations`,\n        query\n      ),\n      method: \"GET\",\n      body: undefined,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.creds.generateJwt()}`\n      }\n    };\n    this.options.httpClient.request(config, callback);\n  }\n\n  /**\n   * Update an existing user.\n   *\n   * @param {string} userId - The unique identifier for the user to update.\n   * @param {Object} params - Parameters used when updating the conversation.\n   * @param {function} callback - function to be called when the request completes.\n   */\n  update(userId, params, callback) {\n    params = JSON.stringify(params);\n\n    var config = {\n      host: this.options.apiHost || \"api.nexmo.com\",\n      path: `${Users.PATH}/${userId}`,\n      method: \"PUT\",\n      body: params,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.creds.generateJwt()}`\n      }\n    };\n\n    this.options.httpClient.request(config, callback);\n  }\n\n  /**\n   * Deleta an existing user.\n   *\n   * @param {string} userId - The unique identifier for the user to delete.\n   * @param {function} callback - function to be called when the request completes.\n   */\n  delete(userId, callback) {\n    var config = {\n      host: this.options.apiHost || \"api.nexmo.com\",\n      path: `${Users.PATH}/${userId}`,\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.creds.generateJwt()}`\n      }\n    };\n\n    this.options.httpClient.request(config, callback);\n  }\n}\n\nexport default Users;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}