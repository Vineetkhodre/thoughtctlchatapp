{"ast":null,"code":"/**\n * Rules to map different types of reports combined by report name\n * On the left - name of the field in a report\n * On the rirgh - new name\n */\nconst rules = {\n  \"outbound-rtp\": {\n    packetsSent: \"audioSentPackets\",\n    bytesSent: \"audioSentBytes\"\n  },\n  \"inbound-rtp\": {\n    packetsReceived: \"audioRecvPackets\",\n    packetsLost: \"audioRecvPacketsLost\",\n    bytesReceived: \"audioRecvBytes\",\n    jitter: \"audioRecvJitter\"\n  },\n  \"remote-inbound-rtp\": {\n    packetsLost: \"audioSentPacketsLost\",\n    roundTripTime: \"audioRtt\",\n    jitter: \"audioSentJitter\"\n  }\n};\n\n// Additional logic to parse values can be done here\nconst parsers = {\n  \"remote-candidate\": function (report) {\n    return mapKeys(report);\n  },\n  \"inbound-rtp\": function (report) {\n    return mapKeys(report);\n  },\n  \"outbound-rtp\": function (report) {\n    return mapKeys(report);\n  },\n  \"remote-inbound-rtp\": function (report) {\n    return mapKeys(report);\n  }\n};\nconst mapKeys = report => {\n  const {\n    type\n  } = report;\n  const mapping = rules[type];\n  const result = {};\n  for (let field in mapping) {\n    if (field in report) {\n      let mappedName;\n      if (typeof mapping[field] === \"function\") {\n        mappedName = mapping[field](report);\n      } else {\n        mappedName = mapping[field];\n      }\n      result[mappedName] = report[field];\n    } else {\n      result[mapping[field]] = null;\n    }\n  }\n  return result;\n};\nmodule.exports = {\n  rules,\n  parsers\n};","map":{"version":3,"names":["rules","packetsSent","bytesSent","packetsReceived","packetsLost","bytesReceived","jitter","roundTripTime","parsers","remote-candidate","report","mapKeys","inbound-rtp","outbound-rtp","remote-inbound-rtp","type","mapping","result","field","mappedName","module","exports"],"sources":["/Users/vineetkhodre/react-workspace/thoughtctlchatapp/client/node_modules/rtc-stats-adapter/parsers/new-api.js"],"sourcesContent":["/**\n * Rules to map different types of reports combined by report name\n * On the left - name of the field in a report\n * On the rirgh - new name\n */\nconst rules = {\n  \"outbound-rtp\": {\n    packetsSent: \"audioSentPackets\",\n    bytesSent: \"audioSentBytes\",\n  },\n  \"inbound-rtp\": {\n    packetsReceived: \"audioRecvPackets\",\n    packetsLost: \"audioRecvPacketsLost\",\n    bytesReceived: \"audioRecvBytes\",\n    jitter: \"audioRecvJitter\"\n  },\n  \"remote-inbound-rtp\": {\n    packetsLost: \"audioSentPacketsLost\",\n    roundTripTime: \"audioRtt\",\n    jitter: \"audioSentJitter\"\n  },\n};\n\n// Additional logic to parse values can be done here\nconst parsers = {\n  \"remote-candidate\": function (report) {\n    return mapKeys(report);\n  },\n  \"inbound-rtp\": function (report) {\n    return mapKeys(report);\n  },\n  \"outbound-rtp\": function (report) {\n    return mapKeys(report);\n  },\n  \"remote-inbound-rtp\": function (report) {\n    return mapKeys(report);\n  },\n};\n\nconst mapKeys = (report) => {\n  const { type } = report;\n  const mapping = rules[type];\n  const result = {};\n\n  for (let field in mapping) {\n    if (field in report) {\n      let mappedName;\n\n      if (typeof mapping[field] === \"function\") {\n        mappedName = mapping[field](report);\n      } else {\n        mappedName = mapping[field];\n      }\n      result[mappedName] = report[field];\n    } else {\n      result[mapping[field]] = null;\n    }\n  }\n\n  return result;\n};\n\nmodule.exports = {\n  rules,\n  parsers,\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,MAAMA,KAAK,GAAG;EACZ,cAAc,EAAE;IACdC,WAAW,EAAE,kBAAkB;IAC/BC,SAAS,EAAE;EACb,CAAC;EACD,aAAa,EAAE;IACbC,eAAe,EAAE,kBAAkB;IACnCC,WAAW,EAAE,sBAAsB;IACnCC,aAAa,EAAE,gBAAgB;IAC/BC,MAAM,EAAE;EACV,CAAC;EACD,oBAAoB,EAAE;IACpBF,WAAW,EAAE,sBAAsB;IACnCG,aAAa,EAAE,UAAU;IACzBD,MAAM,EAAE;EACV;AACF,CAAC;;AAED;AACA,MAAME,OAAO,GAAG;EACd,kBAAkB,EAAE,SAAAC,CAAUC,MAAM,EAAE;IACpC,OAAOC,OAAO,CAACD,MAAM,CAAC;EACxB,CAAC;EACD,aAAa,EAAE,SAAAE,CAAUF,MAAM,EAAE;IAC/B,OAAOC,OAAO,CAACD,MAAM,CAAC;EACxB,CAAC;EACD,cAAc,EAAE,SAAAG,CAAUH,MAAM,EAAE;IAChC,OAAOC,OAAO,CAACD,MAAM,CAAC;EACxB,CAAC;EACD,oBAAoB,EAAE,SAAAI,CAAUJ,MAAM,EAAE;IACtC,OAAOC,OAAO,CAACD,MAAM,CAAC;EACxB;AACF,CAAC;AAED,MAAMC,OAAO,GAAID,MAAM,IAAK;EAC1B,MAAM;IAAEK;EAAK,CAAC,GAAGL,MAAM;EACvB,MAAMM,OAAO,GAAGhB,KAAK,CAACe,IAAI,CAAC;EAC3B,MAAME,MAAM,GAAG,CAAC,CAAC;EAEjB,KAAK,IAAIC,KAAK,IAAIF,OAAO,EAAE;IACzB,IAAIE,KAAK,IAAIR,MAAM,EAAE;MACnB,IAAIS,UAAU;MAEd,IAAI,OAAOH,OAAO,CAACE,KAAK,CAAC,KAAK,UAAU,EAAE;QACxCC,UAAU,GAAGH,OAAO,CAACE,KAAK,CAAC,CAACR,MAAM,CAAC;MACrC,CAAC,MAAM;QACLS,UAAU,GAAGH,OAAO,CAACE,KAAK,CAAC;MAC7B;MACAD,MAAM,CAACE,UAAU,CAAC,GAAGT,MAAM,CAACQ,KAAK,CAAC;IACpC,CAAC,MAAM;MACLD,MAAM,CAACD,OAAO,CAACE,KAAK,CAAC,CAAC,GAAG,IAAI;IAC/B;EACF;EAEA,OAAOD,MAAM;AACf,CAAC;AAEDG,MAAM,CAACC,OAAO,GAAG;EACfrB,KAAK;EACLQ;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}