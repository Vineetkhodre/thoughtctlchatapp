{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _querystring = require(\"querystring\");\nvar _querystring2 = _interopRequireDefault(_querystring);\nvar _StreamResource = require(\"./StreamResource\");\nvar _StreamResource2 = _interopRequireDefault(_StreamResource);\nvar _TalkResource = require(\"./TalkResource\");\nvar _TalkResource2 = _interopRequireDefault(_TalkResource);\nvar _DtmfResource = require(\"./DtmfResource\");\nvar _DtmfResource2 = _interopRequireDefault(_DtmfResource);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\n/**\n * Provides access to the `calls` resource.\n */\nvar CallsResource = function () {\n  _createClass(CallsResource, null, [{\n    key: \"PATH\",\n    /**\n     * The path to the `calls` resource.\n     */\n    get: function get() {\n      return \"/v1/calls\";\n    }\n\n    /**\n     * Creates a new CallsResource.\n     *\n     * @param {Credentials} creds - Credentials used when interacting with the Nexmo API.\n     * @param {Object} options - additional options for the class.\n     */\n  }]);\n  function CallsResource(creds, options) {\n    _classCallCheck(this, CallsResource);\n    this.creds = creds;\n    this.options = options;\n\n    /**\n     * @type StreamController\n     */\n    this.stream = new _StreamResource2.default(this.creds, this.options);\n\n    /**\n     * @type TalkResource\n     */\n    this.talk = new _TalkResource2.default(this.creds, this.options);\n\n    /**\n     * @type DtmfResource\n     */\n    this.dtmf = new _DtmfResource2.default(this.creds, this.options);\n  }\n\n  /**\n   * Create a new call.\n   *\n   * @param {Object} params - Parameters used when creating the call. See https://developer.nexmo.com/api/voice#create-an-outbound-call for more information.\n   * @param {function} callback - function to be called when the request completes.\n   */\n\n  _createClass(CallsResource, [{\n    key: \"create\",\n    value: function create(params, callback) {\n      params = JSON.stringify(params);\n      var config = {\n        host: this.options.apiHost || \"api.nexmo.com\",\n        path: CallsResource.PATH,\n        method: \"POST\",\n        body: params,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Content-Length\": Buffer.byteLength(params),\n          Authorization: \"Bearer \" + this.creds.generateJwt()\n        }\n      };\n      this.options.httpClient.request(config, callback);\n    }\n\n    /**\n     * Get an existing call.\n     *\n     * @param {string|object} query - The unique identifier for the call to retrieve\n     *               or a set of filter parameters for the query. For more information\n     *               see https://docs.nexmo.com/voice/voice-api/api-reference#call_retrieve\n     * @param {function} callback - function to be called when the request completes.\n     */\n  }, {\n    key: \"get\",\n    value: function get(query, callback) {\n      if (!query) {\n        throw new Error('\"query\" is a required parameter');\n      }\n      var pathExt = \"\";\n      if (typeof query === \"string\") {\n        // single call Id\n        pathExt = \"/\" + query;\n      } else if ((typeof query === \"undefined\" ? \"undefined\" : _typeof(query)) === \"object\" && Object.keys(query).length > 0) {\n        // filter\n        pathExt = \"?\" + _querystring2.default.stringify(query);\n      }\n      var config = {\n        host: this.options.apiHost || \"api.nexmo.com\",\n        path: \"\" + CallsResource.PATH + pathExt,\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + this.creds.generateJwt()\n        }\n      };\n      this.options.httpClient.request(config, callback);\n    }\n\n    /**\n     * Update an existing call.\n     *\n     * @param {string} [callId] - The unique identifier for the call to update.\n     * @param {Object} params - Parameters used when updating the call. See https://developer.nexmo.com/api/voice#modify-an-existing-call for more information.\n     * @param {function} callback - function to be called when the request completes.\n     */\n  }, {\n    key: \"update\",\n    value: function update(callId, params, callback) {\n      params = JSON.stringify(params);\n      var config = {\n        host: this.options.apiHost || \"api.nexmo.com\",\n        path: CallsResource.PATH + \"/\" + callId,\n        method: \"PUT\",\n        body: params,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Content-Length\": Buffer.byteLength(params),\n          Authorization: \"Bearer \" + this.creds.generateJwt()\n        }\n      };\n      this.options.httpClient.request(config, callback);\n    }\n  }]);\n  return CallsResource;\n}();\nexports.default = CallsResource;\nmodule.exports = exports[\"default\"];","map":{"version":3,"names":["_querystring","require","_StreamResource","_TalkResource","_DtmfResource","CallsResource","creds","options","_classCallCheck","stream","_StreamResource2","default","talk","_TalkResource2","dtmf","_DtmfResource2","params","callback","JSON","stringify","config","host","apiHost","path","PATH","method","body","headers","Buffer","byteLength","Authorization","generateJwt","httpClient","request","query","Error","pathExt","_typeof","Object","keys","length","_querystring2","callId"],"sources":["/Users/vineetkhodre/react-workspace/thoughtctlchatapp/node_modules/nexmo/src/CallsResource.js"],"sourcesContent":["import querystring from \"querystring\";\n\nimport StreamResource from \"./StreamResource\";\nimport TalkResource from \"./TalkResource\";\nimport DtmfResource from \"./DtmfResource\";\n\n/**\n * Provides access to the `calls` resource.\n */\nclass CallsResource {\n  /**\n   * The path to the `calls` resource.\n   */\n  static get PATH() {\n    return \"/v1/calls\";\n  }\n\n  /**\n   * Creates a new CallsResource.\n   *\n   * @param {Credentials} creds - Credentials used when interacting with the Nexmo API.\n   * @param {Object} options - additional options for the class.\n   */\n  constructor(creds, options) {\n    this.creds = creds;\n    this.options = options;\n\n    /**\n     * @type StreamController\n     */\n    this.stream = new StreamResource(this.creds, this.options);\n\n    /**\n     * @type TalkResource\n     */\n    this.talk = new TalkResource(this.creds, this.options);\n\n    /**\n     * @type DtmfResource\n     */\n    this.dtmf = new DtmfResource(this.creds, this.options);\n  }\n\n  /**\n   * Create a new call.\n   *\n   * @param {Object} params - Parameters used when creating the call. See https://developer.nexmo.com/api/voice#create-an-outbound-call for more information.\n   * @param {function} callback - function to be called when the request completes.\n   */\n  create(params, callback) {\n    params = JSON.stringify(params);\n\n    var config = {\n      host: this.options.apiHost || \"api.nexmo.com\",\n      path: CallsResource.PATH,\n      method: \"POST\",\n      body: params,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Content-Length\": Buffer.byteLength(params),\n        Authorization: `Bearer ${this.creds.generateJwt()}`\n      }\n    };\n    this.options.httpClient.request(config, callback);\n  }\n\n  /**\n   * Get an existing call.\n   *\n   * @param {string|object} query - The unique identifier for the call to retrieve\n   *               or a set of filter parameters for the query. For more information\n   *               see https://docs.nexmo.com/voice/voice-api/api-reference#call_retrieve\n   * @param {function} callback - function to be called when the request completes.\n   */\n  get(query, callback) {\n    if (!query) {\n      throw new Error('\"query\" is a required parameter');\n    }\n\n    var pathExt = \"\";\n    if (typeof query === \"string\") {\n      // single call Id\n      pathExt = `/${query}`;\n    } else if (typeof query === \"object\" && Object.keys(query).length > 0) {\n      // filter\n      pathExt = `?${querystring.stringify(query)}`;\n    }\n\n    var config = {\n      host: this.options.apiHost || \"api.nexmo.com\",\n      path: `${CallsResource.PATH}${pathExt}`,\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.creds.generateJwt()}`\n      }\n    };\n    this.options.httpClient.request(config, callback);\n  }\n\n  /**\n   * Update an existing call.\n   *\n   * @param {string} [callId] - The unique identifier for the call to update.\n   * @param {Object} params - Parameters used when updating the call. See https://developer.nexmo.com/api/voice#modify-an-existing-call for more information.\n   * @param {function} callback - function to be called when the request completes.\n   */\n  update(callId, params, callback) {\n    params = JSON.stringify(params);\n\n    var config = {\n      host: this.options.apiHost || \"api.nexmo.com\",\n      path: `${CallsResource.PATH}/${callId}`,\n      method: \"PUT\",\n      body: params,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Content-Length\": Buffer.byteLength(params),\n        Authorization: `Bearer ${this.creds.generateJwt()}`\n      }\n    };\n    this.options.httpClient.request(config, callback);\n  }\n}\n\nexport default CallsResource;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAAA,YAAA,GAAAC,OAAA;;AAEA,IAAAC,eAAA,GAAAD,OAAA;;AACA,IAAAE,aAAA,GAAAF,OAAA;;AACA,IAAAG,aAAA,GAAAH,OAAA;;;;;;;;;;;;;AAEA;;;IAGMI,a;;;IACJ;;;wBAGkB;MAChB,OAAO,WAAP;IACD;;IAED;;;;;;;EAMA,SAAAA,cAAYC,KAAZ,EAAmBC,OAAnB,EAA4B;IAAAC,eAAA,OAAAH,aAAA;IAC1B,KAAKC,KAAL,GAAaA,KAAb;IACA,KAAKC,OAAL,GAAeA,OAAf;;IAEA;;;IAGA,KAAKE,MAAL,GAAc,IAAAC,gBAAA,CAAAC,OAAA,CAAmB,KAAKL,KAAxB,EAA+B,KAAKC,OAApC,CAAd;;IAEA;;;IAGA,KAAKK,IAAL,GAAY,IAAAC,cAAA,CAAAF,OAAA,CAAiB,KAAKL,KAAtB,EAA6B,KAAKC,OAAlC,CAAZ;;IAEA;;;IAGA,KAAKO,IAAL,GAAY,IAAAC,cAAA,CAAAJ,OAAA,CAAiB,KAAKL,KAAtB,EAA6B,KAAKC,OAAlC,CAAZ;EACD;;EAED;;;;;;;;;2BAMOS,M,EAAQC,Q,EAAU;MACvBD,MAAA,GAASE,IAAA,CAAKC,SAAL,CAAeH,MAAf,CAAT;MAEA,IAAII,MAAA,GAAS;QACXC,IAAA,EAAM,KAAKd,OAAL,CAAae,OAAb,IAAwB,eADnB;QAEXC,IAAA,EAAMlB,aAAA,CAAcmB,IAFT;QAGXC,MAAA,EAAQ,MAHG;QAIXC,IAAA,EAAMV,MAJK;QAKXW,OAAA,EAAS;UACP,gBAAgB,kBADT;UAEP,kBAAkBC,MAAA,CAAOC,UAAP,CAAkBb,MAAlB,CAFX;UAGPc,aAAA,cAAyB,KAAKxB,KAAL,CAAWyB,WAAX;QAHlB;MALE,CAAb;MAWA,KAAKxB,OAAL,CAAayB,UAAb,CAAwBC,OAAxB,CAAgCb,MAAhC,EAAwCH,QAAxC;IACD;;IAED;;;;;;;;;;wBAQIiB,K,EAAOjB,Q,EAAU;MACnB,IAAI,CAACiB,KAAL,EAAY;QACV,MAAM,IAAIC,KAAJ,CAAU,iCAAV,CAAN;MACD;MAED,IAAIC,OAAA,GAAU,EAAd;MACA,IAAI,OAAOF,KAAP,KAAiB,QAArB,EAA+B;QAC7B;QACAE,OAAA,SAAcF,KAAd;MACD,CAHD,MAGO,IAAI,QAAOA,KAAP,iCAAAG,OAAA,CAAOH,KAAP,OAAiB,QAAjB,IAA6BI,MAAA,CAAOC,IAAP,CAAYL,KAAZ,EAAmBM,MAAnB,GAA4B,CAA7D,EAAgE;QACrE;QACAJ,OAAA,SAAcK,aAAA,CAAA9B,OAAA,CAAYQ,SAAZ,CAAsBe,KAAtB,CAAd;MACD;MAED,IAAId,MAAA,GAAS;QACXC,IAAA,EAAM,KAAKd,OAAL,CAAae,OAAb,IAAwB,eADnB;QAEXC,IAAA,OAASlB,aAAA,CAAcmB,IAAvB,GAA8BY,OAFnB;QAGXX,MAAA,EAAQ,KAHG;QAIXE,OAAA,EAAS;UACP,gBAAgB,kBADT;UAEPG,aAAA,cAAyB,KAAKxB,KAAL,CAAWyB,WAAX;QAFlB;MAJE,CAAb;MASA,KAAKxB,OAAL,CAAayB,UAAb,CAAwBC,OAAxB,CAAgCb,MAAhC,EAAwCH,QAAxC;IACD;;IAED;;;;;;;;;2BAOOyB,M,EAAQ1B,M,EAAQC,Q,EAAU;MAC/BD,MAAA,GAASE,IAAA,CAAKC,SAAL,CAAeH,MAAf,CAAT;MAEA,IAAII,MAAA,GAAS;QACXC,IAAA,EAAM,KAAKd,OAAL,CAAae,OAAb,IAAwB,eADnB;QAEXC,IAAA,EAASlB,aAAA,CAAcmB,IAAvB,SAA+BkB,MAFpB;QAGXjB,MAAA,EAAQ,KAHG;QAIXC,IAAA,EAAMV,MAJK;QAKXW,OAAA,EAAS;UACP,gBAAgB,kBADT;UAEP,kBAAkBC,MAAA,CAAOC,UAAP,CAAkBb,MAAlB,CAFX;UAGPc,aAAA,cAAyB,KAAKxB,KAAL,CAAWyB,WAAX;QAHlB;MALE,CAAb;MAWA,KAAKxB,OAAL,CAAayB,UAAb,CAAwBC,OAAxB,CAAgCb,MAAhC,EAAwCH,QAAxC;IACD;;;;kBAGYZ,a"},"metadata":{},"sourceType":"script","externalDependencies":[]}