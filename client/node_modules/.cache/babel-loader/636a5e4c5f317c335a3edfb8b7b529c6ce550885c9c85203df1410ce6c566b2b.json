{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _index = _interopRequireDefault(require(\"./index\"));\nvar _Utils = _interopRequireDefault(require(\"./Utils\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/**\n * Provides access to the `users` endpoint.\n */\nclass Users {\n  static get PATH() {\n    return \"/beta/users\";\n  }\n  static get BETA2_PATH() {\n    return \"/beta2/users\";\n  }\n  /**\n   * @param {Credentials} credentials\n   *    credentials to be used when interacting with the API.\n   * @param {Object} options\n   *    Additional Users options.\n   */\n\n  constructor(credentials) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.creds = credentials;\n    this.options = options;\n  }\n  /**\n   * Create a new user.\n   *\n   * @param {Object} params - Parameters used when creating the user. See https://ea.developer.nexmo.com/api/conversation#create-a-user for more information.\n   * @param {function} callback - function to be called when the request completes.\n   */\n\n  create(params, callback) {\n    params = JSON.stringify(params);\n    var config = {\n      host: this.options.apiHost || \"api.nexmo.com\",\n      path: Users.PATH,\n      method: \"POST\",\n      body: params,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \".concat(this.creds.generateJwt())\n      }\n    };\n    this.options.httpClient.request(config, callback);\n  }\n  /**\n   * Get an existing user.\n   *\n   * @param {string|object} query - The unique identifier for the user to retrieve\n   *               or a set of filter parameters for the query. For more information\n   *               see https://ea.developer.nexmo.com/api/conversation#retrieve-all-users\n   * @param {function} callback - function to be called when the request completes.\n   */\n\n  get(query, callback) {\n    var config = {\n      host: this.options.apiHost || \"api.nexmo.com\",\n      path: _Utils.default.createPathWithQuery(Users.BETA2_PATH, query),\n      method: \"GET\",\n      body: undefined,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \".concat(this.creds.generateJwt())\n      }\n    };\n    this.options.httpClient.request(config, callback);\n  }\n  /**\n   * Get next page of users or conversations for a user.\n   *\n   * @param {object} response - The response from a paginated users or conversations list\n   *               see https://ea.developer.nexmo.com/api/conversation#retrieve-all-users\n   * @param {function} callback - function to be called when the request completes.\n   */\n\n  next(response, callback) {\n    if (response._links.next) {\n      var userId = response._links.next.href.match(/USR-[^/]*/g);\n      if (userId) {\n        this.getConversations(userId[0], _Utils.default.getQuery(response._links.next.href), callback);\n      } else {\n        this.get(_Utils.default.getQuery(response._links.next.href), callback);\n      }\n    } else {\n      var error = new Error(\"The response doesn't have a next page.\");\n      callback(error, null);\n    }\n  }\n  /**\n   * Get previous page of users or conversations for a user.\n   *\n   * @param {object} response - The response from a paginated users or conversations list\n   *               see https://ea.developer.nexmo.com/api/conversation#retrieve-all-users\n   * @param {function} callback - function to be called when the request completes.\n   */\n\n  prev(response, callback) {\n    if (response._links.prev) {\n      var userId = response._links.prev.href.match(/USR-[^/]*/g);\n      if (userId) {\n        this.getConversations(userId[0], _Utils.default.getQuery(response._links.prev.href), callback);\n      } else {\n        this.get(_Utils.default.getQuery(response._links.prev.href), callback);\n      }\n    } else {\n      var error = new Error(\"The response doesn't have a previous page.\");\n      callback(error, null);\n    }\n  }\n  /**\n   * Get an conversations for an existing user.\n   *\n   * @param {string} userId - The unique identifier for the user to retrieve conversations for\n   * @param {function} callback - function to be called when the request completes.\n   */\n\n  getConversations(userId, query, callback) {\n    // backwards compatibility to 2.5.4-beta-1. Remove for 3.0.0\n    if (typeof query === \"function\") {\n      callback = query;\n      query = {};\n    }\n    var config = {\n      host: this.options.apiHost || \"api.nexmo.com\",\n      path: _Utils.default.createPathWithQuery(\"\".concat(Users.BETA2_PATH, \"/\").concat(userId, \"/conversations\"), query),\n      method: \"GET\",\n      body: undefined,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \".concat(this.creds.generateJwt())\n      }\n    };\n    this.options.httpClient.request(config, callback);\n  }\n  /**\n   * Update an existing user.\n   *\n   * @param {string} userId - The unique identifier for the user to update.\n   * @param {Object} params - Parameters used when updating the conversation.\n   * @param {function} callback - function to be called when the request completes.\n   */\n\n  update(userId, params, callback) {\n    params = JSON.stringify(params);\n    var config = {\n      host: this.options.apiHost || \"api.nexmo.com\",\n      path: \"\".concat(Users.PATH, \"/\").concat(userId),\n      method: \"PUT\",\n      body: params,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \".concat(this.creds.generateJwt())\n      }\n    };\n    this.options.httpClient.request(config, callback);\n  }\n  /**\n   * Deleta an existing user.\n   *\n   * @param {string} userId - The unique identifier for the user to delete.\n   * @param {function} callback - function to be called when the request completes.\n   */\n\n  delete(userId, callback) {\n    var config = {\n      host: this.options.apiHost || \"api.nexmo.com\",\n      path: \"\".concat(Users.PATH, \"/\").concat(userId),\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \".concat(this.creds.generateJwt())\n      }\n    };\n    this.options.httpClient.request(config, callback);\n  }\n}\nvar _default = Users;\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"names":["_index","_interopRequireDefault","require","_Utils","Users","PATH","BETA2_PATH","constructor","credentials","options","arguments","length","undefined","creds","create","params","callback","JSON","stringify","config","host","apiHost","path","method","body","headers","Authorization","concat","generateJwt","httpClient","request","get","query","default","createPathWithQuery","next","response","_links","userId","href","match","getConversations","getQuery","error","Error","prev","update","delete"],"sources":["/Users/vineetkhodre/react-workspace/thoughtctlchatapp/node_modules/@vonage/server-sdk/src/Users.js"],"sourcesContent":["\"use strict\";\n\nimport nexmo from \"./index\";\n\nimport Utils from \"./Utils\";\n\n/**\n * Provides access to the `users` endpoint.\n */\nclass Users {\n  static get PATH() {\n    return \"/beta/users\";\n  }\n\n  static get BETA2_PATH() {\n    return \"/beta2/users\";\n  }\n\n  /**\n   * @param {Credentials} credentials\n   *    credentials to be used when interacting with the API.\n   * @param {Object} options\n   *    Additional Users options.\n   */\n  constructor(credentials, options = {}) {\n    this.creds = credentials;\n    this.options = options;\n  }\n\n  /**\n   * Create a new user.\n   *\n   * @param {Object} params - Parameters used when creating the user. See https://ea.developer.nexmo.com/api/conversation#create-a-user for more information.\n   * @param {function} callback - function to be called when the request completes.\n   */\n  create(params, callback) {\n    params = JSON.stringify(params);\n\n    var config = {\n      host: this.options.apiHost || \"api.nexmo.com\",\n      path: Users.PATH,\n      method: \"POST\",\n      body: params,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.creds.generateJwt()}`,\n      },\n    };\n    this.options.httpClient.request(config, callback);\n  }\n\n  /**\n   * Get an existing user.\n   *\n   * @param {string|object} query - The unique identifier for the user to retrieve\n   *               or a set of filter parameters for the query. For more information\n   *               see https://ea.developer.nexmo.com/api/conversation#retrieve-all-users\n   * @param {function} callback - function to be called when the request completes.\n   */\n  get(query, callback) {\n    var config = {\n      host: this.options.apiHost || \"api.nexmo.com\",\n      path: Utils.createPathWithQuery(Users.BETA2_PATH, query),\n      method: \"GET\",\n      body: undefined,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.creds.generateJwt()}`,\n      },\n    };\n    this.options.httpClient.request(config, callback);\n  }\n\n  /**\n   * Get next page of users or conversations for a user.\n   *\n   * @param {object} response - The response from a paginated users or conversations list\n   *               see https://ea.developer.nexmo.com/api/conversation#retrieve-all-users\n   * @param {function} callback - function to be called when the request completes.\n   */\n  next(response, callback) {\n    if (response._links.next) {\n      const userId = response._links.next.href.match(/USR-[^/]*/g);\n      if (userId) {\n        this.getConversations(\n          userId[0],\n          Utils.getQuery(response._links.next.href),\n          callback\n        );\n      } else {\n        this.get(Utils.getQuery(response._links.next.href), callback);\n      }\n    } else {\n      const error = new Error(\"The response doesn't have a next page.\");\n      callback(error, null);\n    }\n  }\n\n  /**\n   * Get previous page of users or conversations for a user.\n   *\n   * @param {object} response - The response from a paginated users or conversations list\n   *               see https://ea.developer.nexmo.com/api/conversation#retrieve-all-users\n   * @param {function} callback - function to be called when the request completes.\n   */\n  prev(response, callback) {\n    if (response._links.prev) {\n      const userId = response._links.prev.href.match(/USR-[^/]*/g);\n      if (userId) {\n        this.getConversations(\n          userId[0],\n          Utils.getQuery(response._links.prev.href),\n          callback\n        );\n      } else {\n        this.get(Utils.getQuery(response._links.prev.href), callback);\n      }\n    } else {\n      const error = new Error(\"The response doesn't have a previous page.\");\n      callback(error, null);\n    }\n  }\n\n  /**\n   * Get an conversations for an existing user.\n   *\n   * @param {string} userId - The unique identifier for the user to retrieve conversations for\n   * @param {function} callback - function to be called when the request completes.\n   */\n  getConversations(userId, query, callback) {\n    // backwards compatibility to 2.5.4-beta-1. Remove for 3.0.0\n    if (typeof query === \"function\") {\n      callback = query;\n      query = {};\n    }\n\n    var config = {\n      host: this.options.apiHost || \"api.nexmo.com\",\n      path: Utils.createPathWithQuery(\n        `${Users.BETA2_PATH}/${userId}/conversations`,\n        query\n      ),\n      method: \"GET\",\n      body: undefined,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.creds.generateJwt()}`,\n      },\n    };\n    this.options.httpClient.request(config, callback);\n  }\n\n  /**\n   * Update an existing user.\n   *\n   * @param {string} userId - The unique identifier for the user to update.\n   * @param {Object} params - Parameters used when updating the conversation.\n   * @param {function} callback - function to be called when the request completes.\n   */\n  update(userId, params, callback) {\n    params = JSON.stringify(params);\n\n    var config = {\n      host: this.options.apiHost || \"api.nexmo.com\",\n      path: `${Users.PATH}/${userId}`,\n      method: \"PUT\",\n      body: params,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.creds.generateJwt()}`,\n      },\n    };\n\n    this.options.httpClient.request(config, callback);\n  }\n\n  /**\n   * Deleta an existing user.\n   *\n   * @param {string} userId - The unique identifier for the user to delete.\n   * @param {function} callback - function to be called when the request completes.\n   */\n  delete(userId, callback) {\n    var config = {\n      host: this.options.apiHost || \"api.nexmo.com\",\n      path: `${Users.PATH}/${userId}`,\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.creds.generateJwt()}`,\n      },\n    };\n\n    this.options.httpClient.request(config, callback);\n  }\n}\n\nexport default Users;\n"],"mappings":"AAAA;;;;;;AAEA,IAAAA,MAAA,GAAAC,sBAAA,CAAAC,OAAA;AAEA,IAAAC,MAAA,GAAAF,sBAAA,CAAAC,OAAA;;;;;;;AAEA;AACA;AACA;AACA,MAAME,KAAN,CAAY;EACK,WAAJC,IAAIA,CAAA,EAAG;IAChB,OAAO,aAAP;EACD;EAEoB,WAAVC,UAAUA,CAAA,EAAG;IACtB,OAAO,cAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;EACEC,WAAWA,CAACC,WAAD,EAA4B;IAAA,IAAdC,OAAc,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAJ,EAAI;IACrC,KAAKG,KAAL,GAAaL,WAAb;IACA,KAAKC,OAAL,GAAeA,OAAf;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;EACEK,MAAMA,CAACC,MAAD,EAASC,QAAT,EAAmB;IACvBD,MAAM,GAAGE,IAAI,CAACC,SAAL,CAAeH,MAAf,CAAT;IAEA,IAAII,MAAM,GAAG;MACXC,IAAI,EAAE,KAAKX,OAAL,CAAaY,OAAb,IAAwB,eADnB;MAEXC,IAAI,EAAElB,KAAK,CAACC,IAFD;MAGXkB,MAAM,EAAE,MAHG;MAIXC,IAAI,EAAET,MAJK;MAKXU,OAAO,EAAE;QACP,gBAAgB,kBADT;QAEPC,aAAa,YAAAC,MAAA,CAAY,KAAKd,KAAL,CAAWe,WAAX,EAAZ;MAFN;IALE,CAAb;IAUA,KAAKnB,OAAL,CAAaoB,UAAb,CAAwBC,OAAxB,CAAgCX,MAAhC,EAAwCH,QAAxC;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EACEe,GAAGA,CAACC,KAAD,EAAQhB,QAAR,EAAkB;IACnB,IAAIG,MAAM,GAAG;MACXC,IAAI,EAAE,KAAKX,OAAL,CAAaY,OAAb,IAAwB,eADnB;MAEXC,IAAI,EAAEnB,MAAA,CAAA8B,OAAA,CAAMC,mBAAN,CAA0B9B,KAAK,CAACE,UAAhC,EAA4C0B,KAA5C,CAFK;MAGXT,MAAM,EAAE,KAHG;MAIXC,IAAI,EAAEZ,SAJK;MAKXa,OAAO,EAAE;QACP,gBAAgB,kBADT;QAEPC,aAAa,YAAAC,MAAA,CAAY,KAAKd,KAAL,CAAWe,WAAX,EAAZ;MAFN;IALE,CAAb;IAUA,KAAKnB,OAAL,CAAaoB,UAAb,CAAwBC,OAAxB,CAAgCX,MAAhC,EAAwCH,QAAxC;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;EACEmB,IAAIA,CAACC,QAAD,EAAWpB,QAAX,EAAqB;IACvB,IAAIoB,QAAQ,CAACC,MAAT,CAAgBF,IAApB,EAA0B;MACxB,IAAMG,MAAM,GAAGF,QAAQ,CAACC,MAAT,CAAgBF,IAAhB,CAAqBI,IAArB,CAA0BC,KAA1B,CAAgC,YAAhC,CAAf;MACA,IAAIF,MAAJ,EAAY;QACV,KAAKG,gBAAL,CACEH,MAAM,CAAC,CAAD,CADR,EAEEnC,MAAA,CAAA8B,OAAA,CAAMS,QAAN,CAAeN,QAAQ,CAACC,MAAT,CAAgBF,IAAhB,CAAqBI,IAApC,CAFF,EAGEvB,QAHF;MAKD,CAND,MAMO;QACL,KAAKe,GAAL,CAAS5B,MAAA,CAAA8B,OAAA,CAAMS,QAAN,CAAeN,QAAQ,CAACC,MAAT,CAAgBF,IAAhB,CAAqBI,IAApC,CAAT,EAAoDvB,QAApD;MACD;IACF,CAXD,MAWO;MACL,IAAM2B,KAAK,GAAG,IAAIC,KAAJ,CAAU,wCAAV,CAAd;MACA5B,QAAQ,CAAC2B,KAAD,EAAQ,IAAR,CAAR;IACD;EACF;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;EACEE,IAAIA,CAACT,QAAD,EAAWpB,QAAX,EAAqB;IACvB,IAAIoB,QAAQ,CAACC,MAAT,CAAgBQ,IAApB,EAA0B;MACxB,IAAMP,MAAM,GAAGF,QAAQ,CAACC,MAAT,CAAgBQ,IAAhB,CAAqBN,IAArB,CAA0BC,KAA1B,CAAgC,YAAhC,CAAf;MACA,IAAIF,MAAJ,EAAY;QACV,KAAKG,gBAAL,CACEH,MAAM,CAAC,CAAD,CADR,EAEEnC,MAAA,CAAA8B,OAAA,CAAMS,QAAN,CAAeN,QAAQ,CAACC,MAAT,CAAgBQ,IAAhB,CAAqBN,IAApC,CAFF,EAGEvB,QAHF;MAKD,CAND,MAMO;QACL,KAAKe,GAAL,CAAS5B,MAAA,CAAA8B,OAAA,CAAMS,QAAN,CAAeN,QAAQ,CAACC,MAAT,CAAgBQ,IAAhB,CAAqBN,IAApC,CAAT,EAAoDvB,QAApD;MACD;IACF,CAXD,MAWO;MACL,IAAM2B,KAAK,GAAG,IAAIC,KAAJ,CAAU,4CAAV,CAAd;MACA5B,QAAQ,CAAC2B,KAAD,EAAQ,IAAR,CAAR;IACD;EACF;EAED;AACF;AACA;AACA;AACA;AACA;;EACEF,gBAAgBA,CAACH,MAAD,EAASN,KAAT,EAAgBhB,QAAhB,EAA0B;IACxC;IACA,IAAI,OAAOgB,KAAP,KAAiB,UAArB,EAAiC;MAC/BhB,QAAQ,GAAGgB,KAAX;MACAA,KAAK,GAAG,EAAR;IACD;IAED,IAAIb,MAAM,GAAG;MACXC,IAAI,EAAE,KAAKX,OAAL,CAAaY,OAAb,IAAwB,eADnB;MAEXC,IAAI,EAAEnB,MAAA,CAAA8B,OAAA,CAAMC,mBAAN,IAAAP,MAAA,CACDvB,KAAK,CAACE,UADL,OAAAqB,MAAA,CACmBW,MADnB,qBAEJN,KAFI,CAFK;MAMXT,MAAM,EAAE,KANG;MAOXC,IAAI,EAAEZ,SAPK;MAQXa,OAAO,EAAE;QACP,gBAAgB,kBADT;QAEPC,aAAa,YAAAC,MAAA,CAAY,KAAKd,KAAL,CAAWe,WAAX,EAAZ;MAFN;IARE,CAAb;IAaA,KAAKnB,OAAL,CAAaoB,UAAb,CAAwBC,OAAxB,CAAgCX,MAAhC,EAAwCH,QAAxC;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;EACE8B,MAAMA,CAACR,MAAD,EAASvB,MAAT,EAAiBC,QAAjB,EAA2B;IAC/BD,MAAM,GAAGE,IAAI,CAACC,SAAL,CAAeH,MAAf,CAAT;IAEA,IAAII,MAAM,GAAG;MACXC,IAAI,EAAE,KAAKX,OAAL,CAAaY,OAAb,IAAwB,eADnB;MAEXC,IAAI,KAAAK,MAAA,CAAKvB,KAAK,CAACC,IAAX,OAAAsB,MAAA,CAAmBW,MAAnB,CAFO;MAGXf,MAAM,EAAE,KAHG;MAIXC,IAAI,EAAET,MAJK;MAKXU,OAAO,EAAE;QACP,gBAAgB,kBADT;QAEPC,aAAa,YAAAC,MAAA,CAAY,KAAKd,KAAL,CAAWe,WAAX,EAAZ;MAFN;IALE,CAAb;IAWA,KAAKnB,OAAL,CAAaoB,UAAb,CAAwBC,OAAxB,CAAgCX,MAAhC,EAAwCH,QAAxC;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;EACE+B,MAAMA,CAACT,MAAD,EAAStB,QAAT,EAAmB;IACvB,IAAIG,MAAM,GAAG;MACXC,IAAI,EAAE,KAAKX,OAAL,CAAaY,OAAb,IAAwB,eADnB;MAEXC,IAAI,KAAAK,MAAA,CAAKvB,KAAK,CAACC,IAAX,OAAAsB,MAAA,CAAmBW,MAAnB,CAFO;MAGXf,MAAM,EAAE,QAHG;MAIXE,OAAO,EAAE;QACP,gBAAgB,kBADT;QAEPC,aAAa,YAAAC,MAAA,CAAY,KAAKd,KAAL,CAAWe,WAAX,EAAZ;MAFN;IAJE,CAAb;IAUA,KAAKnB,OAAL,CAAaoB,UAAb,CAAwBC,OAAxB,CAAgCX,MAAhC,EAAwCH,QAAxC;EACD;AAzLS;eA4LGZ,K"},"metadata":{},"sourceType":"script","externalDependencies":[]}