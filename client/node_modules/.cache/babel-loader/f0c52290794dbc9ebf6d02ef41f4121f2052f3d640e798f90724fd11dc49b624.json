{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _fs = _interopRequireDefault(require(\"fs\"));\nvar _path = _interopRequireDefault(require(\"path\"));\nvar _requireModule = _interopRequireDefault(require(\"require-module\"));\nvar _Credentials = _interopRequireDefault(require(\"./Credentials\"));\nvar _JwtGenerator = _interopRequireDefault(require(\"./JwtGenerator\"));\nvar _HashGenerator = _interopRequireDefault(require(\"./HashGenerator\"));\nvar _Message = _interopRequireDefault(require(\"./Message\"));\nvar _Messages = _interopRequireDefault(require(\"./Messages\"));\nvar _Voice = _interopRequireDefault(require(\"./Voice\"));\nvar _Number = _interopRequireDefault(require(\"./Number\"));\nvar _Verify = _interopRequireDefault(require(\"./Verify\"));\nvar _NumberInsight = _interopRequireDefault(require(\"./NumberInsight\"));\nvar _App = _interopRequireDefault(require(\"./App\"));\nvar _Account = _interopRequireDefault(require(\"./Account\"));\nvar _CallsResource = _interopRequireDefault(require(\"./CallsResource\"));\nvar _Conversations = _interopRequireDefault(require(\"./Conversations\"));\nvar _Users = _interopRequireDefault(require(\"./Users\"));\nvar _FilesResource = _interopRequireDefault(require(\"./FilesResource\"));\nvar _Conversion = _interopRequireDefault(require(\"./Conversion\"));\nvar _Media = _interopRequireDefault(require(\"./Media\"));\nvar _Redact = _interopRequireDefault(require(\"./Redact\"));\nvar _Channel = _interopRequireDefault(require(\"./Channel\"));\nvar _Dispatch = _interopRequireDefault(require(\"./Dispatch\"));\nvar _Pricing = _interopRequireDefault(require(\"./Pricing\"));\nvar _HttpClient = _interopRequireDefault(require(\"./HttpClient\"));\nvar _NullLogger = _interopRequireDefault(require(\"./NullLogger\"));\nvar _ConsoleLogger = _interopRequireDefault(require(\"./ConsoleLogger\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar jwtGeneratorInstance = new _JwtGenerator.default();\nvar hashGeneratorInstance = new _HashGenerator.default();\nclass Vonage {\n  /**\n   * @param {Credentials} credentials - Vonage API credentials\n   * @param {string} credentials.apiKey - the Vonage API key\n   * @param {string} credentials.apiSecret - the Vonage API secret\n   * @param {Object} options - Additional options\n   * @param {boolean} options.debug - `true` to turn on debug logging\n   * @param {Object} options.logger - Set a custom logger.\n   * @param {string} options.appendToUserAgent - A value to append to the user agent.\n   *                    The value will be prefixed with a `/`\n   */\n  constructor(credentials) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      debug: false\n    };\n    this.credentials = _Credentials.default.parse(credentials);\n    this.options = Object.assign({}, options); // If no logger has been supplied but debug has been set\n    // default to using the ConsoleLogger\n\n    if (!this.options.logger && this.options.debug) {\n      this.options.logger = new _ConsoleLogger.default();\n    } else if (!this.options.logger) {\n      // Swallow the logging\n      this.options.logger = new _NullLogger.default();\n    }\n    var userAgent = \"@vonage/server-sdk/UNKNOWN node/UNKNOWN\";\n    try {\n      var packageDetails = require(_path.default.join(__dirname, \"..\", \"package.json\"));\n      userAgent = \"@vonage/server-sdk/\".concat(packageDetails.version, \" node/\").concat(process.version.replace(\"v\", \"\"));\n    } catch (e) {\n      console.warn(\"Could not load package details\");\n    }\n    this.options.userAgent = userAgent;\n    if (this.options.appendToUserAgent) {\n      this.options.userAgent += \" \".concat(this.options.appendToUserAgent);\n    } // This is legacy, everything should use rest or api going forward\n\n    this.options.httpClient = new _HttpClient.default(Object.assign({\n      host: this.options.restHost || \"rest.nexmo.com\"\n    }, this.options), this.credentials); // We have two different hosts, so we use two different HttpClients\n\n    this.options.api = new _HttpClient.default(Object.assign({\n      host: this.options.apiHost || \"api.nexmo.com\"\n    }, this.options), this.credentials);\n    this.options.rest = new _HttpClient.default(Object.assign({\n      host: this.options.restHost || \"rest.nexmo.com\"\n    }, this.options), this.credentials);\n    this.message = new _Message.default(this.credentials, this.options);\n    this.messages = new _Messages.default(this.credentials, this.options);\n    this.voice = new _Voice.default(this.credentials, this.options);\n    this.number = new _Number.default(this.credentials, this.options);\n    this.verify = new _Verify.default(this.credentials, this.options);\n    this.numberInsight = new _NumberInsight.default(this.credentials, this.options);\n    this.applications = new _App.default(this.credentials, this.options);\n    this.account = new _Account.default(this.credentials, this.options);\n    this.calls = new _CallsResource.default(this.credentials, this.options);\n    this.conversations = new _Conversations.default(this.credentials, this.options);\n    this.users = new _Users.default(this.credentials, this.options);\n    this.files = new _FilesResource.default(this.credentials, this.options);\n    this.conversion = new _Conversion.default(this.credentials, this.options);\n    this.media = new _Media.default(this.credentials, this.options);\n    this.redact = new _Redact.default(this.credentials, this.options);\n    this.dispatch = new _Dispatch.default(this.credentials, this.options);\n    this.pricing = new _Pricing.default(this.credentials, this.options);\n    var mapping = [{\n      service: \"video\",\n      client: \"Video\",\n      package: \"@vonage/video\"\n    }];\n    for (var i = 0; i < mapping.length; i++) {\n      try {\n        var packageName = mapping[i].package;\n        var client = (0, _requireModule.default)(packageName);\n        this[mapping[i].service] = new client[mapping[i].client](this.credentials);\n      } catch (err) {// do nothing, if we can't load the package assume it's just not there\n      }\n    }\n    /**\n     * @deprecated Please use vonage.messages\n     */\n\n    this.channel = new _Channel.default(this.credentials, this.options);\n    /**\n     * @deprecated Please use vonage.applications\n     */\n\n    this.app = this.applications;\n  }\n  /**\n   * Generate a JSON Web Token (JWT).\n   *\n   * The private key used upon Vonage instance construction will be used to sign\n   * the JWT. The application_id you used upon Vonage instance creation will be\n   * included in the claims for the JWT, however this can be overridden by passing\n   * an application_id as part of the claims.\n   *\n   * @param {Object} claims - name/value pair claims to sign within the JWT\n   *\n   * @returns {String} the generated token\n   */\n\n  generateJwt() {\n    var claims = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (claims.application_id === undefined) {\n      claims.application_id = this.credentials.applicationId;\n    }\n    return Vonage.generateJwt(this.credentials.privateKey, claims);\n  }\n  /**\n   * Generate a Signature Hash.\n   *\n   * @param {Object} params - params to generate hash from\n   *\n   * @returns {String} the generated token\n   */\n\n  generateSignature(params) {\n    return this.credentials.generateSignature(params);\n  }\n}\n/**\n * Generate a JSON Web Token (JWT).\n *\n * @param {String|Buffer} privateKey - the path to the private key certificate\n *          to be used when signing the claims.\n * @param {Object} claims - name/value pair claims to sign within the JWT\n *\n * @returns {String} the generated token\n */\n\nVonage.generateJwt = (privateKey, claims) => {\n  if (!(privateKey instanceof Buffer)) {\n    if (!_fs.default.existsSync(privateKey)) {\n      throw new Error(\"File \\\"\".concat(privateKey, \"\\\" not found.\"));\n    } else {\n      privateKey = _fs.default.readFileSync(privateKey);\n    }\n  }\n  return jwtGeneratorInstance.generate(privateKey, claims);\n};\n/**\n * Generate a Signature Hash.\n *\n * @param {String} method - the method to be used when creating the hash\n * @param {String} secret - the secret to be used when creating the hash\n * @param {Object} params - params to generate hash from\n *\n * @returns {String} the generated token\n */\n\nVonage.generateSignature = (method, secret, params) => {\n  return hashGeneratorInstance.generate(method, secret, params);\n};\nvar _default = Vonage;\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"names":["_fs","_interopRequireDefault","require","_path","_requireModule","_Credentials","_JwtGenerator","_HashGenerator","_Message","_Messages","_Voice","_Number","_Verify","_NumberInsight","_App","_Account","_CallsResource","_Conversations","_Users","_FilesResource","_Conversion","_Media","_Redact","_Channel","_Dispatch","_Pricing","_HttpClient","_NullLogger","_ConsoleLogger","jwtGeneratorInstance","default","hashGeneratorInstance","Vonage","constructor","credentials","options","arguments","length","undefined","debug","parse","Object","assign","logger","userAgent","packageDetails","join","__dirname","concat","version","process","replace","e","console","warn","appendToUserAgent","httpClient","host","restHost","api","apiHost","rest","message","messages","voice","number","verify","numberInsight","applications","account","calls","conversations","users","files","conversion","media","redact","dispatch","pricing","mapping","service","client","package","i","packageName","err","channel","app","generateJwt","claims","application_id","applicationId","privateKey","generateSignature","params","Buffer","existsSync","Error","readFileSync","generate","method","secret"],"sources":["/Users/vineetkhodre/react-workspace/thoughtctlchatapp/node_modules/@vonage/server-sdk/src/Vonage.js"],"sourcesContent":["import fs from \"fs\";\nimport path from \"path\";\nimport requireModule from \"require-module\";\n\nimport Credentials from \"./Credentials\";\nimport JwtGenerator from \"./JwtGenerator\";\nimport HashGenerator from \"./HashGenerator\";\nimport Message from \"./Message\";\nimport Messages from \"./Messages\";\nimport Voice from \"./Voice\";\nimport Number from \"./Number\";\nimport Verify from \"./Verify\";\nimport NumberInsight from \"./NumberInsight\";\nimport App from \"./App\";\nimport Account from \"./Account\";\nimport CallsResource from \"./CallsResource\";\nimport Conversations from \"./Conversations\";\nimport Users from \"./Users\";\nimport FilesResource from \"./FilesResource\";\nimport Conversion from \"./Conversion\";\nimport Media from \"./Media\";\nimport Redact from \"./Redact\";\nimport Channel from \"./Channel\";\nimport Dispatch from \"./Dispatch\";\nimport Pricing from \"./Pricing\";\nimport HttpClient from \"./HttpClient\";\nimport NullLogger from \"./NullLogger\";\nimport ConsoleLogger from \"./ConsoleLogger\";\n\nconst jwtGeneratorInstance = new JwtGenerator();\nconst hashGeneratorInstance = new HashGenerator();\n\nclass Vonage {\n  /**\n   * @param {Credentials} credentials - Vonage API credentials\n   * @param {string} credentials.apiKey - the Vonage API key\n   * @param {string} credentials.apiSecret - the Vonage API secret\n   * @param {Object} options - Additional options\n   * @param {boolean} options.debug - `true` to turn on debug logging\n   * @param {Object} options.logger - Set a custom logger.\n   * @param {string} options.appendToUserAgent - A value to append to the user agent.\n   *                    The value will be prefixed with a `/`\n   */\n  constructor(credentials, options = { debug: false }) {\n    this.credentials = Credentials.parse(credentials);\n    this.options = Object.assign({}, options);\n\n    // If no logger has been supplied but debug has been set\n    // default to using the ConsoleLogger\n    if (!this.options.logger && this.options.debug) {\n      this.options.logger = new ConsoleLogger();\n    } else if (!this.options.logger) {\n      // Swallow the logging\n      this.options.logger = new NullLogger();\n    }\n\n    let userAgent = \"@vonage/server-sdk/UNKNOWN node/UNKNOWN\";\n    try {\n      var packageDetails = require(path.join(__dirname, \"..\", \"package.json\"));\n      userAgent = `@vonage/server-sdk/${\n        packageDetails.version\n      } node/${process.version.replace(\"v\", \"\")}`;\n    } catch (e) {\n      console.warn(\"Could not load package details\");\n    }\n    this.options.userAgent = userAgent;\n    if (this.options.appendToUserAgent) {\n      this.options.userAgent += ` ${this.options.appendToUserAgent}`;\n    }\n\n    // This is legacy, everything should use rest or api going forward\n    this.options.httpClient = new HttpClient(\n      Object.assign(\n        { host: this.options.restHost || \"rest.nexmo.com\" },\n        this.options\n      ),\n      this.credentials\n    );\n\n    // We have two different hosts, so we use two different HttpClients\n    this.options.api = new HttpClient(\n      Object.assign(\n        { host: this.options.apiHost || \"api.nexmo.com\" },\n        this.options\n      ),\n      this.credentials\n    );\n    this.options.rest = new HttpClient(\n      Object.assign(\n        { host: this.options.restHost || \"rest.nexmo.com\" },\n        this.options\n      ),\n      this.credentials\n    );\n\n    this.message = new Message(this.credentials, this.options);\n    this.messages = new Messages(this.credentials, this.options);\n    this.voice = new Voice(this.credentials, this.options);\n    this.number = new Number(this.credentials, this.options);\n    this.verify = new Verify(this.credentials, this.options);\n    this.numberInsight = new NumberInsight(this.credentials, this.options);\n    this.applications = new App(this.credentials, this.options);\n    this.account = new Account(this.credentials, this.options);\n    this.calls = new CallsResource(this.credentials, this.options);\n    this.conversations = new Conversations(this.credentials, this.options);\n    this.users = new Users(this.credentials, this.options);\n    this.files = new FilesResource(this.credentials, this.options);\n    this.conversion = new Conversion(this.credentials, this.options);\n    this.media = new Media(this.credentials, this.options);\n    this.redact = new Redact(this.credentials, this.options);\n    this.dispatch = new Dispatch(this.credentials, this.options);\n    this.pricing = new Pricing(this.credentials, this.options);\n\n    const mapping = [\n      { service: \"video\", client: \"Video\", package: \"@vonage/video\" },\n    ];\n\n    for (let i = 0; i < mapping.length; i++) {\n      try {\n        let packageName = mapping[i].package;\n        const client = requireModule(packageName);\n        this[mapping[i].service] = new client[mapping[i].client](\n          this.credentials\n        );\n      } catch (err) {\n        // do nothing, if we can't load the package assume it's just not there\n      }\n    }\n\n    /**\n     * @deprecated Please use vonage.messages\n     */\n    this.channel = new Channel(this.credentials, this.options);\n\n    /**\n     * @deprecated Please use vonage.applications\n     */\n    this.app = this.applications;\n  }\n\n  /**\n   * Generate a JSON Web Token (JWT).\n   *\n   * The private key used upon Vonage instance construction will be used to sign\n   * the JWT. The application_id you used upon Vonage instance creation will be\n   * included in the claims for the JWT, however this can be overridden by passing\n   * an application_id as part of the claims.\n   *\n   * @param {Object} claims - name/value pair claims to sign within the JWT\n   *\n   * @returns {String} the generated token\n   */\n\n  generateJwt(claims = {}) {\n    if (claims.application_id === undefined) {\n      claims.application_id = this.credentials.applicationId;\n    }\n    return Vonage.generateJwt(this.credentials.privateKey, claims);\n  }\n\n  /**\n   * Generate a Signature Hash.\n   *\n   * @param {Object} params - params to generate hash from\n   *\n   * @returns {String} the generated token\n   */\n  generateSignature(params) {\n    return this.credentials.generateSignature(params);\n  }\n}\n\n/**\n * Generate a JSON Web Token (JWT).\n *\n * @param {String|Buffer} privateKey - the path to the private key certificate\n *          to be used when signing the claims.\n * @param {Object} claims - name/value pair claims to sign within the JWT\n *\n * @returns {String} the generated token\n */\nVonage.generateJwt = (privateKey, claims) => {\n  if (!(privateKey instanceof Buffer)) {\n    if (!fs.existsSync(privateKey)) {\n      throw new Error(`File \"${privateKey}\" not found.`);\n    } else {\n      privateKey = fs.readFileSync(privateKey);\n    }\n  }\n  return jwtGeneratorInstance.generate(privateKey, claims);\n};\n\n/**\n * Generate a Signature Hash.\n *\n * @param {String} method - the method to be used when creating the hash\n * @param {String} secret - the secret to be used when creating the hash\n * @param {Object} params - params to generate hash from\n *\n * @returns {String} the generated token\n */\nVonage.generateSignature = (method, secret, params) => {\n  return hashGeneratorInstance.generate(method, secret, params);\n};\n\nexport default Vonage;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}