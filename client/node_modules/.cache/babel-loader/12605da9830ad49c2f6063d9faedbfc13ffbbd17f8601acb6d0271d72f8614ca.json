{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\n * Nexmo Client SDK\n *\n * Copyright (c) Nexmo Inc.\n*/\nconst nexmoClientError_1 = require(\"../nexmoClientError\");\n/** Page Class for Paginated Results\n *\n * @class Page\n * @param {number} page_size the number of resources returned in a single request list\n * @param {string} order 'asc' or 'desc' ordering of resources (usually based on creation time)\n * @param {string} cursor cursor parameter to access the next or previous page of a data set\n * @param {Application} application - the parent Application\n * @param {string} [event_type] the type of event used to filter event requests\n *\n * @private\n*/\nclass Page {\n  constructor(params = {}) {\n    this.page_size = params.page_size;\n    this.order = params.order;\n    this.cursor = params.cursor;\n    this.application = params.application;\n    if (params.event_type && params.event_type.length > 0) {\n      this.event_type = params.event_type;\n    }\n  }\n  /**\n   * Check if previous page exists\n   * @returns {Boolean}\n   * @example <caption>Check if previous page exists</caption>\n   * // currentPage is the current Conversations or Events Page\n   * currentPage.hasPrev() // true or false\n  */\n  hasPrev() {\n    return this.cursor.prev ? this.cursor.prev.length > 0 : false;\n  }\n  /**\n   * Check if next page exists\n   * @returns {Boolean}\n   * @example <caption>Check if next page exists</caption>\n   * // currentPage is the current Conversations or Events Page\n   * currentPage.hasNext() // true or false\n  */\n  hasNext() {\n    return this.cursor.next ? this.cursor.next.length > 0 : false;\n  }\n  /**\n    * Create config params for paginationRequest\n    * @param {string} cursor cursor parameter to access the next or previous page of a data set\n    * @returns {Object}\n   * @private\n  */\n  _getConfig(cursor) {\n    const config = {\n      page_size: this.page_size,\n      order: this.order,\n      cursor,\n      ...(this.event_type && {\n        event_type: this.event_type\n      })\n    };\n    return config;\n  }\n  /**\n   * Create a nexmoClientError when page does not exist\n   * @private\n  */\n  _getError() {\n    return Promise.reject(new nexmoClientError_1.NexmoClientError('error:invalid-cursor'));\n  }\n}\nexports.default = Page;\nmodule.exports = Page;","map":{"version":3,"names":["Object","defineProperty","exports","value","nexmoClientError_1","require","Page","constructor","params","page_size","order","cursor","application","event_type","length","hasPrev","prev","hasNext","next","_getConfig","config","_getError","Promise","reject","NexmoClientError","default","module"],"sources":["/Users/vineetkhodre/react-workspace/thoughtctlchatapp/client/node_modules/nexmo-client/dist/pages/page.js"],"sourcesContent":["'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*\n * Nexmo Client SDK\n *\n * Copyright (c) Nexmo Inc.\n*/\nconst nexmoClientError_1 = require(\"../nexmoClientError\");\n/** Page Class for Paginated Results\n *\n * @class Page\n * @param {number} page_size the number of resources returned in a single request list\n * @param {string} order 'asc' or 'desc' ordering of resources (usually based on creation time)\n * @param {string} cursor cursor parameter to access the next or previous page of a data set\n * @param {Application} application - the parent Application\n * @param {string} [event_type] the type of event used to filter event requests\n *\n * @private\n*/\nclass Page {\n    constructor(params = {}) {\n        this.page_size = params.page_size;\n        this.order = params.order;\n        this.cursor = params.cursor;\n        this.application = params.application;\n        if (params.event_type && params.event_type.length > 0) {\n            this.event_type = params.event_type;\n        }\n    }\n    /**\n     * Check if previous page exists\n     * @returns {Boolean}\n     * @example <caption>Check if previous page exists</caption>\n     * // currentPage is the current Conversations or Events Page\n     * currentPage.hasPrev() // true or false\n    */\n    hasPrev() {\n        return this.cursor.prev ? this.cursor.prev.length > 0 : false;\n    }\n    /**\n     * Check if next page exists\n     * @returns {Boolean}\n     * @example <caption>Check if next page exists</caption>\n     * // currentPage is the current Conversations or Events Page\n     * currentPage.hasNext() // true or false\n    */\n    hasNext() {\n        return this.cursor.next ? this.cursor.next.length > 0 : false;\n    }\n    /**\n      * Create config params for paginationRequest\n      * @param {string} cursor cursor parameter to access the next or previous page of a data set\n      * @returns {Object}\n     * @private\n    */\n    _getConfig(cursor) {\n        const config = {\n            page_size: this.page_size,\n            order: this.order,\n            cursor,\n            ...(this.event_type && { event_type: this.event_type })\n        };\n        return config;\n    }\n    /**\n     * Create a nexmoClientError when page does not exist\n     * @private\n    */\n    _getError() {\n        return Promise.reject(new nexmoClientError_1.NexmoClientError('error:invalid-cursor'));\n    }\n}\nexports.default = Page;\nmodule.exports = Page;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D;AACA;AACA;AACA;AACA;AACA,MAAMC,kBAAkB,GAAGC,OAAO,CAAC,qBAAqB,CAAC;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,IAAI,CAAC;EACPC,WAAWA,CAACC,MAAM,GAAG,CAAC,CAAC,EAAE;IACrB,IAAI,CAACC,SAAS,GAAGD,MAAM,CAACC,SAAS;IACjC,IAAI,CAACC,KAAK,GAAGF,MAAM,CAACE,KAAK;IACzB,IAAI,CAACC,MAAM,GAAGH,MAAM,CAACG,MAAM;IAC3B,IAAI,CAACC,WAAW,GAAGJ,MAAM,CAACI,WAAW;IACrC,IAAIJ,MAAM,CAACK,UAAU,IAAIL,MAAM,CAACK,UAAU,CAACC,MAAM,GAAG,CAAC,EAAE;MACnD,IAAI,CAACD,UAAU,GAAGL,MAAM,CAACK,UAAU;IACvC;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIE,OAAOA,CAAA,EAAG;IACN,OAAO,IAAI,CAACJ,MAAM,CAACK,IAAI,GAAG,IAAI,CAACL,MAAM,CAACK,IAAI,CAACF,MAAM,GAAG,CAAC,GAAG,KAAK;EACjE;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIG,OAAOA,CAAA,EAAG;IACN,OAAO,IAAI,CAACN,MAAM,CAACO,IAAI,GAAG,IAAI,CAACP,MAAM,CAACO,IAAI,CAACJ,MAAM,GAAG,CAAC,GAAG,KAAK;EACjE;EACA;AACJ;AACA;AACA;AACA;AACA;EACIK,UAAUA,CAACR,MAAM,EAAE;IACf,MAAMS,MAAM,GAAG;MACXX,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBC,KAAK,EAAE,IAAI,CAACA,KAAK;MACjBC,MAAM;MACN,IAAI,IAAI,CAACE,UAAU,IAAI;QAAEA,UAAU,EAAE,IAAI,CAACA;MAAW,CAAC;IAC1D,CAAC;IACD,OAAOO,MAAM;EACjB;EACA;AACJ;AACA;AACA;EACIC,SAASA,CAAA,EAAG;IACR,OAAOC,OAAO,CAACC,MAAM,CAAC,IAAInB,kBAAkB,CAACoB,gBAAgB,CAAC,sBAAsB,CAAC,CAAC;EAC1F;AACJ;AACAtB,OAAO,CAACuB,OAAO,GAAGnB,IAAI;AACtBoB,MAAM,CAACxB,OAAO,GAAGI,IAAI"},"metadata":{},"sourceType":"script","externalDependencies":[]}