{"ast":null,"code":"\"use strict\";\n\nvar crypto = require(\"crypto\");\nclass HashGenerator {\n  /**\n   * Generate a Signature Hash.\n   *\n   * @param {String} method - the method to be used when creating the hash\n   * @param {String} secret - the secret to be used when creating the hash\n   * @param {Object} params - params to generate hash from\n   *\n   * @returns {String} the generated token\n   */\n  generate(method, secret, params) {\n    params = params || {};\n    var signedQuery = \"\";\n    params = JSON.parse(JSON.stringify(params));\n    if (params.sig) {\n      delete params.sig;\n    }\n    Object.keys(params).sort().forEach(key => {\n      // replace & and = with _\n      signedQuery += \"&\" + key + \"=\" + params[key].replace(/\\&|\\=/g, \"_\");\n    });\n    var hash = \"\";\n    switch (method) {\n      case \"md5hash\":\n        signedQuery += secret;\n        hash = crypto.createHash(\"md5\").update(signedQuery).digest(\"hex\");\n        break;\n      case \"md5\":\n      case \"sha1\":\n      case \"sha256\":\n      case \"sha512\":\n        hash = crypto.createHmac(method, secret).update(signedQuery).digest(\"hex\");\n        break;\n      default:\n        throw \"Unknown signature algorithm: \".concat(method, \". Expected: md5hash, md5, sha1, sha256, or sha512\");\n    }\n    return hash;\n  }\n}\nmodule.exports = HashGenerator;","map":{"version":3,"names":["crypto","require","HashGenerator","generate","method","secret","params","signedQuery","JSON","parse","stringify","sig","Object","keys","sort","forEach","key","replace","hash","createHash","update","digest","createHmac","concat","module","exports"],"sources":["/Users/vineetkhodre/react-workspace/thoughtctlchatapp/node_modules/@vonage/server-sdk/src/HashGenerator.js"],"sourcesContent":["const crypto = require(\"crypto\");\n\nclass HashGenerator {\n  /**\n   * Generate a Signature Hash.\n   *\n   * @param {String} method - the method to be used when creating the hash\n   * @param {String} secret - the secret to be used when creating the hash\n   * @param {Object} params - params to generate hash from\n   *\n   * @returns {String} the generated token\n   */\n  generate(method, secret, params) {\n    params = params || {};\n    var signedQuery = \"\";\n\n    params = JSON.parse(JSON.stringify(params));\n\n    if (params.sig) {\n      delete params.sig;\n    }\n\n    Object.keys(params)\n      .sort()\n      .forEach((key) => {\n        // replace & and = with _\n        signedQuery += \"&\" + key + \"=\" + params[key].replace(/\\&|\\=/g, \"_\");\n      });\n\n    var hash = \"\";\n\n    switch (method) {\n      case \"md5hash\":\n        signedQuery += secret;\n        hash = crypto.createHash(\"md5\").update(signedQuery).digest(\"hex\");\n        break;\n      case \"md5\":\n      case \"sha1\":\n      case \"sha256\":\n      case \"sha512\":\n        hash = crypto\n          .createHmac(method, secret)\n          .update(signedQuery)\n          .digest(\"hex\");\n        break;\n\n      default:\n        throw `Unknown signature algorithm: ${method}. Expected: md5hash, md5, sha1, sha256, or sha512`;\n    }\n\n    return hash;\n  }\n}\n\nmodule.exports = HashGenerator;\n"],"mappings":";;AAAA,IAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;AAEA,MAAMC,aAAN,CAAoB;EAClB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,QAAQA,CAACC,MAAD,EAASC,MAAT,EAAiBC,MAAjB,EAAyB;IAC/BA,MAAM,GAAGA,MAAM,IAAI,EAAnB;IACA,IAAIC,WAAW,GAAG,EAAlB;IAEAD,MAAM,GAAGE,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeJ,MAAf,CAAX,CAAT;IAEA,IAAIA,MAAM,CAACK,GAAX,EAAgB;MACd,OAAOL,MAAM,CAACK,GAAd;IACD;IAEDC,MAAM,CAACC,IAAP,CAAYP,MAAZ,EACGQ,IADH,GAEGC,OAFH,CAEYC,GAAD,IAAS;MAChB;MACAT,WAAW,IAAI,MAAMS,GAAN,GAAY,GAAZ,GAAkBV,MAAM,CAACU,GAAD,CAAN,CAAYC,OAAZ,CAAoB,QAApB,EAA8B,GAA9B,CAAjC;IACD,CALH;IAOA,IAAIC,IAAI,GAAG,EAAX;IAEA,QAAQd,MAAR;MACE,KAAK,SAAL;QACEG,WAAW,IAAIF,MAAf;QACAa,IAAI,GAAGlB,MAAM,CAACmB,UAAP,CAAkB,KAAlB,EAAyBC,MAAzB,CAAgCb,WAAhC,EAA6Cc,MAA7C,CAAoD,KAApD,CAAP;QACA;MACF,KAAK,KAAL;MACA,KAAK,MAAL;MACA,KAAK,QAAL;MACA,KAAK,QAAL;QACEH,IAAI,GAAGlB,MAAM,CACVsB,UADI,CACOlB,MADP,EACeC,MADf,EAEJe,MAFI,CAEGb,WAFH,EAGJc,MAHI,CAGG,KAHH,CAAP;QAIA;MAEF;QACE,sCAAAE,MAAA,CAAsCnB,MAAtC;IAhBJ;IAmBA,OAAOc,IAAP;EACD;AAjDiB;AAoDpBM,MAAM,CAACC,OAAP,GAAiBvB,aAAjB"},"metadata":{},"sourceType":"script","externalDependencies":[]}